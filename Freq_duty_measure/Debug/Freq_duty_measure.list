
Freq_duty_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080038a8  080038a8  000048a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800395c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000014  08003970  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003970  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078c7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001594  00000000  00000000  0000c903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000de98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d6  00000000  00000000  0000e768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebc0  00000000  00000000  0000ee3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d4e  00000000  00000000  0001d9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bca9  00000000  00000000  0002774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000833f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002114  00000000  00000000  00083438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0008554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003890 	.word	0x08003890

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003890 	.word	0x08003890

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fca6 	bl	8000b78 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fc0f 	bl	8000a54 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa65 	bl	800070c <__aeabi_fsub>
 8000242:	f000 fc07 	bl	8000a54 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0244      	lsls	r4, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0047      	lsls	r7, r0, #1
 800025e:	1c0e      	adds	r6, r1, #0
 8000260:	0a64      	lsrs	r4, r4, #9
 8000262:	0e3f      	lsrs	r7, r7, #24
 8000264:	0fc5      	lsrs	r5, r0, #31
 8000266:	2f00      	cmp	r7, #0
 8000268:	d03c      	beq.n	80002e4 <__aeabi_fdiv+0x94>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d042      	beq.n	80002f4 <__aeabi_fdiv+0xa4>
 800026e:	2300      	movs	r3, #0
 8000270:	2280      	movs	r2, #128	@ 0x80
 8000272:	4699      	mov	r9, r3
 8000274:	469a      	mov	sl, r3
 8000276:	00e4      	lsls	r4, r4, #3
 8000278:	04d2      	lsls	r2, r2, #19
 800027a:	4314      	orrs	r4, r2
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0273      	lsls	r3, r6, #9
 8000280:	0a5b      	lsrs	r3, r3, #9
 8000282:	4698      	mov	r8, r3
 8000284:	0073      	lsls	r3, r6, #1
 8000286:	0e1b      	lsrs	r3, r3, #24
 8000288:	0ff6      	lsrs	r6, r6, #31
 800028a:	2b00      	cmp	r3, #0
 800028c:	d01b      	beq.n	80002c6 <__aeabi_fdiv+0x76>
 800028e:	2bff      	cmp	r3, #255	@ 0xff
 8000290:	d013      	beq.n	80002ba <__aeabi_fdiv+0x6a>
 8000292:	4642      	mov	r2, r8
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	00d2      	lsls	r2, r2, #3
 8000298:	04c9      	lsls	r1, r1, #19
 800029a:	4311      	orrs	r1, r2
 800029c:	4688      	mov	r8, r1
 800029e:	2000      	movs	r0, #0
 80002a0:	3b7f      	subs	r3, #127	@ 0x7f
 80002a2:	0029      	movs	r1, r5
 80002a4:	1aff      	subs	r7, r7, r3
 80002a6:	464b      	mov	r3, r9
 80002a8:	4071      	eors	r1, r6
 80002aa:	b2c9      	uxtb	r1, r1
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_fdiv+0x62>
 80002b0:	e0b5      	b.n	800041e <__aeabi_fdiv+0x1ce>
 80002b2:	4a74      	ldr	r2, [pc, #464]	@ (8000484 <__aeabi_fdiv+0x234>)
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	58d3      	ldr	r3, [r2, r3]
 80002b8:	469f      	mov	pc, r3
 80002ba:	4643      	mov	r3, r8
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d13f      	bne.n	8000340 <__aeabi_fdiv+0xf0>
 80002c0:	3fff      	subs	r7, #255	@ 0xff
 80002c2:	3302      	adds	r3, #2
 80002c4:	e003      	b.n	80002ce <__aeabi_fdiv+0x7e>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d12d      	bne.n	8000328 <__aeabi_fdiv+0xd8>
 80002cc:	2301      	movs	r3, #1
 80002ce:	0029      	movs	r1, r5
 80002d0:	464a      	mov	r2, r9
 80002d2:	4071      	eors	r1, r6
 80002d4:	b2c9      	uxtb	r1, r1
 80002d6:	431a      	orrs	r2, r3
 80002d8:	2a0e      	cmp	r2, #14
 80002da:	d838      	bhi.n	800034e <__aeabi_fdiv+0xfe>
 80002dc:	486a      	ldr	r0, [pc, #424]	@ (8000488 <__aeabi_fdiv+0x238>)
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	5882      	ldr	r2, [r0, r2]
 80002e2:	4697      	mov	pc, r2
 80002e4:	2c00      	cmp	r4, #0
 80002e6:	d113      	bne.n	8000310 <__aeabi_fdiv+0xc0>
 80002e8:	2304      	movs	r3, #4
 80002ea:	4699      	mov	r9, r3
 80002ec:	3b03      	subs	r3, #3
 80002ee:	2700      	movs	r7, #0
 80002f0:	469a      	mov	sl, r3
 80002f2:	e7c4      	b.n	800027e <__aeabi_fdiv+0x2e>
 80002f4:	2c00      	cmp	r4, #0
 80002f6:	d105      	bne.n	8000304 <__aeabi_fdiv+0xb4>
 80002f8:	2308      	movs	r3, #8
 80002fa:	4699      	mov	r9, r3
 80002fc:	3b06      	subs	r3, #6
 80002fe:	27ff      	movs	r7, #255	@ 0xff
 8000300:	469a      	mov	sl, r3
 8000302:	e7bc      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000304:	230c      	movs	r3, #12
 8000306:	4699      	mov	r9, r3
 8000308:	3b09      	subs	r3, #9
 800030a:	27ff      	movs	r7, #255	@ 0xff
 800030c:	469a      	mov	sl, r3
 800030e:	e7b6      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000310:	0020      	movs	r0, r4
 8000312:	f000 fc3b 	bl	8000b8c <__clzsi2>
 8000316:	2776      	movs	r7, #118	@ 0x76
 8000318:	1f43      	subs	r3, r0, #5
 800031a:	409c      	lsls	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	427f      	negs	r7, r7
 8000320:	4699      	mov	r9, r3
 8000322:	469a      	mov	sl, r3
 8000324:	1a3f      	subs	r7, r7, r0
 8000326:	e7aa      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000328:	4640      	mov	r0, r8
 800032a:	f000 fc2f 	bl	8000b8c <__clzsi2>
 800032e:	4642      	mov	r2, r8
 8000330:	1f43      	subs	r3, r0, #5
 8000332:	409a      	lsls	r2, r3
 8000334:	2376      	movs	r3, #118	@ 0x76
 8000336:	425b      	negs	r3, r3
 8000338:	1a1b      	subs	r3, r3, r0
 800033a:	4690      	mov	r8, r2
 800033c:	2000      	movs	r0, #0
 800033e:	e7b0      	b.n	80002a2 <__aeabi_fdiv+0x52>
 8000340:	2303      	movs	r3, #3
 8000342:	464a      	mov	r2, r9
 8000344:	431a      	orrs	r2, r3
 8000346:	4691      	mov	r9, r2
 8000348:	2003      	movs	r0, #3
 800034a:	33fc      	adds	r3, #252	@ 0xfc
 800034c:	e7a9      	b.n	80002a2 <__aeabi_fdiv+0x52>
 800034e:	000d      	movs	r5, r1
 8000350:	20ff      	movs	r0, #255	@ 0xff
 8000352:	2200      	movs	r2, #0
 8000354:	05c0      	lsls	r0, r0, #23
 8000356:	07ed      	lsls	r5, r5, #31
 8000358:	4310      	orrs	r0, r2
 800035a:	4328      	orrs	r0, r5
 800035c:	bce0      	pop	{r5, r6, r7}
 800035e:	46ba      	mov	sl, r7
 8000360:	46b1      	mov	r9, r6
 8000362:	46a8      	mov	r8, r5
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	000d      	movs	r5, r1
 8000368:	2000      	movs	r0, #0
 800036a:	2200      	movs	r2, #0
 800036c:	e7f2      	b.n	8000354 <__aeabi_fdiv+0x104>
 800036e:	4653      	mov	r3, sl
 8000370:	2b02      	cmp	r3, #2
 8000372:	d0ed      	beq.n	8000350 <__aeabi_fdiv+0x100>
 8000374:	2b03      	cmp	r3, #3
 8000376:	d033      	beq.n	80003e0 <__aeabi_fdiv+0x190>
 8000378:	46a0      	mov	r8, r4
 800037a:	2b01      	cmp	r3, #1
 800037c:	d105      	bne.n	800038a <__aeabi_fdiv+0x13a>
 800037e:	2000      	movs	r0, #0
 8000380:	2200      	movs	r2, #0
 8000382:	e7e7      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000384:	0035      	movs	r5, r6
 8000386:	2803      	cmp	r0, #3
 8000388:	d07a      	beq.n	8000480 <__aeabi_fdiv+0x230>
 800038a:	003b      	movs	r3, r7
 800038c:	337f      	adds	r3, #127	@ 0x7f
 800038e:	2b00      	cmp	r3, #0
 8000390:	dd2d      	ble.n	80003ee <__aeabi_fdiv+0x19e>
 8000392:	4642      	mov	r2, r8
 8000394:	0752      	lsls	r2, r2, #29
 8000396:	d007      	beq.n	80003a8 <__aeabi_fdiv+0x158>
 8000398:	220f      	movs	r2, #15
 800039a:	4641      	mov	r1, r8
 800039c:	400a      	ands	r2, r1
 800039e:	2a04      	cmp	r2, #4
 80003a0:	d002      	beq.n	80003a8 <__aeabi_fdiv+0x158>
 80003a2:	2204      	movs	r2, #4
 80003a4:	4694      	mov	ip, r2
 80003a6:	44e0      	add	r8, ip
 80003a8:	4642      	mov	r2, r8
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	d505      	bpl.n	80003ba <__aeabi_fdiv+0x16a>
 80003ae:	4642      	mov	r2, r8
 80003b0:	4b36      	ldr	r3, [pc, #216]	@ (800048c <__aeabi_fdiv+0x23c>)
 80003b2:	401a      	ands	r2, r3
 80003b4:	003b      	movs	r3, r7
 80003b6:	4690      	mov	r8, r2
 80003b8:	3380      	adds	r3, #128	@ 0x80
 80003ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80003bc:	dcc8      	bgt.n	8000350 <__aeabi_fdiv+0x100>
 80003be:	4642      	mov	r2, r8
 80003c0:	0192      	lsls	r2, r2, #6
 80003c2:	0a52      	lsrs	r2, r2, #9
 80003c4:	b2d8      	uxtb	r0, r3
 80003c6:	e7c5      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003c8:	2280      	movs	r2, #128	@ 0x80
 80003ca:	2500      	movs	r5, #0
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	03d2      	lsls	r2, r2, #15
 80003d0:	e7c0      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	03d2      	lsls	r2, r2, #15
 80003d6:	4214      	tst	r4, r2
 80003d8:	d002      	beq.n	80003e0 <__aeabi_fdiv+0x190>
 80003da:	4643      	mov	r3, r8
 80003dc:	4213      	tst	r3, r2
 80003de:	d049      	beq.n	8000474 <__aeabi_fdiv+0x224>
 80003e0:	2280      	movs	r2, #128	@ 0x80
 80003e2:	03d2      	lsls	r2, r2, #15
 80003e4:	4322      	orrs	r2, r4
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	20ff      	movs	r0, #255	@ 0xff
 80003ea:	0a52      	lsrs	r2, r2, #9
 80003ec:	e7b2      	b.n	8000354 <__aeabi_fdiv+0x104>
 80003ee:	2201      	movs	r2, #1
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	2b1b      	cmp	r3, #27
 80003f4:	dcc3      	bgt.n	800037e <__aeabi_fdiv+0x12e>
 80003f6:	4642      	mov	r2, r8
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4643      	mov	r3, r8
 80003fc:	379e      	adds	r7, #158	@ 0x9e
 80003fe:	40bb      	lsls	r3, r7
 8000400:	1e59      	subs	r1, r3, #1
 8000402:	418b      	sbcs	r3, r1
 8000404:	431a      	orrs	r2, r3
 8000406:	0753      	lsls	r3, r2, #29
 8000408:	d004      	beq.n	8000414 <__aeabi_fdiv+0x1c4>
 800040a:	230f      	movs	r3, #15
 800040c:	4013      	ands	r3, r2
 800040e:	2b04      	cmp	r3, #4
 8000410:	d000      	beq.n	8000414 <__aeabi_fdiv+0x1c4>
 8000412:	3204      	adds	r2, #4
 8000414:	0153      	lsls	r3, r2, #5
 8000416:	d529      	bpl.n	800046c <__aeabi_fdiv+0x21c>
 8000418:	2001      	movs	r0, #1
 800041a:	2200      	movs	r2, #0
 800041c:	e79a      	b.n	8000354 <__aeabi_fdiv+0x104>
 800041e:	4642      	mov	r2, r8
 8000420:	0163      	lsls	r3, r4, #5
 8000422:	0155      	lsls	r5, r2, #5
 8000424:	42ab      	cmp	r3, r5
 8000426:	d215      	bcs.n	8000454 <__aeabi_fdiv+0x204>
 8000428:	201b      	movs	r0, #27
 800042a:	2200      	movs	r2, #0
 800042c:	3f01      	subs	r7, #1
 800042e:	2601      	movs	r6, #1
 8000430:	001c      	movs	r4, r3
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2c00      	cmp	r4, #0
 8000438:	db01      	blt.n	800043e <__aeabi_fdiv+0x1ee>
 800043a:	429d      	cmp	r5, r3
 800043c:	d801      	bhi.n	8000442 <__aeabi_fdiv+0x1f2>
 800043e:	1b5b      	subs	r3, r3, r5
 8000440:	4332      	orrs	r2, r6
 8000442:	3801      	subs	r0, #1
 8000444:	2800      	cmp	r0, #0
 8000446:	d1f3      	bne.n	8000430 <__aeabi_fdiv+0x1e0>
 8000448:	1e58      	subs	r0, r3, #1
 800044a:	4183      	sbcs	r3, r0
 800044c:	4313      	orrs	r3, r2
 800044e:	4698      	mov	r8, r3
 8000450:	000d      	movs	r5, r1
 8000452:	e79a      	b.n	800038a <__aeabi_fdiv+0x13a>
 8000454:	201a      	movs	r0, #26
 8000456:	2201      	movs	r2, #1
 8000458:	1b5b      	subs	r3, r3, r5
 800045a:	e7e8      	b.n	800042e <__aeabi_fdiv+0x1de>
 800045c:	3b02      	subs	r3, #2
 800045e:	425a      	negs	r2, r3
 8000460:	4153      	adcs	r3, r2
 8000462:	425b      	negs	r3, r3
 8000464:	0035      	movs	r5, r6
 8000466:	2200      	movs	r2, #0
 8000468:	b2d8      	uxtb	r0, r3
 800046a:	e773      	b.n	8000354 <__aeabi_fdiv+0x104>
 800046c:	0192      	lsls	r2, r2, #6
 800046e:	2000      	movs	r0, #0
 8000470:	0a52      	lsrs	r2, r2, #9
 8000472:	e76f      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000474:	431a      	orrs	r2, r3
 8000476:	0252      	lsls	r2, r2, #9
 8000478:	0035      	movs	r5, r6
 800047a:	20ff      	movs	r0, #255	@ 0xff
 800047c:	0a52      	lsrs	r2, r2, #9
 800047e:	e769      	b.n	8000354 <__aeabi_fdiv+0x104>
 8000480:	4644      	mov	r4, r8
 8000482:	e7ad      	b.n	80003e0 <__aeabi_fdiv+0x190>
 8000484:	080038a8 	.word	0x080038a8
 8000488:	080038e8 	.word	0x080038e8
 800048c:	f7ffffff 	.word	0xf7ffffff

08000490 <__aeabi_fmul>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	464f      	mov	r7, r9
 8000494:	4646      	mov	r6, r8
 8000496:	46d6      	mov	lr, sl
 8000498:	0243      	lsls	r3, r0, #9
 800049a:	0a5b      	lsrs	r3, r3, #9
 800049c:	0045      	lsls	r5, r0, #1
 800049e:	b5c0      	push	{r6, r7, lr}
 80004a0:	4699      	mov	r9, r3
 80004a2:	1c0f      	adds	r7, r1, #0
 80004a4:	0e2d      	lsrs	r5, r5, #24
 80004a6:	0fc6      	lsrs	r6, r0, #31
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fmul+0x1e>
 80004ac:	e088      	b.n	80005c0 <__aeabi_fmul+0x130>
 80004ae:	2dff      	cmp	r5, #255	@ 0xff
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fmul+0x24>
 80004b2:	e08d      	b.n	80005d0 <__aeabi_fmul+0x140>
 80004b4:	2280      	movs	r2, #128	@ 0x80
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	04d2      	lsls	r2, r2, #19
 80004ba:	431a      	orrs	r2, r3
 80004bc:	2300      	movs	r3, #0
 80004be:	4691      	mov	r9, r2
 80004c0:	4698      	mov	r8, r3
 80004c2:	469a      	mov	sl, r3
 80004c4:	3d7f      	subs	r5, #127	@ 0x7f
 80004c6:	027c      	lsls	r4, r7, #9
 80004c8:	007b      	lsls	r3, r7, #1
 80004ca:	0a64      	lsrs	r4, r4, #9
 80004cc:	0e1b      	lsrs	r3, r3, #24
 80004ce:	0fff      	lsrs	r7, r7, #31
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d068      	beq.n	80005a6 <__aeabi_fmul+0x116>
 80004d4:	2bff      	cmp	r3, #255	@ 0xff
 80004d6:	d021      	beq.n	800051c <__aeabi_fmul+0x8c>
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	00e4      	lsls	r4, r4, #3
 80004dc:	04d2      	lsls	r2, r2, #19
 80004de:	4314      	orrs	r4, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	3b7f      	subs	r3, #127	@ 0x7f
 80004e4:	195b      	adds	r3, r3, r5
 80004e6:	2100      	movs	r1, #0
 80004e8:	1c5d      	adds	r5, r3, #1
 80004ea:	2a0a      	cmp	r2, #10
 80004ec:	dc2e      	bgt.n	800054c <__aeabi_fmul+0xbc>
 80004ee:	407e      	eors	r6, r7
 80004f0:	4642      	mov	r2, r8
 80004f2:	2a02      	cmp	r2, #2
 80004f4:	dc23      	bgt.n	800053e <__aeabi_fmul+0xae>
 80004f6:	3a01      	subs	r2, #1
 80004f8:	2a01      	cmp	r2, #1
 80004fa:	d900      	bls.n	80004fe <__aeabi_fmul+0x6e>
 80004fc:	e0bd      	b.n	800067a <__aeabi_fmul+0x1ea>
 80004fe:	2902      	cmp	r1, #2
 8000500:	d06e      	beq.n	80005e0 <__aeabi_fmul+0x150>
 8000502:	2901      	cmp	r1, #1
 8000504:	d12c      	bne.n	8000560 <__aeabi_fmul+0xd0>
 8000506:	2000      	movs	r0, #0
 8000508:	2200      	movs	r2, #0
 800050a:	05c0      	lsls	r0, r0, #23
 800050c:	07f6      	lsls	r6, r6, #31
 800050e:	4310      	orrs	r0, r2
 8000510:	4330      	orrs	r0, r6
 8000512:	bce0      	pop	{r5, r6, r7}
 8000514:	46ba      	mov	sl, r7
 8000516:	46b1      	mov	r9, r6
 8000518:	46a8      	mov	r8, r5
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051c:	002b      	movs	r3, r5
 800051e:	33ff      	adds	r3, #255	@ 0xff
 8000520:	2c00      	cmp	r4, #0
 8000522:	d065      	beq.n	80005f0 <__aeabi_fmul+0x160>
 8000524:	2203      	movs	r2, #3
 8000526:	4641      	mov	r1, r8
 8000528:	4311      	orrs	r1, r2
 800052a:	0032      	movs	r2, r6
 800052c:	3501      	adds	r5, #1
 800052e:	4688      	mov	r8, r1
 8000530:	407a      	eors	r2, r7
 8000532:	35ff      	adds	r5, #255	@ 0xff
 8000534:	290a      	cmp	r1, #10
 8000536:	dd00      	ble.n	800053a <__aeabi_fmul+0xaa>
 8000538:	e0d8      	b.n	80006ec <__aeabi_fmul+0x25c>
 800053a:	0016      	movs	r6, r2
 800053c:	2103      	movs	r1, #3
 800053e:	4640      	mov	r0, r8
 8000540:	2201      	movs	r2, #1
 8000542:	4082      	lsls	r2, r0
 8000544:	20a6      	movs	r0, #166	@ 0xa6
 8000546:	00c0      	lsls	r0, r0, #3
 8000548:	4202      	tst	r2, r0
 800054a:	d020      	beq.n	800058e <__aeabi_fmul+0xfe>
 800054c:	4653      	mov	r3, sl
 800054e:	2b02      	cmp	r3, #2
 8000550:	d046      	beq.n	80005e0 <__aeabi_fmul+0x150>
 8000552:	2b03      	cmp	r3, #3
 8000554:	d100      	bne.n	8000558 <__aeabi_fmul+0xc8>
 8000556:	e0bb      	b.n	80006d0 <__aeabi_fmul+0x240>
 8000558:	4651      	mov	r1, sl
 800055a:	464c      	mov	r4, r9
 800055c:	2901      	cmp	r1, #1
 800055e:	d0d2      	beq.n	8000506 <__aeabi_fmul+0x76>
 8000560:	002b      	movs	r3, r5
 8000562:	337f      	adds	r3, #127	@ 0x7f
 8000564:	2b00      	cmp	r3, #0
 8000566:	dd70      	ble.n	800064a <__aeabi_fmul+0x1ba>
 8000568:	0762      	lsls	r2, r4, #29
 800056a:	d004      	beq.n	8000576 <__aeabi_fmul+0xe6>
 800056c:	220f      	movs	r2, #15
 800056e:	4022      	ands	r2, r4
 8000570:	2a04      	cmp	r2, #4
 8000572:	d000      	beq.n	8000576 <__aeabi_fmul+0xe6>
 8000574:	3404      	adds	r4, #4
 8000576:	0122      	lsls	r2, r4, #4
 8000578:	d503      	bpl.n	8000582 <__aeabi_fmul+0xf2>
 800057a:	4b63      	ldr	r3, [pc, #396]	@ (8000708 <__aeabi_fmul+0x278>)
 800057c:	401c      	ands	r4, r3
 800057e:	002b      	movs	r3, r5
 8000580:	3380      	adds	r3, #128	@ 0x80
 8000582:	2bfe      	cmp	r3, #254	@ 0xfe
 8000584:	dc2c      	bgt.n	80005e0 <__aeabi_fmul+0x150>
 8000586:	01a2      	lsls	r2, r4, #6
 8000588:	0a52      	lsrs	r2, r2, #9
 800058a:	b2d8      	uxtb	r0, r3
 800058c:	e7bd      	b.n	800050a <__aeabi_fmul+0x7a>
 800058e:	2090      	movs	r0, #144	@ 0x90
 8000590:	0080      	lsls	r0, r0, #2
 8000592:	4202      	tst	r2, r0
 8000594:	d127      	bne.n	80005e6 <__aeabi_fmul+0x156>
 8000596:	38b9      	subs	r0, #185	@ 0xb9
 8000598:	38ff      	subs	r0, #255	@ 0xff
 800059a:	4210      	tst	r0, r2
 800059c:	d06d      	beq.n	800067a <__aeabi_fmul+0x1ea>
 800059e:	003e      	movs	r6, r7
 80005a0:	46a1      	mov	r9, r4
 80005a2:	468a      	mov	sl, r1
 80005a4:	e7d2      	b.n	800054c <__aeabi_fmul+0xbc>
 80005a6:	2c00      	cmp	r4, #0
 80005a8:	d141      	bne.n	800062e <__aeabi_fmul+0x19e>
 80005aa:	2301      	movs	r3, #1
 80005ac:	4642      	mov	r2, r8
 80005ae:	431a      	orrs	r2, r3
 80005b0:	4690      	mov	r8, r2
 80005b2:	002b      	movs	r3, r5
 80005b4:	4642      	mov	r2, r8
 80005b6:	2101      	movs	r1, #1
 80005b8:	1c5d      	adds	r5, r3, #1
 80005ba:	2a0a      	cmp	r2, #10
 80005bc:	dd97      	ble.n	80004ee <__aeabi_fmul+0x5e>
 80005be:	e7c5      	b.n	800054c <__aeabi_fmul+0xbc>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d126      	bne.n	8000612 <__aeabi_fmul+0x182>
 80005c4:	2304      	movs	r3, #4
 80005c6:	4698      	mov	r8, r3
 80005c8:	3b03      	subs	r3, #3
 80005ca:	2500      	movs	r5, #0
 80005cc:	469a      	mov	sl, r3
 80005ce:	e77a      	b.n	80004c6 <__aeabi_fmul+0x36>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d118      	bne.n	8000606 <__aeabi_fmul+0x176>
 80005d4:	2308      	movs	r3, #8
 80005d6:	4698      	mov	r8, r3
 80005d8:	3b06      	subs	r3, #6
 80005da:	25ff      	movs	r5, #255	@ 0xff
 80005dc:	469a      	mov	sl, r3
 80005de:	e772      	b.n	80004c6 <__aeabi_fmul+0x36>
 80005e0:	20ff      	movs	r0, #255	@ 0xff
 80005e2:	2200      	movs	r2, #0
 80005e4:	e791      	b.n	800050a <__aeabi_fmul+0x7a>
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	2600      	movs	r6, #0
 80005ea:	20ff      	movs	r0, #255	@ 0xff
 80005ec:	03d2      	lsls	r2, r2, #15
 80005ee:	e78c      	b.n	800050a <__aeabi_fmul+0x7a>
 80005f0:	4641      	mov	r1, r8
 80005f2:	2202      	movs	r2, #2
 80005f4:	3501      	adds	r5, #1
 80005f6:	4311      	orrs	r1, r2
 80005f8:	4688      	mov	r8, r1
 80005fa:	35ff      	adds	r5, #255	@ 0xff
 80005fc:	290a      	cmp	r1, #10
 80005fe:	dca5      	bgt.n	800054c <__aeabi_fmul+0xbc>
 8000600:	2102      	movs	r1, #2
 8000602:	407e      	eors	r6, r7
 8000604:	e774      	b.n	80004f0 <__aeabi_fmul+0x60>
 8000606:	230c      	movs	r3, #12
 8000608:	4698      	mov	r8, r3
 800060a:	3b09      	subs	r3, #9
 800060c:	25ff      	movs	r5, #255	@ 0xff
 800060e:	469a      	mov	sl, r3
 8000610:	e759      	b.n	80004c6 <__aeabi_fmul+0x36>
 8000612:	0018      	movs	r0, r3
 8000614:	f000 faba 	bl	8000b8c <__clzsi2>
 8000618:	464a      	mov	r2, r9
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	2576      	movs	r5, #118	@ 0x76
 800061e:	409a      	lsls	r2, r3
 8000620:	2300      	movs	r3, #0
 8000622:	426d      	negs	r5, r5
 8000624:	4691      	mov	r9, r2
 8000626:	4698      	mov	r8, r3
 8000628:	469a      	mov	sl, r3
 800062a:	1a2d      	subs	r5, r5, r0
 800062c:	e74b      	b.n	80004c6 <__aeabi_fmul+0x36>
 800062e:	0020      	movs	r0, r4
 8000630:	f000 faac 	bl	8000b8c <__clzsi2>
 8000634:	4642      	mov	r2, r8
 8000636:	1f43      	subs	r3, r0, #5
 8000638:	409c      	lsls	r4, r3
 800063a:	1a2b      	subs	r3, r5, r0
 800063c:	3b76      	subs	r3, #118	@ 0x76
 800063e:	2100      	movs	r1, #0
 8000640:	1c5d      	adds	r5, r3, #1
 8000642:	2a0a      	cmp	r2, #10
 8000644:	dc00      	bgt.n	8000648 <__aeabi_fmul+0x1b8>
 8000646:	e752      	b.n	80004ee <__aeabi_fmul+0x5e>
 8000648:	e780      	b.n	800054c <__aeabi_fmul+0xbc>
 800064a:	2201      	movs	r2, #1
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	2b1b      	cmp	r3, #27
 8000650:	dd00      	ble.n	8000654 <__aeabi_fmul+0x1c4>
 8000652:	e758      	b.n	8000506 <__aeabi_fmul+0x76>
 8000654:	359e      	adds	r5, #158	@ 0x9e
 8000656:	0022      	movs	r2, r4
 8000658:	40ac      	lsls	r4, r5
 800065a:	40da      	lsrs	r2, r3
 800065c:	1e63      	subs	r3, r4, #1
 800065e:	419c      	sbcs	r4, r3
 8000660:	4322      	orrs	r2, r4
 8000662:	0753      	lsls	r3, r2, #29
 8000664:	d004      	beq.n	8000670 <__aeabi_fmul+0x1e0>
 8000666:	230f      	movs	r3, #15
 8000668:	4013      	ands	r3, r2
 800066a:	2b04      	cmp	r3, #4
 800066c:	d000      	beq.n	8000670 <__aeabi_fmul+0x1e0>
 800066e:	3204      	adds	r2, #4
 8000670:	0153      	lsls	r3, r2, #5
 8000672:	d537      	bpl.n	80006e4 <__aeabi_fmul+0x254>
 8000674:	2001      	movs	r0, #1
 8000676:	2200      	movs	r2, #0
 8000678:	e747      	b.n	800050a <__aeabi_fmul+0x7a>
 800067a:	0c21      	lsrs	r1, r4, #16
 800067c:	464a      	mov	r2, r9
 800067e:	0424      	lsls	r4, r4, #16
 8000680:	0c24      	lsrs	r4, r4, #16
 8000682:	0027      	movs	r7, r4
 8000684:	0c10      	lsrs	r0, r2, #16
 8000686:	0412      	lsls	r2, r2, #16
 8000688:	0c12      	lsrs	r2, r2, #16
 800068a:	4344      	muls	r4, r0
 800068c:	4357      	muls	r7, r2
 800068e:	4348      	muls	r0, r1
 8000690:	4351      	muls	r1, r2
 8000692:	0c3a      	lsrs	r2, r7, #16
 8000694:	1909      	adds	r1, r1, r4
 8000696:	1852      	adds	r2, r2, r1
 8000698:	4294      	cmp	r4, r2
 800069a:	d903      	bls.n	80006a4 <__aeabi_fmul+0x214>
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	0249      	lsls	r1, r1, #9
 80006a0:	468c      	mov	ip, r1
 80006a2:	4460      	add	r0, ip
 80006a4:	043f      	lsls	r7, r7, #16
 80006a6:	0411      	lsls	r1, r2, #16
 80006a8:	0c3f      	lsrs	r7, r7, #16
 80006aa:	19c9      	adds	r1, r1, r7
 80006ac:	018c      	lsls	r4, r1, #6
 80006ae:	1e67      	subs	r7, r4, #1
 80006b0:	41bc      	sbcs	r4, r7
 80006b2:	0c12      	lsrs	r2, r2, #16
 80006b4:	0e89      	lsrs	r1, r1, #26
 80006b6:	1812      	adds	r2, r2, r0
 80006b8:	430c      	orrs	r4, r1
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	4314      	orrs	r4, r2
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	d50e      	bpl.n	80006e0 <__aeabi_fmul+0x250>
 80006c2:	2301      	movs	r3, #1
 80006c4:	0862      	lsrs	r2, r4, #1
 80006c6:	401c      	ands	r4, r3
 80006c8:	4314      	orrs	r4, r2
 80006ca:	e749      	b.n	8000560 <__aeabi_fmul+0xd0>
 80006cc:	003e      	movs	r6, r7
 80006ce:	46a1      	mov	r9, r4
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	464b      	mov	r3, r9
 80006d4:	03d2      	lsls	r2, r2, #15
 80006d6:	431a      	orrs	r2, r3
 80006d8:	0252      	lsls	r2, r2, #9
 80006da:	20ff      	movs	r0, #255	@ 0xff
 80006dc:	0a52      	lsrs	r2, r2, #9
 80006de:	e714      	b.n	800050a <__aeabi_fmul+0x7a>
 80006e0:	001d      	movs	r5, r3
 80006e2:	e73d      	b.n	8000560 <__aeabi_fmul+0xd0>
 80006e4:	0192      	lsls	r2, r2, #6
 80006e6:	2000      	movs	r0, #0
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	e70e      	b.n	800050a <__aeabi_fmul+0x7a>
 80006ec:	290f      	cmp	r1, #15
 80006ee:	d1ed      	bne.n	80006cc <__aeabi_fmul+0x23c>
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	464b      	mov	r3, r9
 80006f4:	03d2      	lsls	r2, r2, #15
 80006f6:	4213      	tst	r3, r2
 80006f8:	d0ea      	beq.n	80006d0 <__aeabi_fmul+0x240>
 80006fa:	4214      	tst	r4, r2
 80006fc:	d1e8      	bne.n	80006d0 <__aeabi_fmul+0x240>
 80006fe:	003e      	movs	r6, r7
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	4322      	orrs	r2, r4
 8000704:	e701      	b.n	800050a <__aeabi_fmul+0x7a>
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	f7ffffff 	.word	0xf7ffffff

0800070c <__aeabi_fsub>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	4647      	mov	r7, r8
 8000710:	46ce      	mov	lr, r9
 8000712:	024e      	lsls	r6, r1, #9
 8000714:	0243      	lsls	r3, r0, #9
 8000716:	0045      	lsls	r5, r0, #1
 8000718:	0a72      	lsrs	r2, r6, #9
 800071a:	0fc4      	lsrs	r4, r0, #31
 800071c:	0048      	lsls	r0, r1, #1
 800071e:	b580      	push	{r7, lr}
 8000720:	4694      	mov	ip, r2
 8000722:	0a5f      	lsrs	r7, r3, #9
 8000724:	0e2d      	lsrs	r5, r5, #24
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	0e00      	lsrs	r0, r0, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	09b6      	lsrs	r6, r6, #6
 800072e:	28ff      	cmp	r0, #255	@ 0xff
 8000730:	d024      	beq.n	800077c <__aeabi_fsub+0x70>
 8000732:	2201      	movs	r2, #1
 8000734:	4051      	eors	r1, r2
 8000736:	1a2a      	subs	r2, r5, r0
 8000738:	428c      	cmp	r4, r1
 800073a:	d00f      	beq.n	800075c <__aeabi_fsub+0x50>
 800073c:	2a00      	cmp	r2, #0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fsub+0x36>
 8000740:	e16a      	b.n	8000a18 <__aeabi_fsub+0x30c>
 8000742:	2800      	cmp	r0, #0
 8000744:	d135      	bne.n	80007b2 <__aeabi_fsub+0xa6>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fsub+0x40>
 800074a:	e0a2      	b.n	8000892 <__aeabi_fsub+0x186>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fsub+0x48>
 8000752:	e124      	b.n	800099e <__aeabi_fsub+0x292>
 8000754:	2aff      	cmp	r2, #255	@ 0xff
 8000756:	d021      	beq.n	800079c <__aeabi_fsub+0x90>
 8000758:	000a      	movs	r2, r1
 800075a:	e02f      	b.n	80007bc <__aeabi_fsub+0xb0>
 800075c:	2a00      	cmp	r2, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_fsub+0x56>
 8000760:	e167      	b.n	8000a32 <__aeabi_fsub+0x326>
 8000762:	2800      	cmp	r0, #0
 8000764:	d05e      	beq.n	8000824 <__aeabi_fsub+0x118>
 8000766:	2dff      	cmp	r5, #255	@ 0xff
 8000768:	d018      	beq.n	800079c <__aeabi_fsub+0x90>
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	04c9      	lsls	r1, r1, #19
 800076e:	430e      	orrs	r6, r1
 8000770:	2a1b      	cmp	r2, #27
 8000772:	dc00      	bgt.n	8000776 <__aeabi_fsub+0x6a>
 8000774:	e076      	b.n	8000864 <__aeabi_fsub+0x158>
 8000776:	002a      	movs	r2, r5
 8000778:	3301      	adds	r3, #1
 800077a:	e032      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800077c:	002a      	movs	r2, r5
 800077e:	3aff      	subs	r2, #255	@ 0xff
 8000780:	4691      	mov	r9, r2
 8000782:	2e00      	cmp	r6, #0
 8000784:	d042      	beq.n	800080c <__aeabi_fsub+0x100>
 8000786:	428c      	cmp	r4, r1
 8000788:	d055      	beq.n	8000836 <__aeabi_fsub+0x12a>
 800078a:	464a      	mov	r2, r9
 800078c:	2a00      	cmp	r2, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x86>
 8000790:	e09c      	b.n	80008cc <__aeabi_fsub+0x1c0>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fsub+0x8c>
 8000796:	e077      	b.n	8000888 <__aeabi_fsub+0x17c>
 8000798:	000c      	movs	r4, r1
 800079a:	0033      	movs	r3, r6
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fsub+0x98>
 80007a2:	e06e      	b.n	8000882 <__aeabi_fsub+0x176>
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	03d2      	lsls	r2, r2, #15
 80007a8:	4313      	orrs	r3, r2
 80007aa:	025b      	lsls	r3, r3, #9
 80007ac:	20ff      	movs	r0, #255	@ 0xff
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	e024      	b.n	80007fc <__aeabi_fsub+0xf0>
 80007b2:	2dff      	cmp	r5, #255	@ 0xff
 80007b4:	d0f2      	beq.n	800079c <__aeabi_fsub+0x90>
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	04c9      	lsls	r1, r1, #19
 80007ba:	430e      	orrs	r6, r1
 80007bc:	2101      	movs	r1, #1
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	dc08      	bgt.n	80007d4 <__aeabi_fsub+0xc8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	2020      	movs	r0, #32
 80007c6:	40d1      	lsrs	r1, r2
 80007c8:	1a82      	subs	r2, r0, r2
 80007ca:	4096      	lsls	r6, r2
 80007cc:	0032      	movs	r2, r6
 80007ce:	1e50      	subs	r0, r2, #1
 80007d0:	4182      	sbcs	r2, r0
 80007d2:	4311      	orrs	r1, r2
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	015a      	lsls	r2, r3, #5
 80007d8:	d460      	bmi.n	800089c <__aeabi_fsub+0x190>
 80007da:	2107      	movs	r1, #7
 80007dc:	002a      	movs	r2, r5
 80007de:	4019      	ands	r1, r3
 80007e0:	d057      	beq.n	8000892 <__aeabi_fsub+0x186>
 80007e2:	210f      	movs	r1, #15
 80007e4:	4019      	ands	r1, r3
 80007e6:	2904      	cmp	r1, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fsub+0xe0>
 80007ea:	3304      	adds	r3, #4
 80007ec:	0159      	lsls	r1, r3, #5
 80007ee:	d550      	bpl.n	8000892 <__aeabi_fsub+0x186>
 80007f0:	1c50      	adds	r0, r2, #1
 80007f2:	2afe      	cmp	r2, #254	@ 0xfe
 80007f4:	d045      	beq.n	8000882 <__aeabi_fsub+0x176>
 80007f6:	019b      	lsls	r3, r3, #6
 80007f8:	b2c0      	uxtb	r0, r0
 80007fa:	0a5b      	lsrs	r3, r3, #9
 80007fc:	05c0      	lsls	r0, r0, #23
 80007fe:	4318      	orrs	r0, r3
 8000800:	07e4      	lsls	r4, r4, #31
 8000802:	4320      	orrs	r0, r4
 8000804:	bcc0      	pop	{r6, r7}
 8000806:	46b9      	mov	r9, r7
 8000808:	46b0      	mov	r8, r6
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080c:	2201      	movs	r2, #1
 800080e:	4051      	eors	r1, r2
 8000810:	428c      	cmp	r4, r1
 8000812:	d1ba      	bne.n	800078a <__aeabi_fsub+0x7e>
 8000814:	464a      	mov	r2, r9
 8000816:	2a00      	cmp	r2, #0
 8000818:	d010      	beq.n	800083c <__aeabi_fsub+0x130>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_fsub+0x114>
 800081e:	e098      	b.n	8000952 <__aeabi_fsub+0x246>
 8000820:	2300      	movs	r3, #0
 8000822:	e7bb      	b.n	800079c <__aeabi_fsub+0x90>
 8000824:	2e00      	cmp	r6, #0
 8000826:	d034      	beq.n	8000892 <__aeabi_fsub+0x186>
 8000828:	1e51      	subs	r1, r2, #1
 800082a:	2a01      	cmp	r2, #1
 800082c:	d06e      	beq.n	800090c <__aeabi_fsub+0x200>
 800082e:	2aff      	cmp	r2, #255	@ 0xff
 8000830:	d0b4      	beq.n	800079c <__aeabi_fsub+0x90>
 8000832:	000a      	movs	r2, r1
 8000834:	e79c      	b.n	8000770 <__aeabi_fsub+0x64>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fsub+0x130>
 800083a:	e088      	b.n	800094e <__aeabi_fsub+0x242>
 800083c:	20fe      	movs	r0, #254	@ 0xfe
 800083e:	1c6a      	adds	r2, r5, #1
 8000840:	4210      	tst	r0, r2
 8000842:	d000      	beq.n	8000846 <__aeabi_fsub+0x13a>
 8000844:	e092      	b.n	800096c <__aeabi_fsub+0x260>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x140>
 800084a:	e0a4      	b.n	8000996 <__aeabi_fsub+0x28a>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x146>
 8000850:	e0cb      	b.n	80009ea <__aeabi_fsub+0x2de>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x14c>
 8000856:	e0ca      	b.n	80009ee <__aeabi_fsub+0x2e2>
 8000858:	2200      	movs	r2, #0
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	b2d0      	uxtb	r0, r2
 8000862:	e7cb      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000864:	0031      	movs	r1, r6
 8000866:	2020      	movs	r0, #32
 8000868:	40d1      	lsrs	r1, r2
 800086a:	1a82      	subs	r2, r0, r2
 800086c:	4096      	lsls	r6, r2
 800086e:	0032      	movs	r2, r6
 8000870:	1e50      	subs	r0, r2, #1
 8000872:	4182      	sbcs	r2, r0
 8000874:	430a      	orrs	r2, r1
 8000876:	189b      	adds	r3, r3, r2
 8000878:	015a      	lsls	r2, r3, #5
 800087a:	d5ae      	bpl.n	80007da <__aeabi_fsub+0xce>
 800087c:	1c6a      	adds	r2, r5, #1
 800087e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000880:	d14a      	bne.n	8000918 <__aeabi_fsub+0x20c>
 8000882:	20ff      	movs	r0, #255	@ 0xff
 8000884:	2300      	movs	r3, #0
 8000886:	e7b9      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000888:	22ff      	movs	r2, #255	@ 0xff
 800088a:	2b00      	cmp	r3, #0
 800088c:	d14b      	bne.n	8000926 <__aeabi_fsub+0x21a>
 800088e:	000c      	movs	r4, r1
 8000890:	0033      	movs	r3, r6
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	2aff      	cmp	r2, #255	@ 0xff
 8000896:	d100      	bne.n	800089a <__aeabi_fsub+0x18e>
 8000898:	e781      	b.n	800079e <__aeabi_fsub+0x92>
 800089a:	e7df      	b.n	800085c <__aeabi_fsub+0x150>
 800089c:	019f      	lsls	r7, r3, #6
 800089e:	09bf      	lsrs	r7, r7, #6
 80008a0:	0038      	movs	r0, r7
 80008a2:	f000 f973 	bl	8000b8c <__clzsi2>
 80008a6:	3805      	subs	r0, #5
 80008a8:	4087      	lsls	r7, r0
 80008aa:	4285      	cmp	r5, r0
 80008ac:	dc21      	bgt.n	80008f2 <__aeabi_fsub+0x1e6>
 80008ae:	003b      	movs	r3, r7
 80008b0:	2120      	movs	r1, #32
 80008b2:	1b42      	subs	r2, r0, r5
 80008b4:	3201      	adds	r2, #1
 80008b6:	40d3      	lsrs	r3, r2
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	4097      	lsls	r7, r2
 80008bc:	1e7a      	subs	r2, r7, #1
 80008be:	4197      	sbcs	r7, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	433b      	orrs	r3, r7
 80008c4:	0759      	lsls	r1, r3, #29
 80008c6:	d000      	beq.n	80008ca <__aeabi_fsub+0x1be>
 80008c8:	e78b      	b.n	80007e2 <__aeabi_fsub+0xd6>
 80008ca:	e78f      	b.n	80007ec <__aeabi_fsub+0xe0>
 80008cc:	20fe      	movs	r0, #254	@ 0xfe
 80008ce:	1c6a      	adds	r2, r5, #1
 80008d0:	4210      	tst	r0, r2
 80008d2:	d112      	bne.n	80008fa <__aeabi_fsub+0x1ee>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d152      	bne.n	800097e <__aeabi_fsub+0x272>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d07c      	beq.n	80009d6 <__aeabi_fsub+0x2ca>
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0bb      	beq.n	8000858 <__aeabi_fsub+0x14c>
 80008e0:	1b9a      	subs	r2, r3, r6
 80008e2:	0150      	lsls	r0, r2, #5
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_fsub+0x1dc>
 80008e6:	e08b      	b.n	8000a00 <__aeabi_fsub+0x2f4>
 80008e8:	2401      	movs	r4, #1
 80008ea:	2200      	movs	r2, #0
 80008ec:	1af3      	subs	r3, r6, r3
 80008ee:	400c      	ands	r4, r1
 80008f0:	e7e8      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 80008f2:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <__aeabi_fsub+0x340>)
 80008f4:	1a2a      	subs	r2, r5, r0
 80008f6:	403b      	ands	r3, r7
 80008f8:	e7e4      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 80008fa:	1b9f      	subs	r7, r3, r6
 80008fc:	017a      	lsls	r2, r7, #5
 80008fe:	d446      	bmi.n	800098e <__aeabi_fsub+0x282>
 8000900:	2f00      	cmp	r7, #0
 8000902:	d1cd      	bne.n	80008a0 <__aeabi_fsub+0x194>
 8000904:	2400      	movs	r4, #0
 8000906:	2000      	movs	r0, #0
 8000908:	2300      	movs	r3, #0
 800090a:	e777      	b.n	80007fc <__aeabi_fsub+0xf0>
 800090c:	199b      	adds	r3, r3, r6
 800090e:	2501      	movs	r5, #1
 8000910:	3201      	adds	r2, #1
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	d400      	bmi.n	8000918 <__aeabi_fsub+0x20c>
 8000916:	e760      	b.n	80007da <__aeabi_fsub+0xce>
 8000918:	2101      	movs	r1, #1
 800091a:	484d      	ldr	r0, [pc, #308]	@ (8000a50 <__aeabi_fsub+0x344>)
 800091c:	4019      	ands	r1, r3
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	4003      	ands	r3, r0
 8000922:	430b      	orrs	r3, r1
 8000924:	e7ce      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 8000926:	1e57      	subs	r7, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d05a      	beq.n	80009e2 <__aeabi_fsub+0x2d6>
 800092c:	000c      	movs	r4, r1
 800092e:	2aff      	cmp	r2, #255	@ 0xff
 8000930:	d033      	beq.n	800099a <__aeabi_fsub+0x28e>
 8000932:	2201      	movs	r2, #1
 8000934:	2f1b      	cmp	r7, #27
 8000936:	dc07      	bgt.n	8000948 <__aeabi_fsub+0x23c>
 8000938:	2120      	movs	r1, #32
 800093a:	1bc9      	subs	r1, r1, r7
 800093c:	001a      	movs	r2, r3
 800093e:	408b      	lsls	r3, r1
 8000940:	40fa      	lsrs	r2, r7
 8000942:	1e59      	subs	r1, r3, #1
 8000944:	418b      	sbcs	r3, r1
 8000946:	431a      	orrs	r2, r3
 8000948:	0005      	movs	r5, r0
 800094a:	1ab3      	subs	r3, r6, r2
 800094c:	e743      	b.n	80007d6 <__aeabi_fsub+0xca>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d123      	bne.n	800099a <__aeabi_fsub+0x28e>
 8000952:	22ff      	movs	r2, #255	@ 0xff
 8000954:	2b00      	cmp	r3, #0
 8000956:	d09b      	beq.n	8000890 <__aeabi_fsub+0x184>
 8000958:	1e51      	subs	r1, r2, #1
 800095a:	2a01      	cmp	r2, #1
 800095c:	d0d6      	beq.n	800090c <__aeabi_fsub+0x200>
 800095e:	2aff      	cmp	r2, #255	@ 0xff
 8000960:	d01b      	beq.n	800099a <__aeabi_fsub+0x28e>
 8000962:	291b      	cmp	r1, #27
 8000964:	dd2c      	ble.n	80009c0 <__aeabi_fsub+0x2b4>
 8000966:	0002      	movs	r2, r0
 8000968:	1c73      	adds	r3, r6, #1
 800096a:	e73a      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d088      	beq.n	8000882 <__aeabi_fsub+0x176>
 8000970:	199b      	adds	r3, r3, r6
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	0759      	lsls	r1, r3, #29
 8000976:	d000      	beq.n	800097a <__aeabi_fsub+0x26e>
 8000978:	e733      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	e76e      	b.n	800085c <__aeabi_fsub+0x150>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d110      	bne.n	80009a4 <__aeabi_fsub+0x298>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d043      	beq.n	8000a0e <__aeabi_fsub+0x302>
 8000986:	2401      	movs	r4, #1
 8000988:	0033      	movs	r3, r6
 800098a:	400c      	ands	r4, r1
 800098c:	e706      	b.n	800079c <__aeabi_fsub+0x90>
 800098e:	2401      	movs	r4, #1
 8000990:	1af7      	subs	r7, r6, r3
 8000992:	400c      	ands	r4, r1
 8000994:	e784      	b.n	80008a0 <__aeabi_fsub+0x194>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <__aeabi_fsub+0x298>
 800099a:	0033      	movs	r3, r6
 800099c:	e6fe      	b.n	800079c <__aeabi_fsub+0x90>
 800099e:	2501      	movs	r5, #1
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	e718      	b.n	80007d6 <__aeabi_fsub+0xca>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x29e>
 80009a8:	e6f8      	b.n	800079c <__aeabi_fsub+0x90>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	4297      	cmp	r7, r2
 80009b0:	d304      	bcc.n	80009bc <__aeabi_fsub+0x2b0>
 80009b2:	4594      	cmp	ip, r2
 80009b4:	d202      	bcs.n	80009bc <__aeabi_fsub+0x2b0>
 80009b6:	2401      	movs	r4, #1
 80009b8:	0033      	movs	r3, r6
 80009ba:	400c      	ands	r4, r1
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	e6f1      	b.n	80007a4 <__aeabi_fsub+0x98>
 80009c0:	001a      	movs	r2, r3
 80009c2:	2520      	movs	r5, #32
 80009c4:	40ca      	lsrs	r2, r1
 80009c6:	1a69      	subs	r1, r5, r1
 80009c8:	408b      	lsls	r3, r1
 80009ca:	1e59      	subs	r1, r3, #1
 80009cc:	418b      	sbcs	r3, r1
 80009ce:	4313      	orrs	r3, r2
 80009d0:	0005      	movs	r5, r0
 80009d2:	199b      	adds	r3, r3, r6
 80009d4:	e750      	b.n	8000878 <__aeabi_fsub+0x16c>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d094      	beq.n	8000904 <__aeabi_fsub+0x1f8>
 80009da:	2401      	movs	r4, #1
 80009dc:	0033      	movs	r3, r6
 80009de:	400c      	ands	r4, r1
 80009e0:	e73a      	b.n	8000858 <__aeabi_fsub+0x14c>
 80009e2:	000c      	movs	r4, r1
 80009e4:	2501      	movs	r5, #1
 80009e6:	1af3      	subs	r3, r6, r3
 80009e8:	e6f5      	b.n	80007d6 <__aeabi_fsub+0xca>
 80009ea:	0033      	movs	r3, r6
 80009ec:	e734      	b.n	8000858 <__aeabi_fsub+0x14c>
 80009ee:	199b      	adds	r3, r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	0159      	lsls	r1, r3, #5
 80009f4:	d5c1      	bpl.n	800097a <__aeabi_fsub+0x26e>
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <__aeabi_fsub+0x340>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	2201      	movs	r2, #1
 80009fe:	e72d      	b.n	800085c <__aeabi_fsub+0x150>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fsub+0x2fa>
 8000a04:	e77e      	b.n	8000904 <__aeabi_fsub+0x1f8>
 8000a06:	0013      	movs	r3, r2
 8000a08:	2200      	movs	r2, #0
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e726      	b.n	800085c <__aeabi_fsub+0x150>
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	2400      	movs	r4, #0
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	03db      	lsls	r3, r3, #15
 8000a16:	e6f1      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x312>
 8000a1c:	e756      	b.n	80008cc <__aeabi_fsub+0x1c0>
 8000a1e:	1b47      	subs	r7, r0, r5
 8000a20:	003a      	movs	r2, r7
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x31c>
 8000a26:	e730      	b.n	800088a <__aeabi_fsub+0x17e>
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	04d2      	lsls	r2, r2, #19
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	e77f      	b.n	8000932 <__aeabi_fsub+0x226>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x32c>
 8000a36:	e701      	b.n	800083c <__aeabi_fsub+0x130>
 8000a38:	1b41      	subs	r1, r0, r5
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d101      	bne.n	8000a42 <__aeabi_fsub+0x336>
 8000a3e:	000a      	movs	r2, r1
 8000a40:	e788      	b.n	8000954 <__aeabi_fsub+0x248>
 8000a42:	2280      	movs	r2, #128	@ 0x80
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4313      	orrs	r3, r2
 8000a48:	e78b      	b.n	8000962 <__aeabi_fsub+0x256>
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	fbffffff 	.word	0xfbffffff
 8000a50:	7dffffff 	.word	0x7dffffff

08000a54 <__aeabi_f2iz>:
 8000a54:	0241      	lsls	r1, r0, #9
 8000a56:	0042      	lsls	r2, r0, #1
 8000a58:	0fc3      	lsrs	r3, r0, #31
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	0e12      	lsrs	r2, r2, #24
 8000a60:	2a7e      	cmp	r2, #126	@ 0x7e
 8000a62:	dd03      	ble.n	8000a6c <__aeabi_f2iz+0x18>
 8000a64:	2a9d      	cmp	r2, #157	@ 0x9d
 8000a66:	dd02      	ble.n	8000a6e <__aeabi_f2iz+0x1a>
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <__aeabi_f2iz+0x3c>)
 8000a6a:	1898      	adds	r0, r3, r2
 8000a6c:	4770      	bx	lr
 8000a6e:	2080      	movs	r0, #128	@ 0x80
 8000a70:	0400      	lsls	r0, r0, #16
 8000a72:	4301      	orrs	r1, r0
 8000a74:	2a95      	cmp	r2, #149	@ 0x95
 8000a76:	dc07      	bgt.n	8000a88 <__aeabi_f2iz+0x34>
 8000a78:	2096      	movs	r0, #150	@ 0x96
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	40d1      	lsrs	r1, r2
 8000a7e:	4248      	negs	r0, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f3      	bne.n	8000a6c <__aeabi_f2iz+0x18>
 8000a84:	0008      	movs	r0, r1
 8000a86:	e7f1      	b.n	8000a6c <__aeabi_f2iz+0x18>
 8000a88:	3a96      	subs	r2, #150	@ 0x96
 8000a8a:	4091      	lsls	r1, r2
 8000a8c:	e7f7      	b.n	8000a7e <__aeabi_f2iz+0x2a>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	7fffffff 	.word	0x7fffffff

08000a94 <__aeabi_ui2f>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	1e04      	subs	r4, r0, #0
 8000a98:	d00e      	beq.n	8000ab8 <__aeabi_ui2f+0x24>
 8000a9a:	f000 f877 	bl	8000b8c <__clzsi2>
 8000a9e:	239e      	movs	r3, #158	@ 0x9e
 8000aa0:	0001      	movs	r1, r0
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2b96      	cmp	r3, #150	@ 0x96
 8000aa6:	dc0c      	bgt.n	8000ac2 <__aeabi_ui2f+0x2e>
 8000aa8:	2808      	cmp	r0, #8
 8000aaa:	d02f      	beq.n	8000b0c <__aeabi_ui2f+0x78>
 8000aac:	3908      	subs	r1, #8
 8000aae:	408c      	lsls	r4, r1
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	0a64      	lsrs	r4, r4, #9
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	e001      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2400      	movs	r4, #0
 8000abc:	05c0      	lsls	r0, r0, #23
 8000abe:	4320      	orrs	r0, r4
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	2b99      	cmp	r3, #153	@ 0x99
 8000ac4:	dc16      	bgt.n	8000af4 <__aeabi_ui2f+0x60>
 8000ac6:	1f42      	subs	r2, r0, #5
 8000ac8:	2805      	cmp	r0, #5
 8000aca:	d000      	beq.n	8000ace <__aeabi_ui2f+0x3a>
 8000acc:	4094      	lsls	r4, r2
 8000ace:	0022      	movs	r2, r4
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <__aeabi_ui2f+0x80>)
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	0765      	lsls	r5, r4, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ad8:	250f      	movs	r5, #15
 8000ada:	402c      	ands	r4, r5
 8000adc:	2c04      	cmp	r4, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x58>
 8000ae0:	3204      	adds	r2, #4
 8000ae2:	0154      	lsls	r4, r2, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x58>
 8000ae6:	239f      	movs	r3, #159	@ 0x9f
 8000ae8:	4002      	ands	r2, r0
 8000aea:	1a5b      	subs	r3, r3, r1
 8000aec:	0192      	lsls	r2, r2, #6
 8000aee:	0a54      	lsrs	r4, r2, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7e3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000af4:	0002      	movs	r2, r0
 8000af6:	0020      	movs	r0, r4
 8000af8:	321b      	adds	r2, #27
 8000afa:	4090      	lsls	r0, r2
 8000afc:	0002      	movs	r2, r0
 8000afe:	1e50      	subs	r0, r2, #1
 8000b00:	4182      	sbcs	r2, r0
 8000b02:	2005      	movs	r0, #5
 8000b04:	1a40      	subs	r0, r0, r1
 8000b06:	40c4      	lsrs	r4, r0
 8000b08:	4314      	orrs	r4, r2
 8000b0a:	e7e0      	b.n	8000ace <__aeabi_ui2f+0x3a>
 8000b0c:	0264      	lsls	r4, r4, #9
 8000b0e:	2096      	movs	r0, #150	@ 0x96
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e7d3      	b.n	8000abc <__aeabi_ui2f+0x28>
 8000b14:	fbffffff 	.word	0xfbffffff

08000b18 <__aeabi_cfrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	0008      	movs	r0, r1
 8000b1c:	4661      	mov	r1, ip
 8000b1e:	e7ff      	b.n	8000b20 <__aeabi_cfcmpeq>

08000b20 <__aeabi_cfcmpeq>:
 8000b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b22:	f000 f8c9 	bl	8000cb8 <__lesf2>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d401      	bmi.n	8000b2e <__aeabi_cfcmpeq+0xe>
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	42c8      	cmn	r0, r1
 8000b2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b30 <__aeabi_fcmpeq>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	f000 f849 	bl	8000bc8 <__eqsf2>
 8000b36:	4240      	negs	r0, r0
 8000b38:	3001      	adds	r0, #1
 8000b3a:	bd10      	pop	{r4, pc}

08000b3c <__aeabi_fcmplt>:
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	f000 f8bb 	bl	8000cb8 <__lesf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	db01      	blt.n	8000b4a <__aeabi_fcmplt+0xe>
 8000b46:	2000      	movs	r0, #0
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)

08000b50 <__aeabi_fcmple>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	f000 f8b1 	bl	8000cb8 <__lesf2>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	dd01      	ble.n	8000b5e <__aeabi_fcmple+0xe>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	2001      	movs	r0, #1
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)

08000b64 <__aeabi_fcmpgt>:
 8000b64:	b510      	push	{r4, lr}
 8000b66:	f000 f857 	bl	8000c18 <__gesf2>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	dc01      	bgt.n	8000b72 <__aeabi_fcmpgt+0xe>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	2001      	movs	r0, #1
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)

08000b78 <__aeabi_fcmpge>:
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	f000 f84d 	bl	8000c18 <__gesf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	da01      	bge.n	8000b86 <__aeabi_fcmpge+0xe>
 8000b82:	2000      	movs	r0, #0
 8000b84:	bd10      	pop	{r4, pc}
 8000b86:	2001      	movs	r0, #1
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)

08000b8c <__clzsi2>:
 8000b8c:	211c      	movs	r1, #28
 8000b8e:	2301      	movs	r3, #1
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d301      	bcc.n	8000b9a <__clzsi2+0xe>
 8000b96:	0c00      	lsrs	r0, r0, #16
 8000b98:	3910      	subs	r1, #16
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	4298      	cmp	r0, r3
 8000b9e:	d301      	bcc.n	8000ba4 <__clzsi2+0x18>
 8000ba0:	0a00      	lsrs	r0, r0, #8
 8000ba2:	3908      	subs	r1, #8
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d301      	bcc.n	8000bae <__clzsi2+0x22>
 8000baa:	0900      	lsrs	r0, r0, #4
 8000bac:	3904      	subs	r1, #4
 8000bae:	a202      	add	r2, pc, #8	@ (adr r2, 8000bb8 <__clzsi2+0x2c>)
 8000bb0:	5c10      	ldrb	r0, [r2, r0]
 8000bb2:	1840      	adds	r0, r0, r1
 8000bb4:	4770      	bx	lr
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	02020304 	.word	0x02020304
 8000bbc:	01010101 	.word	0x01010101
	...

08000bc8 <__eqsf2>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	024e      	lsls	r6, r1, #9
 8000bce:	004c      	lsls	r4, r1, #1
 8000bd0:	0245      	lsls	r5, r0, #9
 8000bd2:	0a6d      	lsrs	r5, r5, #9
 8000bd4:	0e12      	lsrs	r2, r2, #24
 8000bd6:	0fc3      	lsrs	r3, r0, #31
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	0e24      	lsrs	r4, r4, #24
 8000bdc:	0fc9      	lsrs	r1, r1, #31
 8000bde:	2aff      	cmp	r2, #255	@ 0xff
 8000be0:	d010      	beq.n	8000c04 <__eqsf2+0x3c>
 8000be2:	2cff      	cmp	r4, #255	@ 0xff
 8000be4:	d00c      	beq.n	8000c00 <__eqsf2+0x38>
 8000be6:	2001      	movs	r0, #1
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	d10a      	bne.n	8000c02 <__eqsf2+0x3a>
 8000bec:	42b5      	cmp	r5, r6
 8000bee:	d108      	bne.n	8000c02 <__eqsf2+0x3a>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d00f      	beq.n	8000c14 <__eqsf2+0x4c>
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d104      	bne.n	8000c02 <__eqsf2+0x3a>
 8000bf8:	0028      	movs	r0, r5
 8000bfa:	1e43      	subs	r3, r0, #1
 8000bfc:	4198      	sbcs	r0, r3
 8000bfe:	e000      	b.n	8000c02 <__eqsf2+0x3a>
 8000c00:	2001      	movs	r0, #1
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	2001      	movs	r0, #1
 8000c06:	2cff      	cmp	r4, #255	@ 0xff
 8000c08:	d1fb      	bne.n	8000c02 <__eqsf2+0x3a>
 8000c0a:	4335      	orrs	r5, r6
 8000c0c:	d1f9      	bne.n	8000c02 <__eqsf2+0x3a>
 8000c0e:	404b      	eors	r3, r1
 8000c10:	0018      	movs	r0, r3
 8000c12:	e7f6      	b.n	8000c02 <__eqsf2+0x3a>
 8000c14:	2000      	movs	r0, #0
 8000c16:	e7f4      	b.n	8000c02 <__eqsf2+0x3a>

08000c18 <__gesf2>:
 8000c18:	b530      	push	{r4, r5, lr}
 8000c1a:	0042      	lsls	r2, r0, #1
 8000c1c:	0244      	lsls	r4, r0, #9
 8000c1e:	024d      	lsls	r5, r1, #9
 8000c20:	0fc3      	lsrs	r3, r0, #31
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	0a64      	lsrs	r4, r4, #9
 8000c26:	0e12      	lsrs	r2, r2, #24
 8000c28:	0a6d      	lsrs	r5, r5, #9
 8000c2a:	0e00      	lsrs	r0, r0, #24
 8000c2c:	0fc9      	lsrs	r1, r1, #31
 8000c2e:	2aff      	cmp	r2, #255	@ 0xff
 8000c30:	d019      	beq.n	8000c66 <__gesf2+0x4e>
 8000c32:	28ff      	cmp	r0, #255	@ 0xff
 8000c34:	d00b      	beq.n	8000c4e <__gesf2+0x36>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d11e      	bne.n	8000c78 <__gesf2+0x60>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d10b      	bne.n	8000c56 <__gesf2+0x3e>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d027      	beq.n	8000c92 <__gesf2+0x7a>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d134      	bne.n	8000cb0 <__gesf2+0x98>
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d02f      	beq.n	8000caa <__gesf2+0x92>
 8000c4a:	0008      	movs	r0, r1
 8000c4c:	bd30      	pop	{r4, r5, pc}
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d128      	bne.n	8000ca4 <__gesf2+0x8c>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d101      	bne.n	8000c5a <__gesf2+0x42>
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d0f5      	beq.n	8000c46 <__gesf2+0x2e>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d107      	bne.n	8000c6e <__gesf2+0x56>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d023      	beq.n	8000caa <__gesf2+0x92>
 8000c62:	0018      	movs	r0, r3
 8000c64:	e7f2      	b.n	8000c4c <__gesf2+0x34>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	d11c      	bne.n	8000ca4 <__gesf2+0x8c>
 8000c6a:	28ff      	cmp	r0, #255	@ 0xff
 8000c6c:	d014      	beq.n	8000c98 <__gesf2+0x80>
 8000c6e:	1e58      	subs	r0, r3, #1
 8000c70:	2302      	movs	r3, #2
 8000c72:	4018      	ands	r0, r3
 8000c74:	3801      	subs	r0, #1
 8000c76:	e7e9      	b.n	8000c4c <__gesf2+0x34>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d0f8      	beq.n	8000c6e <__gesf2+0x56>
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d1f6      	bne.n	8000c6e <__gesf2+0x56>
 8000c80:	4282      	cmp	r2, r0
 8000c82:	dcf4      	bgt.n	8000c6e <__gesf2+0x56>
 8000c84:	dbeb      	blt.n	8000c5e <__gesf2+0x46>
 8000c86:	42ac      	cmp	r4, r5
 8000c88:	d8f1      	bhi.n	8000c6e <__gesf2+0x56>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	42ac      	cmp	r4, r5
 8000c8e:	d2dd      	bcs.n	8000c4c <__gesf2+0x34>
 8000c90:	e7e5      	b.n	8000c5e <__gesf2+0x46>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d0da      	beq.n	8000c4c <__gesf2+0x34>
 8000c96:	e7ea      	b.n	8000c6e <__gesf2+0x56>
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d103      	bne.n	8000ca4 <__gesf2+0x8c>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d1e6      	bne.n	8000c6e <__gesf2+0x56>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e7d3      	b.n	8000c4c <__gesf2+0x34>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7d0      	b.n	8000c4c <__gesf2+0x34>
 8000caa:	2001      	movs	r0, #1
 8000cac:	4240      	negs	r0, r0
 8000cae:	e7cd      	b.n	8000c4c <__gesf2+0x34>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d0e8      	beq.n	8000c86 <__gesf2+0x6e>
 8000cb4:	e7db      	b.n	8000c6e <__gesf2+0x56>
 8000cb6:	46c0      	nop			@ (mov r8, r8)

08000cb8 <__lesf2>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	0042      	lsls	r2, r0, #1
 8000cbc:	0244      	lsls	r4, r0, #9
 8000cbe:	024d      	lsls	r5, r1, #9
 8000cc0:	0fc3      	lsrs	r3, r0, #31
 8000cc2:	0048      	lsls	r0, r1, #1
 8000cc4:	0a64      	lsrs	r4, r4, #9
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	0e00      	lsrs	r0, r0, #24
 8000ccc:	0fc9      	lsrs	r1, r1, #31
 8000cce:	2aff      	cmp	r2, #255	@ 0xff
 8000cd0:	d01a      	beq.n	8000d08 <__lesf2+0x50>
 8000cd2:	28ff      	cmp	r0, #255	@ 0xff
 8000cd4:	d00e      	beq.n	8000cf4 <__lesf2+0x3c>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d11e      	bne.n	8000d18 <__lesf2+0x60>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d10e      	bne.n	8000cfc <__lesf2+0x44>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d02a      	beq.n	8000d38 <__lesf2+0x80>
 8000ce2:	2c00      	cmp	r4, #0
 8000ce4:	d00c      	beq.n	8000d00 <__lesf2+0x48>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d01d      	beq.n	8000d26 <__lesf2+0x6e>
 8000cea:	1e58      	subs	r0, r3, #1
 8000cec:	2302      	movs	r3, #2
 8000cee:	4018      	ands	r0, r3
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e010      	b.n	8000d16 <__lesf2+0x5e>
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d10d      	bne.n	8000d14 <__lesf2+0x5c>
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d120      	bne.n	8000d3e <__lesf2+0x86>
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d11e      	bne.n	8000d3e <__lesf2+0x86>
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d023      	beq.n	8000d4c <__lesf2+0x94>
 8000d04:	0008      	movs	r0, r1
 8000d06:	e006      	b.n	8000d16 <__lesf2+0x5e>
 8000d08:	2c00      	cmp	r4, #0
 8000d0a:	d103      	bne.n	8000d14 <__lesf2+0x5c>
 8000d0c:	28ff      	cmp	r0, #255	@ 0xff
 8000d0e:	d1ec      	bne.n	8000cea <__lesf2+0x32>
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d017      	beq.n	8000d44 <__lesf2+0x8c>
 8000d14:	2002      	movs	r0, #2
 8000d16:	bd30      	pop	{r4, r5, pc}
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d0e6      	beq.n	8000cea <__lesf2+0x32>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d1e4      	bne.n	8000cea <__lesf2+0x32>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	dce2      	bgt.n	8000cea <__lesf2+0x32>
 8000d24:	db04      	blt.n	8000d30 <__lesf2+0x78>
 8000d26:	42ac      	cmp	r4, r5
 8000d28:	d8df      	bhi.n	8000cea <__lesf2+0x32>
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	42ac      	cmp	r4, r5
 8000d2e:	d2f2      	bcs.n	8000d16 <__lesf2+0x5e>
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00b      	beq.n	8000d4c <__lesf2+0x94>
 8000d34:	0018      	movs	r0, r3
 8000d36:	e7ee      	b.n	8000d16 <__lesf2+0x5e>
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d0ec      	beq.n	8000d16 <__lesf2+0x5e>
 8000d3c:	e7d5      	b.n	8000cea <__lesf2+0x32>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d1d3      	bne.n	8000cea <__lesf2+0x32>
 8000d42:	e7f5      	b.n	8000d30 <__lesf2+0x78>
 8000d44:	2000      	movs	r0, #0
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d0e5      	beq.n	8000d16 <__lesf2+0x5e>
 8000d4a:	e7ce      	b.n	8000cea <__lesf2+0x32>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4240      	negs	r0, r0
 8000d50:	e7e1      	b.n	8000d16 <__lesf2+0x5e>
 8000d52:	46c0      	nop			@ (mov r8, r8)

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 fb9e 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f87c 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 f9c2 	bl	80010e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d64:	f000 f942 	bl	8000fec <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d68:	f000 f8c0 	bl	8000eec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <main+0xcc>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fb6f 	bl	8002454 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <main+0xd0>)
 8000d78:	2104      	movs	r1, #4
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 fc68 	bl	8002650 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000d80:	4b28      	ldr	r3, [pc, #160]	@ (8000e24 <main+0xd0>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 fac8 	bl	8002318 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CCR1=duty_debug;
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <main+0xd4>)
 8000d8a:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <main+0xd8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6353      	str	r3, [r2, #52]	@ 0x34
	  if(compute_flag){
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <main+0xdc>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f7      	beq.n	8000d88 <main+0x34>
		  freq_width=stop-start;
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <main+0xe0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	001a      	movs	r2, r3
 8000da0:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <main+0xe4>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	001a      	movs	r2, r3
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <main+0xe8>)
 8000dac:	601a      	str	r2, [r3, #0]
		  duty_width=(float) (middle-start);
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <main+0xec>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <main+0xe4>)
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	b292      	uxth	r2, r2
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fe6a 	bl	8000a94 <__aeabi_ui2f>
 8000dc0:	1c02      	adds	r2, r0, #0
 8000dc2:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <main+0xf0>)
 8000dc4:	601a      	str	r2, [r3, #0]
		  frequency=reference/freq_width;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <main+0xf4>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <main+0xe8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fe60 	bl	8000a94 <__aeabi_ui2f>
 8000dd4:	1c03      	adds	r3, r0, #0
 8000dd6:	1c19      	adds	r1, r3, #0
 8000dd8:	1c20      	adds	r0, r4, #0
 8000dda:	f7ff fa39 	bl	8000250 <__aeabi_fdiv>
 8000dde:	1c03      	adds	r3, r0, #0
 8000de0:	1c18      	adds	r0, r3, #0
 8000de2:	f7ff fa1d 	bl	8000220 <__aeabi_f2uiz>
 8000de6:	0003      	movs	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <main+0xf8>)
 8000dec:	801a      	strh	r2, [r3, #0]
		  duty= duty_width/freq_width*100;
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <main+0xf0>)
 8000df0:	681c      	ldr	r4, [r3, #0]
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <main+0xe8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fe4c 	bl	8000a94 <__aeabi_ui2f>
 8000dfc:	1c03      	adds	r3, r0, #0
 8000dfe:	1c19      	adds	r1, r3, #0
 8000e00:	1c20      	adds	r0, r4, #0
 8000e02:	f7ff fa25 	bl	8000250 <__aeabi_fdiv>
 8000e06:	1c03      	adds	r3, r0, #0
 8000e08:	4911      	ldr	r1, [pc, #68]	@ (8000e50 <main+0xfc>)
 8000e0a:	1c18      	adds	r0, r3, #0
 8000e0c:	f7ff fb40 	bl	8000490 <__aeabi_fmul>
 8000e10:	1c03      	adds	r3, r0, #0
 8000e12:	1c1a      	adds	r2, r3, #0
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <main+0x100>)
 8000e16:	601a      	str	r2, [r3, #0]
	      compute_flag=0;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <main+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
	  TIM3->CCR1=duty_debug;
 8000e1e:	e7b3      	b.n	8000d88 <main+0x34>
 8000e20:	20000078 	.word	0x20000078
 8000e24:	20000030 	.word	0x20000030
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	200000c1 	.word	0x200000c1
 8000e34:	200000d2 	.word	0x200000d2
 8000e38:	200000d0 	.word	0x200000d0
 8000e3c:	200000c4 	.word	0x200000c4
 8000e40:	200000cc 	.word	0x200000cc
 8000e44:	200000c8 	.word	0x200000c8
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	200000d8 	.word	0x200000d8
 8000e50:	42c80000 	.word	0x42c80000
 8000e54:	200000d4 	.word	0x200000d4

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b091      	sub	sp, #68	@ 0x44
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	2410      	movs	r4, #16
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	0018      	movs	r0, r3
 8000e64:	2330      	movs	r3, #48	@ 0x30
 8000e66:	001a      	movs	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f002 fce5 	bl	8003838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6e:	003b      	movs	r3, r7
 8000e70:	0018      	movs	r0, r3
 8000e72:	2310      	movs	r3, #16
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f002 fcde 	bl	8003838 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2202      	movs	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2202      	movs	r2, #2
 8000e94:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	0352      	lsls	r2, r2, #13
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fda5 	bl	80019fc <HAL_RCC_OscConfig>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000eb6:	f000 f9b3 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2290      	movs	r2, #144	@ 0x90
 8000eca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 f8aa 	bl	8002030 <HAL_RCC_ClockConfig>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 f99e 	bl	8001220 <Error_Handler>
  }
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b011      	add	sp, #68	@ 0x44
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	2318      	movs	r3, #24
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	2310      	movs	r3, #16
 8000efa:	001a      	movs	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f002 fc9b 	bl	8003838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	2310      	movs	r3, #16
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	2308      	movs	r3, #8
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f002 fc93 	bl	8003838 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f12:	003b      	movs	r3, r7
 8000f14:	0018      	movs	r0, r3
 8000f16:	2310      	movs	r3, #16
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f002 fc8c 	bl	8003838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f22:	4a30      	ldr	r2, [pc, #192]	@ (8000fe4 <MX_TIM1_Init+0xf8>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f28:	2231      	movs	r2, #49	@ 0x31
 8000f2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f34:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe8 <MX_TIM1_Init+0xfc>)
 8000f36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 f993 	bl	8002278 <HAL_TIM_Base_Init>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 f963 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	2118      	movs	r1, #24
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	0152      	lsls	r2, r2, #5
 8000f62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f64:	187a      	adds	r2, r7, r1
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 fef2 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000f74:	f000 f954 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 fb10 	bl	80025a0 <HAL_TIM_IC_Init>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f84:	f000 f94c 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2110      	movs	r1, #16
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f96:	187a      	adds	r2, r7, r1
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f002 fbe9 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000fa6:	f000 f93b 	bl	8001220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fc2:	0039      	movs	r1, r7
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_TIM1_Init+0xf4>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 fd59 	bl	8002a80 <HAL_TIM_IC_ConfigChannel>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000fd2:	f000 f925 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b00a      	add	sp, #40	@ 0x28
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	20000030 	.word	0x20000030
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	0000ffff 	.word	0x0000ffff

08000fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	@ 0x38
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	2328      	movs	r3, #40	@ 0x28
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f002 fc1b 	bl	8003838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	2320      	movs	r3, #32
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	0018      	movs	r0, r3
 8001008:	2308      	movs	r3, #8
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f002 fc13 	bl	8003838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	0018      	movs	r0, r3
 8001016:	231c      	movs	r3, #28
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f002 fc0c 	bl	8003838 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001022:	4a30      	ldr	r2, [pc, #192]	@ (80010e4 <MX_TIM3_Init+0xf8>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8001026:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001028:	2231      	movs	r2, #49	@ 0x31
 800102a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001032:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001034:	2263      	movs	r2, #99	@ 0x63
 8001036:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001046:	0018      	movs	r0, r3
 8001048:	f001 f916 	bl	8002278 <HAL_TIM_Base_Init>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001050:	f000 f8e6 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001054:	2128      	movs	r1, #40	@ 0x28
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	0152      	lsls	r2, r2, #5
 800105c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105e:	187a      	adds	r2, r7, r1
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f001 fe75 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800106e:	f000 f8d7 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001074:	0018      	movs	r0, r3
 8001076:	f001 f995 	bl	80023a4 <HAL_TIM_PWM_Init>
 800107a:	1e03      	subs	r3, r0, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800107e:	f000 f8cf 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2120      	movs	r1, #32
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001090:	187a      	adds	r2, r7, r1
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 8001094:	0011      	movs	r1, r2
 8001096:	0018      	movs	r0, r3
 8001098:	f002 fb6c 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80010a0:	f000 f8be 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2260      	movs	r2, #96	@ 0x60
 80010a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010bc:	1d39      	adds	r1, r7, #4
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 fd80 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80010cc:	f000 f8a8 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <MX_TIM3_Init+0xf4>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 f940 	bl	8001358 <HAL_TIM_MspPostInit>

}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b00e      	add	sp, #56	@ 0x38
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000078 	.word	0x20000078
 80010e4:	40000400 	.word	0x40000400

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0289      	lsls	r1, r1, #10
 80010f8:	430a      	orrs	r2, r1
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <MX_GPIO_Init+0x2c>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
			compute_flag=1;
			capture_flag=0;
					}
	*/

		if(capture_flag==0){
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11e      	bne.n	8001166 <HAL_TIM_IC_CaptureCallback+0x4e>
			timer1_update_count=0;
 8001128:	4b2e      	ldr	r3, [pc, #184]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
			start =TIM1->CCR2;
 800112e:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001136:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	21a0      	movs	r1, #160	@ 0xa0
 8001144:	438a      	bics	r2, r1
 8001146:	621a      	str	r2, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a1a      	ldr	r2, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2120      	movs	r1, #32
 8001154:	430a      	orrs	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
			capture_flag++;
 8001158:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001162:	701a      	strb	r2, [r3, #0]
			  capture_flag=0;
			  compute_flag=1;
		   }


}
 8001164:	e038      	b.n	80011d8 <HAL_TIM_IC_CaptureCallback+0xc0>
		}else if(capture_flag==1){
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11f      	bne.n	80011ae <HAL_TIM_IC_CaptureCallback+0x96>
			middle = TIM1->ARR*(timer1_update_count)+TIM1->CCR2;
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	435a      	muls	r2, r3
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800117c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117e:	18d2      	adds	r2, r2, r3
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001182:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	21a0      	movs	r1, #160	@ 0xa0
 8001190:	438a      	bics	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a12      	ldr	r2, [r2, #32]
 800119e:	621a      	str	r2, [r3, #32]
			capture_flag++;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	e014      	b.n	80011d8 <HAL_TIM_IC_CaptureCallback+0xc0>
			  stop = TIM1->ARR*(timer1_update_count)+TIM1->CCR2;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	4353      	muls	r3, r2
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80011c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80011ca:	801a      	strh	r2, [r3, #0]
			  capture_flag=0;
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
			  compute_flag=1;
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000c0 	.word	0x200000c0
 80011e4:	200000c2 	.word	0x200000c2
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	200000d0 	.word	0x200000d0
 80011f0:	200000cc 	.word	0x200000cc
 80011f4:	200000d2 	.word	0x200000d2
 80011f8:	200000c1 	.word	0x200000c1

080011fc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	timer1_update_count++;
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001210:	701a      	strb	r2, [r3, #0]


}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	200000c2 	.word	0x200000c2

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_MspInit+0x44>)
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_MspInit+0x44>)
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_MspInit+0x44>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_MspInit+0x44>)
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_MspInit+0x44>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	0549      	lsls	r1, r1, #21
 8001254:	430a      	orrs	r2, r1
 8001256:	61da      	str	r2, [r3, #28]
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_MspInit+0x44>)
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	055b      	lsls	r3, r3, #21
 8001260:	4013      	ands	r3, r2
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08b      	sub	sp, #44	@ 0x2c
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	2414      	movs	r4, #20
 800127e:	193b      	adds	r3, r7, r4
 8001280:	0018      	movs	r0, r3
 8001282:	2314      	movs	r3, #20
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f002 fad6 	bl	8003838 <memset>
  if(htim_base->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2e      	ldr	r2, [pc, #184]	@ (800134c <HAL_TIM_Base_MspInit+0xd8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d144      	bne.n	8001320 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001296:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	0109      	lsls	r1, r1, #4
 80012a0:	430a      	orrs	r2, r1
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	0289      	lsls	r1, r1, #10
 80012bc:	430a      	orrs	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	029b      	lsls	r3, r3, #10
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	0021      	movs	r1, r4
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2202      	movs	r2, #2
 80012dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2202      	movs	r2, #2
 80012ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	187a      	adds	r2, r7, r1
 80012f2:	2390      	movs	r3, #144	@ 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 fa0f 	bl	800171c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200d      	movs	r0, #13
 8001304:	f000 f9d8 	bl	80016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001308:	200d      	movs	r0, #13
 800130a:	f000 f9ea 	bl	80016e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	200e      	movs	r0, #14
 8001314:	f000 f9d0 	bl	80016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001318:	200e      	movs	r0, #14
 800131a:	f000 f9e2 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800131e:	e010      	b.n	8001342 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_TIM_Base_MspInit+0xe0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 8001330:	2102      	movs	r1, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	61da      	str	r2, [r3, #28]
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b00b      	add	sp, #44	@ 0x2c
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40000400 	.word	0x40000400

08001358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	240c      	movs	r4, #12
 8001362:	193b      	adds	r3, r7, r4
 8001364:	0018      	movs	r0, r3
 8001366:	2314      	movs	r3, #20
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f002 fa64 	bl	8003838 <memset>
  if(htim->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <HAL_TIM_MspPostInit+0x74>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d124      	bne.n	80013c4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_TIM_MspPostInit+0x78>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_TIM_MspPostInit+0x78>)
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	0289      	lsls	r1, r1, #10
 8001384:	430a      	orrs	r2, r1
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_TIM_MspPostInit+0x78>)
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	029b      	lsls	r3, r3, #10
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001396:	0021      	movs	r1, r4
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2240      	movs	r2, #64	@ 0x40
 800139c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2202      	movs	r2, #2
 80013a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2201      	movs	r2, #1
 80013b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	187a      	adds	r2, r7, r1
 80013b8:	2390      	movs	r3, #144	@ 0x90
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f9ac 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b009      	add	sp, #36	@ 0x24
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f894 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800140e:	0018      	movs	r0, r3
 8001410:	f001 fa20 	bl	8002854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	20000030 	.word	0x20000030

08001420 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <TIM1_CC_IRQHandler+0x14>)
 8001426:	0018      	movs	r0, r3
 8001428:	f001 fa14 	bl	8002854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	20000030 	.word	0x20000030

08001438 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001446:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001448:	f7ff fff6 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001472:	f002 f9e9 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff fc6d 	bl	8000d54 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   r0, =_estack
 800147c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001488:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 800148c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001490:	200000e0 	.word	0x200000e0

08001494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_IRQHandler>
	...

08001498 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <HAL_Init+0x24>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_Init+0x24>)
 80014a2:	2110      	movs	r1, #16
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f809 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff febd 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_InitTick+0x5c>)
 80014ca:	681c      	ldr	r4, [r3, #0]
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	0019      	movs	r1, r3
 80014d2:	23fa      	movs	r3, #250	@ 0xfa
 80014d4:	0098      	lsls	r0, r3, #2
 80014d6:	f7fe fe17 	bl	8000108 <__udivsi3>
 80014da:	0003      	movs	r3, r0
 80014dc:	0019      	movs	r1, r3
 80014de:	0020      	movs	r0, r4
 80014e0:	f7fe fe12 	bl	8000108 <__udivsi3>
 80014e4:	0003      	movs	r3, r0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f90b 	bl	8001702 <HAL_SYSTICK_Config>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e00f      	b.n	8001514 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d80b      	bhi.n	8001512 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2301      	movs	r3, #1
 80014fe:	425b      	negs	r3, r3
 8001500:	2200      	movs	r2, #0
 8001502:	0018      	movs	r0, r3
 8001504:	f000 f8d8 	bl	80016b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_InitTick+0x64>)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b003      	add	sp, #12
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000008 	.word	0x20000008
 8001520:	20000010 	.word	0x20000010
 8001524:	2000000c 	.word	0x2000000c

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_IncTick+0x1c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	001a      	movs	r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_IncTick+0x20>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	18d2      	adds	r2, r2, r3
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_IncTick+0x20>)
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	20000010 	.word	0x20000010
 8001548:	200000dc 	.word	0x200000dc

0800154c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b02      	ldr	r3, [pc, #8]	@ (800155c <HAL_GetTick+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	200000dc 	.word	0x200000dc

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b7f      	cmp	r3, #127	@ 0x7f
 8001572:	d809      	bhi.n	8001588 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	001a      	movs	r2, r3
 800157a:	231f      	movs	r3, #31
 800157c:	401a      	ands	r2, r3
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_EnableIRQ+0x30>)
 8001580:	2101      	movs	r1, #1
 8001582:	4091      	lsls	r1, r2
 8001584:	000a      	movs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a8:	d828      	bhi.n	80015fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <__NVIC_SetPriority+0xd4>)
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	33c0      	adds	r3, #192	@ 0xc0
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	589b      	ldr	r3, [r3, r2]
 80015ba:	1dfa      	adds	r2, r7, #7
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	0011      	movs	r1, r2
 80015c0:	2203      	movs	r2, #3
 80015c2:	400a      	ands	r2, r1
 80015c4:	00d2      	lsls	r2, r2, #3
 80015c6:	21ff      	movs	r1, #255	@ 0xff
 80015c8:	4091      	lsls	r1, r2
 80015ca:	000a      	movs	r2, r1
 80015cc:	43d2      	mvns	r2, r2
 80015ce:	401a      	ands	r2, r3
 80015d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	22ff      	movs	r2, #255	@ 0xff
 80015d8:	401a      	ands	r2, r3
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	2303      	movs	r3, #3
 80015e2:	4003      	ands	r3, r0
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	481f      	ldr	r0, [pc, #124]	@ (8001668 <__NVIC_SetPriority+0xd4>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	430a      	orrs	r2, r1
 80015f4:	33c0      	adds	r3, #192	@ 0xc0
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015fa:	e031      	b.n	8001660 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <__NVIC_SetPriority+0xd8>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0019      	movs	r1, r3
 8001604:	230f      	movs	r3, #15
 8001606:	400b      	ands	r3, r1
 8001608:	3b08      	subs	r3, #8
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3306      	adds	r3, #6
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1dfa      	adds	r2, r7, #7
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0011      	movs	r1, r2
 800161c:	2203      	movs	r2, #3
 800161e:	400a      	ands	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	21ff      	movs	r1, #255	@ 0xff
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	22ff      	movs	r2, #255	@ 0xff
 8001634:	401a      	ands	r2, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	2303      	movs	r3, #3
 800163e:	4003      	ands	r3, r0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <__NVIC_SetPriority+0xd8>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	001c      	movs	r4, r3
 800164c:	230f      	movs	r3, #15
 800164e:	4023      	ands	r3, r4
 8001650:	3b08      	subs	r3, #8
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	430a      	orrs	r2, r1
 8001656:	3306      	adds	r3, #6
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	18c3      	adds	r3, r0, r3
 800165c:	3304      	adds	r3, #4
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b003      	add	sp, #12
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	045b      	lsls	r3, r3, #17
 8001680:	429a      	cmp	r2, r3
 8001682:	d301      	bcc.n	8001688 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001684:	2301      	movs	r3, #1
 8001686:	e010      	b.n	80016aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <SysTick_Config+0x44>)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	3a01      	subs	r2, #1
 800168e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001690:	2301      	movs	r3, #1
 8001692:	425b      	negs	r3, r3
 8001694:	2103      	movs	r1, #3
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff ff7c 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SysTick_Config+0x44>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SysTick_Config+0x44>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	210f      	movs	r1, #15
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	1c02      	adds	r2, r0, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	0002      	movs	r2, r0
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff ff33 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff ffaf 	bl	8001670 <SysTick_Config>
 8001712:	0003      	movs	r3, r0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e14f      	b.n	80019cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4091      	lsls	r1, r2
 8001736:	000a      	movs	r2, r1
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_Init+0x28>
 8001742:	e140      	b.n	80019c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
 800174c:	2b01      	cmp	r3, #1
 800174e:	d005      	beq.n	800175c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001758:	2b02      	cmp	r3, #2
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	2201      	movs	r2, #1
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d017      	beq.n	80017fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2203      	movs	r2, #3
 8001800:	4013      	ands	r3, r2
 8001802:	2b02      	cmp	r3, #2
 8001804:	d123      	bne.n	800184e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	58d3      	ldr	r3, [r2, r3]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2207      	movs	r2, #7
 8001818:	4013      	ands	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	43da      	mvns	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2107      	movs	r1, #7
 8001832:	400b      	ands	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	401a      	ands	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	23c0      	movs	r3, #192	@ 0xc0
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_GPIO_Init+0x174>
 800188e:	e09a      	b.n	80019c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001890:	4b54      	ldr	r3, [pc, #336]	@ (80019e4 <HAL_GPIO_Init+0x2c8>)
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_GPIO_Init+0x2c8>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <HAL_GPIO_Init+0x2c8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a8:	4a4f      	ldr	r2, [pc, #316]	@ (80019e8 <HAL_GPIO_Init+0x2cc>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	589b      	ldr	r3, [r3, r2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	2390      	movs	r3, #144	@ 0x90
 80018d0:	05db      	lsls	r3, r3, #23
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a44      	ldr	r2, [pc, #272]	@ (80019ec <HAL_GPIO_Init+0x2d0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x1de>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a43      	ldr	r2, [pc, #268]	@ (80019f0 <HAL_GPIO_Init+0x2d4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x1da>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a42      	ldr	r2, [pc, #264]	@ (80019f4 <HAL_GPIO_Init+0x2d8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x1d6>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x1e4>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	2103      	movs	r1, #3
 8001904:	400a      	ands	r2, r1
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	@ (80019e8 <HAL_GPIO_Init+0x2cc>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b36      	ldr	r3, [pc, #216]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	035b      	lsls	r3, r3, #13
 8001936:	4013      	ands	r3, r2
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001948:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	039b      	lsls	r3, r3, #14
 8001960:	4013      	ands	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800199c:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	025b      	lsls	r3, r3, #9
 80019b4:	4013      	ands	r3, r2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_GPIO_Init+0x2dc>)
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	d000      	beq.n	80019da <HAL_GPIO_Init+0x2be>
 80019d8:	e6a8      	b.n	800172c <HAL_GPIO_Init+0x10>
  } 
}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000c00 	.word	0x48000c00
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e301      	b.n	8002012 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d100      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1e>
 8001a18:	e08d      	b.n	8001b36 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a1a:	4bc3      	ldr	r3, [pc, #780]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d00e      	beq.n	8001a44 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a26:	4bc0      	ldr	r3, [pc, #768]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x64>
 8001a32:	4bbd      	ldr	r3, [pc, #756]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	4bb8      	ldr	r3, [pc, #736]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x56>
 8001a50:	e070      	b.n	8001b34 <HAL_RCC_OscConfig+0x138>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d000      	beq.n	8001a5c <HAL_RCC_OscConfig+0x60>
 8001a5a:	e06b      	b.n	8001b34 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e2d8      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x7c>
 8001a68:	4baf      	ldr	r3, [pc, #700]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4bae      	ldr	r3, [pc, #696]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	0249      	lsls	r1, r1, #9
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e02f      	b.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x9e>
 8001a80:	4ba9      	ldr	r3, [pc, #676]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4ba8      	ldr	r3, [pc, #672]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	49a9      	ldr	r1, [pc, #676]	@ (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4ba6      	ldr	r3, [pc, #664]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4ba5      	ldr	r3, [pc, #660]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	49a7      	ldr	r1, [pc, #668]	@ (8001d30 <HAL_RCC_OscConfig+0x334>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e01e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc4>
 8001aa2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	02c9      	lsls	r1, r1, #11
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xdc>
 8001ac0:	4b99      	ldr	r3, [pc, #612]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b98      	ldr	r3, [pc, #608]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	4999      	ldr	r1, [pc, #612]	@ (8001d2c <HAL_RCC_OscConfig+0x330>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b96      	ldr	r3, [pc, #600]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b95      	ldr	r3, [pc, #596]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	4997      	ldr	r1, [pc, #604]	@ (8001d30 <HAL_RCC_OscConfig+0x334>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fd34 	bl	800154c <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff fd2f 	bl	800154c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	@ 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e28a      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	4b8a      	ldr	r3, [pc, #552]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0xee>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fd1f 	bl	800154c <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fd1a 	bl	800154c <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e275      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x118>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x146>
 8001b40:	e069      	b.n	8001c16 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b42:	4b79      	ldr	r3, [pc, #484]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	220c      	movs	r2, #12
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d00b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b4c:	4b76      	ldr	r3, [pc, #472]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d11c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x196>
 8001b58:	4b73      	ldr	r3, [pc, #460]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	4013      	ands	r3, r2
 8001b62:	d116      	bne.n	8001b92 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b64:	4b70      	ldr	r3, [pc, #448]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e24b      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	22f8      	movs	r2, #248	@ 0xf8
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	00da      	lsls	r2, r3, #3
 8001b8a:	4b67      	ldr	r3, [pc, #412]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	e041      	b.n	8001c16 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d024      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9a:	4b63      	ldr	r3, [pc, #396]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fcd1 	bl	800154c <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fccc 	bl	800154c <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e227      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f1      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b56      	ldr	r3, [pc, #344]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	22f8      	movs	r2, #248	@ 0xf8
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00da      	lsls	r2, r3, #3
 8001bdc:	4b52      	ldr	r3, [pc, #328]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be4:	4b50      	ldr	r3, [pc, #320]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcac 	bl	800154c <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fca7 	bl	800154c <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e202      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0c:	4b46      	ldr	r3, [pc, #280]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d036      	beq.n	8001c8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d019      	beq.n	8001c5c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c28:	4b3f      	ldr	r3, [pc, #252]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff fc8a 	bl	800154c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fc85 	bl	800154c <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1e0      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f1      	beq.n	8001c3e <HAL_RCC_OscConfig+0x242>
 8001c5a:	e018      	b.n	8001c8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c60:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	438a      	bics	r2, r1
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fc70 	bl	800154c <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff fc6b 	bl	800154c <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1c6      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f1      	bne.n	8001c72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x29e>
 8001c98:	e0b4      	b.n	8001e04 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	201f      	movs	r0, #31
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	055b      	lsls	r3, r3, #21
 8001caa:	4013      	ands	r3, r2
 8001cac:	d110      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	2180      	movs	r1, #128	@ 0x80
 8001cb6:	0549      	lsls	r1, r1, #21
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	61da      	str	r2, [r3, #28]
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	055b      	lsls	r3, r3, #21
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d11a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x338>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	2180      	movs	r1, #128	@ 0x80
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fc2f 	bl	800154c <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7ff fc2a 	bl	800154c <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e185      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_OscConfig+0x338>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10e      	bne.n	8001d38 <HAL_RCC_OscConfig+0x33c>
 8001d1a:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	4b02      	ldr	r3, [pc, #8]	@ (8001d28 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	e035      	b.n	8001d94 <HAL_RCC_OscConfig+0x398>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	fffeffff 	.word	0xfffeffff
 8001d30:	fffbffff 	.word	0xfffbffff
 8001d34:	40007000 	.word	0x40007000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x35e>
 8001d40:	4bb6      	ldr	r3, [pc, #728]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4bb5      	ldr	r3, [pc, #724]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	4bb3      	ldr	r3, [pc, #716]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4bb2      	ldr	r3, [pc, #712]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d52:	2104      	movs	r1, #4
 8001d54:	438a      	bics	r2, r1
 8001d56:	621a      	str	r2, [r3, #32]
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x398>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x380>
 8001d62:	4bae      	ldr	r3, [pc, #696]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	4bad      	ldr	r3, [pc, #692]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d68:	2104      	movs	r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	621a      	str	r2, [r3, #32]
 8001d6e:	4bab      	ldr	r3, [pc, #684]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	4baa      	ldr	r3, [pc, #680]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	621a      	str	r2, [r3, #32]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0x398>
 8001d7c:	4ba7      	ldr	r3, [pc, #668]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d7e:	6a1a      	ldr	r2, [r3, #32]
 8001d80:	4ba6      	ldr	r3, [pc, #664]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	621a      	str	r2, [r3, #32]
 8001d88:	4ba4      	ldr	r3, [pc, #656]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	4ba3      	ldr	r3, [pc, #652]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001d8e:	2104      	movs	r1, #4
 8001d90:	438a      	bics	r2, r1
 8001d92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d014      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fbd6 	bl	800154c <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fbd1 	bl	800154c <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a9b      	ldr	r2, [pc, #620]	@ (8002020 <HAL_RCC_OscConfig+0x624>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e12b      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	4b98      	ldr	r3, [pc, #608]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3aa>
 8001dc4:	e013      	b.n	8001dee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fbc1 	bl	800154c <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fbbc 	bl	800154c <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a91      	ldr	r2, [pc, #580]	@ (8002020 <HAL_RCC_OscConfig+0x624>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e116      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	4b8d      	ldr	r3, [pc, #564]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dee:	231f      	movs	r3, #31
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	4b87      	ldr	r3, [pc, #540]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001dfe:	4989      	ldr	r1, [pc, #548]	@ (8002024 <HAL_RCC_OscConfig+0x628>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e16:	4b81      	ldr	r3, [pc, #516]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e1a:	4b80      	ldr	r3, [pc, #512]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e22:	4b7e      	ldr	r3, [pc, #504]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e26:	4b7d      	ldr	r3, [pc, #500]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb8d 	bl	800154c <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e38:	f7ff fb88 	bl	800154c <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0e3      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e4a:	4b74      	ldr	r3, [pc, #464]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0f1      	beq.n	8001e38 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e54:	4b71      	ldr	r3, [pc, #452]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e58:	22f8      	movs	r2, #248	@ 0xf8
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	00da      	lsls	r2, r3, #3
 8001e64:	4b6d      	ldr	r3, [pc, #436]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e6a:	e034      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	3305      	adds	r3, #5
 8001e72:	d111      	bne.n	8001e98 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e74:	4b69      	ldr	r3, [pc, #420]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e78:	4b68      	ldr	r3, [pc, #416]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e80:	4b66      	ldr	r3, [pc, #408]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	22f8      	movs	r2, #248	@ 0xf8
 8001e86:	4393      	bics	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	00da      	lsls	r2, r3, #3
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e96:	e01e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e98:	4b60      	ldr	r3, [pc, #384]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fb4c 	bl	800154c <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eba:	f7ff fb47 	bl	800154c <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0a2      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ecc:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4e4>
 8001ede:	e097      	b.n	8002010 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x4f2>
 8001eec:	e06b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d14c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b49      	ldr	r3, [pc, #292]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b48      	ldr	r3, [pc, #288]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001efc:	494a      	ldr	r1, [pc, #296]	@ (8002028 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fb23 	bl	800154c <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fb1e 	bl	800154c <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e079      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	049b      	lsls	r3, r3, #18
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	220f      	movs	r2, #15
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f38:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f3e:	4b37      	ldr	r3, [pc, #220]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a3a      	ldr	r2, [pc, #232]	@ (800202c <HAL_RCC_OscConfig+0x630>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	431a      	orrs	r2, r3
 8001f52:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0449      	lsls	r1, r1, #17
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff faf1 	bl	800154c <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff faec 	bl	800154c <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e047      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	049b      	lsls	r3, r3, #18
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x574>
 8001f8e:	e03f      	b.n	8002010 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001f96:	4924      	ldr	r1, [pc, #144]	@ (8002028 <HAL_RCC_OscConfig+0x62c>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fad6 	bl	800154c <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fad1 	bl	800154c <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e02c      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	049b      	lsls	r3, r3, #18
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5aa>
 8001fc4:	e024      	b.n	8002010 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e01f      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_RCC_OscConfig+0x620>)
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fdc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d10e      	bne.n	800200c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	23f0      	movs	r3, #240	@ 0xf0
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b008      	add	sp, #32
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	40021000 	.word	0x40021000
 8002020:	00001388 	.word	0x00001388
 8002024:	efffffff 	.word	0xefffffff
 8002028:	feffffff 	.word	0xfeffffff
 800202c:	ffc2ffff 	.word	0xffc2ffff

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b3      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b5b      	ldr	r3, [pc, #364]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d911      	bls.n	8002076 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b58      	ldr	r3, [pc, #352]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	4393      	bics	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	4b55      	ldr	r3, [pc, #340]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002064:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e09a      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d015      	beq.n	80020ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2204      	movs	r2, #4
 8002086:	4013      	ands	r3, r2
 8002088:	d006      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800208a:	4b4b      	ldr	r3, [pc, #300]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4b4a      	ldr	r3, [pc, #296]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002090:	21e0      	movs	r1, #224	@ 0xe0
 8002092:	00c9      	lsls	r1, r1, #3
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b47      	ldr	r3, [pc, #284]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	22f0      	movs	r2, #240	@ 0xf0
 800209e:	4393      	bics	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	4b44      	ldr	r3, [pc, #272]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b3e      	ldr	r3, [pc, #248]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4013      	ands	r3, r2
 80020c8:	d114      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06e      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b38      	ldr	r3, [pc, #224]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	049b      	lsls	r3, r3, #18
 80020de:	4013      	ands	r3, r2
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e062      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b34      	ldr	r3, [pc, #208]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e05b      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f4:	4b30      	ldr	r3, [pc, #192]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7ff fa20 	bl	800154c <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e009      	b.n	8002126 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7ff fa1b 	bl	800154c <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_RCC_ClockConfig+0x18c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e042      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	220c      	movs	r2, #12
 800212c:	401a      	ands	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1ec      	bne.n	8002112 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d211      	bcs.n	800216a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <HAL_RCC_ClockConfig+0x184>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e020      	b.n	80021ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <HAL_RCC_ClockConfig+0x190>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002188:	f000 f820 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218c:	0001      	movs	r1, r0
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_RCC_ClockConfig+0x188>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	220f      	movs	r2, #15
 8002196:	4013      	ands	r3, r2
 8002198:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_RCC_ClockConfig+0x194>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	000a      	movs	r2, r1
 800219e:	40da      	lsrs	r2, r3
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <HAL_RCC_ClockConfig+0x198>)
 80021a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f7ff f98b 	bl	80014c0 <HAL_InitTick>
  
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	00001388 	.word	0x00001388
 80021c0:	fffff8ff 	.word	0xfffff8ff
 80021c4:	08003924 	.word	0x08003924
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	220c      	movs	r2, #12
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x30>
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x36>
 80021fa:	e02c      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021fe:	613b      	str	r3, [r7, #16]
      break;
 8002200:	e02c      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	220f      	movs	r2, #15
 8002208:	4013      	ands	r3, r2
 800220a:	4a19      	ldr	r2, [pc, #100]	@ (8002270 <HAL_RCC_GetSysClockFreq+0xa4>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002210:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	220f      	movs	r2, #15
 8002216:	4013      	ands	r3, r2
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xa8>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4810      	ldr	r0, [pc, #64]	@ (800226c <HAL_RCC_GetSysClockFreq+0xa0>)
 800222c:	f7fd ff6c 	bl	8000108 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	001a      	movs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4353      	muls	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e009      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	000a      	movs	r2, r1
 8002240:	0152      	lsls	r2, r2, #5
 8002242:	1a52      	subs	r2, r2, r1
 8002244:	0193      	lsls	r3, r2, #6
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	185b      	adds	r3, r3, r1
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	613b      	str	r3, [r7, #16]
      break;
 8002254:	e002      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002258:	613b      	str	r3, [r7, #16]
      break;
 800225a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800225c:	693b      	ldr	r3, [r7, #16]
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	007a1200 	.word	0x007a1200
 8002270:	08003934 	.word	0x08003934
 8002274:	08003944 	.word	0x08003944

08002278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	@ 0x3d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	@ 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe ffe7 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	@ 0x3d
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fe37 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2246      	movs	r2, #70	@ 0x46
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	@ 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223f      	movs	r2, #63	@ 0x3f
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	@ 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	@ 0x41
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2242      	movs	r2, #66	@ 0x42
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2243      	movs	r2, #67	@ 0x43
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2244      	movs	r2, #68	@ 0x44
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2245      	movs	r2, #69	@ 0x45
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	@ 0x3d
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223d      	movs	r2, #61	@ 0x3d
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e030      	b.n	8002392 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	223d      	movs	r2, #61	@ 0x3d
 8002334:	2102      	movs	r1, #2
 8002336:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a13      	ldr	r2, [pc, #76]	@ (800239c <HAL_TIM_Base_Start_IT+0x84>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x44>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <HAL_TIM_Base_Start_IT+0x88>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e007      	b.n	8002390 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400

080023a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	223d      	movs	r2, #61	@ 0x3d
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223c      	movs	r2, #60	@ 0x3c
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f839 	bl	8002444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223d      	movs	r2, #61	@ 0x3d
 80023d6:	2102      	movs	r1, #2
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	0019      	movs	r1, r3
 80023e4:	0010      	movs	r0, r2
 80023e6:	f000 fda1 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2246      	movs	r2, #70	@ 0x46
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223e      	movs	r2, #62	@ 0x3e
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	223f      	movs	r2, #63	@ 0x3f
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2240      	movs	r2, #64	@ 0x40
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2241      	movs	r2, #65	@ 0x41
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2242      	movs	r2, #66	@ 0x42
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2243      	movs	r2, #67	@ 0x43
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2244      	movs	r2, #68	@ 0x44
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2245      	movs	r2, #69	@ 0x45
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223d      	movs	r2, #61	@ 0x3d
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_TIM_PWM_Start+0x22>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223e      	movs	r2, #62	@ 0x3e
 8002468:	5c9b      	ldrb	r3, [r3, r2]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	4193      	sbcs	r3, r2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	e01f      	b.n	80024b6 <HAL_TIM_PWM_Start+0x62>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d108      	bne.n	800248e <HAL_TIM_PWM_Start+0x3a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	223f      	movs	r2, #63	@ 0x3f
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	4193      	sbcs	r3, r2
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e013      	b.n	80024b6 <HAL_TIM_PWM_Start+0x62>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d108      	bne.n	80024a6 <HAL_TIM_PWM_Start+0x52>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	4193      	sbcs	r3, r2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e007      	b.n	80024b6 <HAL_TIM_PWM_Start+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2241      	movs	r2, #65	@ 0x41
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	1e5a      	subs	r2, r3, #1
 80024b2:	4193      	sbcs	r3, r2
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e064      	b.n	8002588 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_PWM_Start+0x7a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223e      	movs	r2, #62	@ 0x3e
 80024c8:	2102      	movs	r1, #2
 80024ca:	5499      	strb	r1, [r3, r2]
 80024cc:	e013      	b.n	80024f6 <HAL_TIM_PWM_Start+0xa2>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0x8a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	223f      	movs	r2, #63	@ 0x3f
 80024d8:	2102      	movs	r1, #2
 80024da:	5499      	strb	r1, [r3, r2]
 80024dc:	e00b      	b.n	80024f6 <HAL_TIM_PWM_Start+0xa2>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d104      	bne.n	80024ee <HAL_TIM_PWM_Start+0x9a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	@ 0x40
 80024e8:	2102      	movs	r1, #2
 80024ea:	5499      	strb	r1, [r3, r2]
 80024ec:	e003      	b.n	80024f6 <HAL_TIM_PWM_Start+0xa2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2241      	movs	r2, #65	@ 0x41
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 f914 	bl	800372c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a21      	ldr	r2, [pc, #132]	@ (8002590 <HAL_TIM_PWM_Start+0x13c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIM_PWM_Start+0xce>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <HAL_TIM_PWM_Start+0x140>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_PWM_Start+0xce>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <HAL_TIM_PWM_Start+0x144>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_TIM_PWM_Start+0xd2>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_TIM_PWM_Start+0xd4>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2180      	movs	r1, #128	@ 0x80
 8002538:	0209      	lsls	r1, r1, #8
 800253a:	430a      	orrs	r2, r1
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <HAL_TIM_PWM_Start+0x13c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_TIM_PWM_Start+0xfe>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a13      	ldr	r2, [pc, #76]	@ (800259c <HAL_TIM_PWM_Start+0x148>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2207      	movs	r2, #7
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d010      	beq.n	8002586 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	e007      	b.n	8002586 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40014400 	.word	0x40014400
 8002598:	40014800 	.word	0x40014800
 800259c:	40000400 	.word	0x40000400

080025a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e042      	b.n	8002638 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223d      	movs	r2, #61	@ 0x3d
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223c      	movs	r2, #60	@ 0x3c
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f839 	bl	8002640 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	223d      	movs	r2, #61	@ 0x3d
 80025d2:	2102      	movs	r1, #2
 80025d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	0019      	movs	r1, r3
 80025e0:	0010      	movs	r0, r2
 80025e2:	f000 fca3 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2246      	movs	r2, #70	@ 0x46
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	223e      	movs	r2, #62	@ 0x3e
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223f      	movs	r2, #63	@ 0x3f
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2240      	movs	r2, #64	@ 0x40
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2241      	movs	r2, #65	@ 0x41
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2242      	movs	r2, #66	@ 0x42
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2243      	movs	r2, #67	@ 0x43
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2244      	movs	r2, #68	@ 0x44
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2245      	movs	r2, #69	@ 0x45
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	223d      	movs	r2, #61	@ 0x3d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	230f      	movs	r3, #15
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d104      	bne.n	8002672 <HAL_TIM_IC_Start_IT+0x22>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223e      	movs	r2, #62	@ 0x3e
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e013      	b.n	800269a <HAL_TIM_IC_Start_IT+0x4a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d104      	bne.n	8002682 <HAL_TIM_IC_Start_IT+0x32>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223f      	movs	r2, #63	@ 0x3f
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e00b      	b.n	800269a <HAL_TIM_IC_Start_IT+0x4a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d104      	bne.n	8002692 <HAL_TIM_IC_Start_IT+0x42>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	5c9b      	ldrb	r3, [r3, r2]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e003      	b.n	800269a <HAL_TIM_IC_Start_IT+0x4a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2241      	movs	r2, #65	@ 0x41
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	220e      	movs	r2, #14
 800269c:	18ba      	adds	r2, r7, r2
 800269e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <HAL_TIM_IC_Start_IT+0x60>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2242      	movs	r2, #66	@ 0x42
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e013      	b.n	80026d8 <HAL_TIM_IC_Start_IT+0x88>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d104      	bne.n	80026c0 <HAL_TIM_IC_Start_IT+0x70>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2243      	movs	r2, #67	@ 0x43
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e00b      	b.n	80026d8 <HAL_TIM_IC_Start_IT+0x88>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d104      	bne.n	80026d0 <HAL_TIM_IC_Start_IT+0x80>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2244      	movs	r2, #68	@ 0x44
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e003      	b.n	80026d8 <HAL_TIM_IC_Start_IT+0x88>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2245      	movs	r2, #69	@ 0x45
 80026d4:	5c9b      	ldrb	r3, [r3, r2]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	210d      	movs	r1, #13
 80026da:	187a      	adds	r2, r7, r1
 80026dc:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026de:	230e      	movs	r3, #14
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d103      	bne.n	80026f0 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d001      	beq.n	80026f4 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0a6      	b.n	8002842 <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_TIM_IC_Start_IT+0xb4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223e      	movs	r2, #62	@ 0x3e
 80026fe:	2102      	movs	r1, #2
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	e013      	b.n	800272c <HAL_TIM_IC_Start_IT+0xdc>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d104      	bne.n	8002714 <HAL_TIM_IC_Start_IT+0xc4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223f      	movs	r2, #63	@ 0x3f
 800270e:	2102      	movs	r1, #2
 8002710:	5499      	strb	r1, [r3, r2]
 8002712:	e00b      	b.n	800272c <HAL_TIM_IC_Start_IT+0xdc>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d104      	bne.n	8002724 <HAL_TIM_IC_Start_IT+0xd4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	2102      	movs	r1, #2
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	e003      	b.n	800272c <HAL_TIM_IC_Start_IT+0xdc>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2241      	movs	r2, #65	@ 0x41
 8002728:	2102      	movs	r1, #2
 800272a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_TIM_IC_Start_IT+0xec>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2242      	movs	r2, #66	@ 0x42
 8002736:	2102      	movs	r1, #2
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	e013      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x114>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d104      	bne.n	800274c <HAL_TIM_IC_Start_IT+0xfc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2243      	movs	r2, #67	@ 0x43
 8002746:	2102      	movs	r1, #2
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	e00b      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x114>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d104      	bne.n	800275c <HAL_TIM_IC_Start_IT+0x10c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2244      	movs	r2, #68	@ 0x44
 8002756:	2102      	movs	r1, #2
 8002758:	5499      	strb	r1, [r3, r2]
 800275a:	e003      	b.n	8002764 <HAL_TIM_IC_Start_IT+0x114>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2245      	movs	r2, #69	@ 0x45
 8002760:	2102      	movs	r1, #2
 8002762:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d02a      	beq.n	80027c0 <HAL_TIM_IC_Start_IT+0x170>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d830      	bhi.n	80027d2 <HAL_TIM_IC_Start_IT+0x182>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d01b      	beq.n	80027ae <HAL_TIM_IC_Start_IT+0x15e>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d82a      	bhi.n	80027d2 <HAL_TIM_IC_Start_IT+0x182>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IC_Start_IT+0x13a>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d009      	beq.n	800279c <HAL_TIM_IC_Start_IT+0x14c>
 8002788:	e023      	b.n	80027d2 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2102      	movs	r1, #2
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
      break;
 800279a:	e01f      	b.n	80027dc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2104      	movs	r1, #4
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
      break;
 80027ac:	e016      	b.n	80027dc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2108      	movs	r1, #8
 80027ba:	430a      	orrs	r2, r1
 80027bc:	60da      	str	r2, [r3, #12]
      break;
 80027be:	e00d      	b.n	80027dc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2110      	movs	r1, #16
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]
      break;
 80027d0:	e004      	b.n	80027dc <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80027d2:	230f      	movs	r3, #15
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80027dc:	230f      	movs	r3, #15
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12a      	bne.n	800283c <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 ff9c 	bl	800372c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a14      	ldr	r2, [pc, #80]	@ (800284c <HAL_TIM_IC_Start_IT+0x1fc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_TIM_IC_Start_IT+0x1b8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a13      	ldr	r2, [pc, #76]	@ (8002850 <HAL_TIM_IC_Start_IT+0x200>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d010      	beq.n	800283c <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282a:	e007      	b.n	800283c <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781b      	ldrb	r3, [r3, #0]
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400

08002854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d124      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	4013      	ands	r3, r2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d11d      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2203      	movs	r2, #3
 800287e:	4252      	negs	r2, r2
 8002880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2203      	movs	r2, #3
 8002890:	4013      	ands	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f7fe fc3e 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 800289c:	e007      	b.n	80028ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fb2b 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fb2f 	bl	8002f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d125      	bne.n	800290e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2204      	movs	r2, #4
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11e      	bne.n	800290e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2205      	movs	r2, #5
 80028d6:	4252      	negs	r2, r2
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	23c0      	movs	r3, #192	@ 0xc0
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fc11 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 80028f6:	e007      	b.n	8002908 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fafe 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 fb02 	bl	8002f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2208      	movs	r2, #8
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d124      	bne.n	8002966 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2208      	movs	r2, #8
 8002924:	4013      	ands	r3, r2
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11d      	bne.n	8002966 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2209      	movs	r2, #9
 8002930:	4252      	negs	r2, r2
 8002932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0018      	movs	r0, r3
 800294a:	f7fe fbe5 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 800294e:	e007      	b.n	8002960 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fad2 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0018      	movs	r0, r3
 800295c:	f000 fad6 	bl	8002f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2210      	movs	r2, #16
 800296e:	4013      	ands	r3, r2
 8002970:	2b10      	cmp	r3, #16
 8002972:	d125      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2210      	movs	r2, #16
 800297c:	4013      	ands	r3, r2
 800297e:	2b10      	cmp	r3, #16
 8002980:	d11e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2211      	movs	r2, #17
 8002988:	4252      	negs	r2, r2
 800298a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2208      	movs	r2, #8
 8002990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7fe fbb8 	bl	8001118 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e007      	b.n	80029ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 faa5 	bl	8002efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 faa9 	bl	8002f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10f      	bne.n	80029ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d108      	bne.n	80029ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2202      	movs	r2, #2
 80029e2:	4252      	negs	r2, r2
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe fc07 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2280      	movs	r2, #128	@ 0x80
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b80      	cmp	r3, #128	@ 0x80
 80029fa:	d10f      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2280      	movs	r2, #128	@ 0x80
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d108      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2281      	movs	r2, #129	@ 0x81
 8002a10:	4252      	negs	r2, r2
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 ff06 	bl	8003828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2240      	movs	r2, #64	@ 0x40
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b40      	cmp	r3, #64	@ 0x40
 8002a28:	d10f      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2240      	movs	r2, #64	@ 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b40      	cmp	r3, #64	@ 0x40
 8002a36:	d108      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2241      	movs	r2, #65	@ 0x41
 8002a3e:	4252      	negs	r2, r2
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 fa69 	bl	8002f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2220      	movs	r2, #32
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d10f      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d108      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2221      	movs	r2, #33	@ 0x21
 8002a6c:	4252      	negs	r2, r2
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fed0 	bl	8003818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2317      	movs	r3, #23
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	223c      	movs	r2, #60	@ 0x3c
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_IC_ConfigChannel+0x22>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e08c      	b.n	8002bbc <HAL_TIM_IC_ConfigChannel+0x13c>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	223c      	movs	r2, #60	@ 0x3c
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ac0:	f000 fc80 	bl	80033c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	210c      	movs	r1, #12
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	619a      	str	r2, [r3, #24]
 8002ae6:	e062      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d11c      	bne.n	8002b28 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002afe:	f000 fce1 	bl	80034c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	492d      	ldr	r1, [pc, #180]	@ (8002bc4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e042      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11b      	bne.n	8002b66 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b3e:	f000 fd35 	bl	80035ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	210c      	movs	r1, #12
 8002b4e:	438a      	bics	r2, r1
 8002b50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69d9      	ldr	r1, [r3, #28]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	e023      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d11c      	bne.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b7c:	f000 fd56 	bl	800362c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	490e      	ldr	r1, [pc, #56]	@ (8002bc4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69d9      	ldr	r1, [r3, #28]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
 8002ba4:	e003      	b.n	8002bae <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002ba6:	2317      	movs	r3, #23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	223c      	movs	r2, #60	@ 0x3c
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]

  return status;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	781b      	ldrb	r3, [r3, #0]
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b006      	add	sp, #24
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	fffff3ff 	.word	0xfffff3ff

08002bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2317      	movs	r3, #23
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	223c      	movs	r2, #60	@ 0x3c
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x22>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0ad      	b.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	223c      	movs	r2, #60	@ 0x3c
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d100      	bne.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x32>
 8002bf8:	e076      	b.n	8002ce8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d900      	bls.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c00:	e095      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d04e      	beq.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d900      	bls.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c0e:	e08e      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d021      	beq.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c1c:	e087      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f9ec 	bl	8003004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2108      	movs	r1, #8
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2104      	movs	r1, #4
 8002c48:	438a      	bics	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	619a      	str	r2, [r3, #24]
      break;
 8002c5e:	e06b      	b.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	0011      	movs	r1, r2
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 fa49 	bl	8003100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	0109      	lsls	r1, r1, #4
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4931      	ldr	r1, [pc, #196]	@ (8002d50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6999      	ldr	r1, [r3, #24]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	021a      	lsls	r2, r3, #8
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	619a      	str	r2, [r3, #24]
      break;
 8002ca4:	e048      	b.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	0011      	movs	r1, r2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 faa4 	bl	80031fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2104      	movs	r1, #4
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69d9      	ldr	r1, [r3, #28]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	61da      	str	r2, [r3, #28]
      break;
 8002ce6:	e027      	b.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 fb03 	bl	80032fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	0109      	lsls	r1, r1, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	490f      	ldr	r1, [pc, #60]	@ (8002d50 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69d9      	ldr	r1, [r3, #28]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	61da      	str	r2, [r3, #28]
      break;
 8002d2c:	e004      	b.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d2e:	2317      	movs	r3, #23
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
      break;
 8002d36:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	223c      	movs	r2, #60	@ 0x3c
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d40:	2317      	movs	r3, #23
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	fffffbff 	.word	0xfffffbff

08002d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	230f      	movs	r3, #15
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	223c      	movs	r2, #60	@ 0x3c
 8002d6a:	5c9b      	ldrb	r3, [r3, r2]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIM_ConfigClockSource+0x20>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0bc      	b.n	8002eee <HAL_TIM_ConfigClockSource+0x19a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	223c      	movs	r2, #60	@ 0x3c
 8002d78:	2101      	movs	r1, #1
 8002d7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223d      	movs	r2, #61	@ 0x3d
 8002d80:	2102      	movs	r1, #2
 8002d82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2277      	movs	r2, #119	@ 0x77
 8002d90:	4393      	bics	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a58      	ldr	r2, [pc, #352]	@ (8002ef8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2280      	movs	r2, #128	@ 0x80
 8002daa:	0192      	lsls	r2, r2, #6
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d040      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0xde>
 8002db0:	2280      	movs	r2, #128	@ 0x80
 8002db2:	0192      	lsls	r2, r2, #6
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d900      	bls.n	8002dba <HAL_TIM_ConfigClockSource+0x66>
 8002db8:	e088      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dba:	2280      	movs	r2, #128	@ 0x80
 8002dbc:	0152      	lsls	r2, r2, #5
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d100      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x70>
 8002dc2:	e088      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x182>
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	0152      	lsls	r2, r2, #5
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d900      	bls.n	8002dce <HAL_TIM_ConfigClockSource+0x7a>
 8002dcc:	e07e      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dce:	2b70      	cmp	r3, #112	@ 0x70
 8002dd0:	d018      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0xb0>
 8002dd2:	d900      	bls.n	8002dd6 <HAL_TIM_ConfigClockSource+0x82>
 8002dd4:	e07a      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dd6:	2b60      	cmp	r3, #96	@ 0x60
 8002dd8:	d04f      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x126>
 8002dda:	d900      	bls.n	8002dde <HAL_TIM_ConfigClockSource+0x8a>
 8002ddc:	e076      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dde:	2b50      	cmp	r3, #80	@ 0x50
 8002de0:	d03b      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x106>
 8002de2:	d900      	bls.n	8002de6 <HAL_TIM_ConfigClockSource+0x92>
 8002de4:	e072      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002de6:	2b40      	cmp	r3, #64	@ 0x40
 8002de8:	d057      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x146>
 8002dea:	d900      	bls.n	8002dee <HAL_TIM_ConfigClockSource+0x9a>
 8002dec:	e06e      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dee:	2b30      	cmp	r3, #48	@ 0x30
 8002df0:	d063      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x166>
 8002df2:	d86b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d060      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x166>
 8002df8:	d868      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d05d      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x166>
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d05b      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x166>
 8002e02:	e063      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	f000 fc6a 	bl	80036ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2277      	movs	r2, #119	@ 0x77
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
      break;
 8002e30:	e052      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	f000 fc53 	bl	80036ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2180      	movs	r1, #128	@ 0x80
 8002e52:	01c9      	lsls	r1, r1, #7
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
      break;
 8002e58:	e03e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	001a      	movs	r2, r3
 8002e68:	f000 fafe 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2150      	movs	r1, #80	@ 0x50
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 fc20 	bl	80036b8 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e02e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	001a      	movs	r2, r3
 8002e88:	f000 fb5e 	bl	8003548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2160      	movs	r1, #96	@ 0x60
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fc10 	bl	80036b8 <TIM_ITRx_SetConfig>
      break;
 8002e98:	e01e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	f000 fade 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2140      	movs	r1, #64	@ 0x40
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fc00 	bl	80036b8 <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e00e      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	f000 fbf7 	bl	80036b8 <TIM_ITRx_SetConfig>
      break;
 8002eca:	e005      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
      break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ed6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	223d      	movs	r2, #61	@ 0x3d
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	223c      	movs	r2, #60	@ 0x3c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	ffff00ff 	.word	0xffff00ff

08002efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <TIM_Base_SetConfig+0xc0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0x20>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <TIM_Base_SetConfig+0xc4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2270      	movs	r2, #112	@ 0x70
 8002f50:	4393      	bics	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a22      	ldr	r2, [pc, #136]	@ (8002fec <TIM_Base_SetConfig+0xc0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0x5a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a21      	ldr	r2, [pc, #132]	@ (8002ff0 <TIM_Base_SetConfig+0xc4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0x5a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a20      	ldr	r2, [pc, #128]	@ (8002ff4 <TIM_Base_SetConfig+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0x5a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <TIM_Base_SetConfig+0xcc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0x5a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <TIM_Base_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <TIM_Base_SetConfig+0xd4>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <TIM_Base_SetConfig+0xc0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0xaa>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <TIM_Base_SetConfig+0xcc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0xaa>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <TIM_Base_SetConfig+0xd0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d103      	bne.n	8002fde <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	615a      	str	r2, [r3, #20]
}
 8002fe4:	46c0      	nop			@ (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40002000 	.word	0x40002000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	fffffcff 	.word	0xfffffcff

08003004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	2201      	movs	r2, #1
 8003014:	4393      	bics	r3, r2
 8003016:	001a      	movs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2270      	movs	r2, #112	@ 0x70
 8003032:	4393      	bics	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2203      	movs	r2, #3
 800303a:	4393      	bics	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2202      	movs	r2, #2
 800304c:	4393      	bics	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <TIM_OC1_SetConfig+0xe8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_OC1_SetConfig+0x6e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <TIM_OC1_SetConfig+0xec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC1_SetConfig+0x6e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <TIM_OC1_SetConfig+0xf0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10c      	bne.n	800308c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2208      	movs	r2, #8
 8003076:	4393      	bics	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2204      	movs	r2, #4
 8003088:	4393      	bics	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <TIM_OC1_SetConfig+0xe8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_OC1_SetConfig+0xa0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <TIM_OC1_SetConfig+0xec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC1_SetConfig+0xa0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <TIM_OC1_SetConfig+0xf0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <TIM_OC1_SetConfig+0xf4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <TIM_OC1_SetConfig+0xf8>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b006      	add	sp, #24
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	fffffeff 	.word	0xfffffeff
 80030fc:	fffffdff 	.word	0xfffffdff

08003100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	2210      	movs	r2, #16
 8003110:	4393      	bics	r3, r2
 8003112:	001a      	movs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a2c      	ldr	r2, [pc, #176]	@ (80031e0 <TIM_OC2_SetConfig+0xe0>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a2b      	ldr	r2, [pc, #172]	@ (80031e4 <TIM_OC2_SetConfig+0xe4>)
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2220      	movs	r2, #32
 800314a:	4393      	bics	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a22      	ldr	r2, [pc, #136]	@ (80031e8 <TIM_OC2_SetConfig+0xe8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10d      	bne.n	800317e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	4393      	bics	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	4393      	bics	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a19      	ldr	r2, [pc, #100]	@ (80031e8 <TIM_OC2_SetConfig+0xe8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_OC2_SetConfig+0x96>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a18      	ldr	r2, [pc, #96]	@ (80031ec <TIM_OC2_SetConfig+0xec>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_OC2_SetConfig+0x96>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <TIM_OC2_SetConfig+0xf0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d113      	bne.n	80031be <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4a16      	ldr	r2, [pc, #88]	@ (80031f4 <TIM_OC2_SetConfig+0xf4>)
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <TIM_OC2_SetConfig+0xf8>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b006      	add	sp, #24
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	ffff8fff 	.word	0xffff8fff
 80031e4:	fffffcff 	.word	0xfffffcff
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800
 80031f4:	fffffbff 	.word	0xfffffbff
 80031f8:	fffff7ff 	.word	0xfffff7ff

080031fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a33      	ldr	r2, [pc, #204]	@ (80032d8 <TIM_OC3_SetConfig+0xdc>)
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2270      	movs	r2, #112	@ 0x70
 8003228:	4393      	bics	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2203      	movs	r2, #3
 8003230:	4393      	bics	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <TIM_OC3_SetConfig+0xe0>)
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <TIM_OC3_SetConfig+0xe4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10d      	bne.n	8003276 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <TIM_OC3_SetConfig+0xe8>)
 800325e:	4013      	ands	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <TIM_OC3_SetConfig+0xec>)
 8003272:	4013      	ands	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a19      	ldr	r2, [pc, #100]	@ (80032e0 <TIM_OC3_SetConfig+0xe4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_OC3_SetConfig+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1a      	ldr	r2, [pc, #104]	@ (80032ec <TIM_OC3_SetConfig+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_OC3_SetConfig+0x92>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <TIM_OC3_SetConfig+0xf4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <TIM_OC3_SetConfig+0xf8>)
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <TIM_OC3_SetConfig+0xfc>)
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b006      	add	sp, #24
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	fffffeff 	.word	0xfffffeff
 80032dc:	fffffdff 	.word	0xfffffdff
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	fffff7ff 	.word	0xfffff7ff
 80032e8:	fffffbff 	.word	0xfffffbff
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	ffffefff 	.word	0xffffefff
 80032f8:	ffffdfff 	.word	0xffffdfff

080032fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a26      	ldr	r2, [pc, #152]	@ (80033a4 <TIM_OC4_SetConfig+0xa8>)
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a20      	ldr	r2, [pc, #128]	@ (80033a8 <TIM_OC4_SetConfig+0xac>)
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <TIM_OC4_SetConfig+0xb0>)
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <TIM_OC4_SetConfig+0xb4>)
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	031b      	lsls	r3, r3, #12
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <TIM_OC4_SetConfig+0xb8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC4_SetConfig+0x70>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a16      	ldr	r2, [pc, #88]	@ (80033b8 <TIM_OC4_SetConfig+0xbc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC4_SetConfig+0x70>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a15      	ldr	r2, [pc, #84]	@ (80033bc <TIM_OC4_SetConfig+0xc0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d109      	bne.n	8003380 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <TIM_OC4_SetConfig+0xc4>)
 8003370:	4013      	ands	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b006      	add	sp, #24
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	ffffefff 	.word	0xffffefff
 80033a8:	ffff8fff 	.word	0xffff8fff
 80033ac:	fffffcff 	.word	0xfffffcff
 80033b0:	ffffdfff 	.word	0xffffdfff
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800
 80033c0:	ffffbfff 	.word	0xffffbfff

080033c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4393      	bics	r3, r2
 80033da:	001a      	movs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <TIM_TI1_SetConfig+0x9c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_TI1_SetConfig+0x38>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <TIM_TI1_SetConfig+0xa0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <TIM_TI1_SetConfig+0x3c>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <TIM_TI1_SetConfig+0x3e>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2203      	movs	r2, #3
 800340a:	4393      	bics	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e003      	b.n	8003420 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2201      	movs	r2, #1
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	22f0      	movs	r2, #240	@ 0xf0
 8003424:	4393      	bics	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	22ff      	movs	r2, #255	@ 0xff
 800342e:	4013      	ands	r3, r2
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	220a      	movs	r2, #10
 800343a:	4393      	bics	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	220a      	movs	r2, #10
 8003442:	4013      	ands	r3, r2
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b006      	add	sp, #24
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400

08003468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	2201      	movs	r2, #1
 8003480:	4393      	bics	r3, r2
 8003482:	001a      	movs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	22f0      	movs	r2, #240	@ 0xf0
 8003492:	4393      	bics	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	220a      	movs	r2, #10
 80034a4:	4393      	bics	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2210      	movs	r2, #16
 80034d8:	4393      	bics	r3, r2
 80034da:	001a      	movs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <TIM_TI2_SetConfig+0x7c>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <TIM_TI2_SetConfig+0x80>)
 8003502:	4013      	ands	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	031b      	lsls	r3, r3, #12
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	22a0      	movs	r2, #160	@ 0xa0
 8003518:	4393      	bics	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	22a0      	movs	r2, #160	@ 0xa0
 8003522:	4013      	ands	r3, r2
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b006      	add	sp, #24
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	fffffcff 	.word	0xfffffcff
 8003544:	ffff0fff 	.word	0xffff0fff

08003548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	2210      	movs	r2, #16
 800355a:	4393      	bics	r3, r2
 800355c:	001a      	movs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <TIM_TI2_ConfigInputStage+0x60>)
 8003572:	4013      	ands	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	031b      	lsls	r3, r3, #12
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	22a0      	movs	r2, #160	@ 0xa0
 8003584:	4393      	bics	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b006      	add	sp, #24
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	ffff0fff 	.word	0xffff0fff

080035ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a19      	ldr	r2, [pc, #100]	@ (8003624 <TIM_TI3_SetConfig+0x78>)
 80035c0:	401a      	ands	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2203      	movs	r2, #3
 80035d6:	4393      	bics	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	22f0      	movs	r2, #240	@ 0xf0
 80035e6:	4393      	bics	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	22ff      	movs	r2, #255	@ 0xff
 80035f0:	4013      	ands	r3, r2
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003628 <TIM_TI3_SetConfig+0x7c>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	23a0      	movs	r3, #160	@ 0xa0
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4013      	ands	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b006      	add	sp, #24
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fffffeff 	.word	0xfffffeff
 8003628:	fffff5ff 	.word	0xfffff5ff

0800362c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <TIM_TI4_SetConfig+0x7c>)
 8003640:	401a      	ands	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <TIM_TI4_SetConfig+0x80>)
 8003656:	4013      	ands	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <TIM_TI4_SetConfig+0x84>)
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	031b      	lsls	r3, r3, #12
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <TIM_TI4_SetConfig+0x88>)
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	031a      	lsls	r2, r3, #12
 8003686:	23a0      	movs	r3, #160	@ 0xa0
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	4013      	ands	r3, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	ffffefff 	.word	0xffffefff
 80036ac:	fffffcff 	.word	0xfffffcff
 80036b0:	ffff0fff 	.word	0xffff0fff
 80036b4:	ffff5fff 	.word	0xffff5fff

080036b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2270      	movs	r2, #112	@ 0x70
 80036cc:	4393      	bics	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	2207      	movs	r2, #7
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4a09      	ldr	r2, [pc, #36]	@ (8003728 <TIM_ETR_SetConfig+0x3c>)
 8003704:	4013      	ands	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	431a      	orrs	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	46c0      	nop			@ (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b006      	add	sp, #24
 8003726:	bd80      	pop	{r7, pc}
 8003728:	ffff00ff 	.word	0xffff00ff

0800372c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	221f      	movs	r2, #31
 800373c:	4013      	ands	r3, r2
 800373e:	2201      	movs	r2, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	0013      	movs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	43d2      	mvns	r2, r2
 800374e:	401a      	ands	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	211f      	movs	r1, #31
 800375c:	400b      	ands	r3, r1
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4099      	lsls	r1, r3
 8003762:	000b      	movs	r3, r1
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b006      	add	sp, #24
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	223c      	movs	r2, #60	@ 0x3c
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e03c      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	223c      	movs	r2, #60	@ 0x3c
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	223d      	movs	r2, #61	@ 0x3d
 8003798:	2102      	movs	r1, #2
 800379a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2270      	movs	r2, #112	@ 0x70
 80037b0:	4393      	bics	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a11      	ldr	r2, [pc, #68]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	4393      	bics	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	223d      	movs	r2, #61	@ 0x3d
 80037f8:	2101      	movs	r1, #1
 80037fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	223c      	movs	r2, #60	@ 0x3c
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400

08003818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <memset>:
 8003838:	0003      	movs	r3, r0
 800383a:	1882      	adds	r2, r0, r2
 800383c:	4293      	cmp	r3, r2
 800383e:	d100      	bne.n	8003842 <memset+0xa>
 8003840:	4770      	bx	lr
 8003842:	7019      	strb	r1, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	e7f9      	b.n	800383c <memset+0x4>

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	2600      	movs	r6, #0
 800384c:	4c0c      	ldr	r4, [pc, #48]	@ (8003880 <__libc_init_array+0x38>)
 800384e:	4d0d      	ldr	r5, [pc, #52]	@ (8003884 <__libc_init_array+0x3c>)
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	2600      	movs	r6, #0
 800385a:	f000 f819 	bl	8003890 <_init>
 800385e:	4c0a      	ldr	r4, [pc, #40]	@ (8003888 <__libc_init_array+0x40>)
 8003860:	4d0a      	ldr	r5, [pc, #40]	@ (800388c <__libc_init_array+0x44>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	00b3      	lsls	r3, r6, #2
 800386e:	58eb      	ldr	r3, [r5, r3]
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	00b3      	lsls	r3, r6, #2
 8003878:	58eb      	ldr	r3, [r5, r3]
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	08003954 	.word	0x08003954
 8003884:	08003954 	.word	0x08003954
 8003888:	08003958 	.word	0x08003958
 800388c:	08003954 	.word	0x08003954

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
