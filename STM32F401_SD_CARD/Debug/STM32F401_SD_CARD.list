
STM32F401_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000801c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c8  080087c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d0  080087d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080087d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000080  08008858  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08008858  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd1c  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024af  00000000  00000000  0002de0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c3  00000000  00000000  00030f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182ad  00000000  00000000  0003194b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122be  00000000  00000000  00049bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a260  00000000  00000000  0005beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c28  00000000  00000000  000e6118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000e9d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081a4 	.word	0x080081a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080081a4 	.word	0x080081a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <SELECT+0x1c>)
 8000b94:	f001 fbf8 	bl	8002388 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f001 f967 	bl	8001e6c <HAL_Delay>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <DESELECT+0x1c>)
 8000bb4:	f001 fbe8 	bl	8002388 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f001 f957 	bl	8001e6c <HAL_Delay>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bd2:	bf00      	nop
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <SPI_TxByte+0x30>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d1f8      	bne.n	8000bd4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000be2:	1df9      	adds	r1, r7, #7
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <SPI_TxByte+0x30>)
 8000bea:	f002 f8c8 	bl	8002d7e <HAL_SPI_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a4 	.word	0x200000a4

08000bfc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c08:	bf00      	nop
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SPI_TxBuffer+0x30>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d1f8      	bne.n	8000c0a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <SPI_TxBuffer+0x30>)
 8000c20:	f002 f8ad 	bl	8002d7e <HAL_SPI_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000a4 	.word	0x200000a4

08000c30 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c3a:	bf00      	nop
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SPI_RxByte+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d1f8      	bne.n	8000c3c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c4a:	1dba      	adds	r2, r7, #6
 8000c4c:	1df9      	adds	r1, r7, #7
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2301      	movs	r3, #1
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <SPI_RxByte+0x34>)
 8000c56:	f002 f9d5 	bl	8003004 <HAL_SPI_TransmitReceive>

  return data;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000a4 	.word	0x200000a4

08000c68 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c70:	f7ff ffde 	bl	8000c30 <SPI_RxByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	701a      	strb	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SD_ReadyWait+0x30>)
 8000c8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c90:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000c92:	f7ff ffcd 	bl	8000c30 <SPI_RxByte>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d003      	beq.n	8000ca8 <SD_ReadyWait+0x24>
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SD_ReadyWait+0x30>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f4      	bne.n	8000c92 <SD_ReadyWait+0xe>

  return res;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000009e 	.word	0x2000009e

08000cb8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000cbe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000cc4:	f7ff ff70 	bl	8000ba8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	e005      	b.n	8000cda <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	f7ff ff7a 	bl	8000bc8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	ddf6      	ble.n	8000cce <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000ce0:	f7ff ff52 	bl	8000b88 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000cf8:	2395      	movs	r3, #149	; 0x95
 8000cfa:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2106      	movs	r1, #6
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff7b 	bl	8000bfc <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d06:	e002      	b.n	8000d0e <SD_PowerOn+0x56>
  {
    cnt--;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d0e:	f7ff ff8f 	bl	8000c30 <SPI_RxByte>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d002      	beq.n	8000d1e <SD_PowerOn+0x66>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f4      	bne.n	8000d08 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000d1e:	f7ff ff43 	bl	8000ba8 <DESELECT>
  SPI_TxByte(0XFF);
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	f7ff ff50 	bl	8000bc8 <SPI_TxByte>

  PowerFlag = 1;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <SD_PowerOn+0x80>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000a1 	.word	0x200000a1

08000d3c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <SD_PowerOff+0x14>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200000a1 	.word	0x200000a1

08000d54 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <SD_CheckPower+0x14>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000a1 	.word	0x200000a1

08000d6c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SD_RxDataBlock+0x58>)
 8000d78:	22c8      	movs	r2, #200	; 0xc8
 8000d7a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000d7c:	f7ff ff58 	bl	8000c30 <SPI_RxByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2bff      	cmp	r3, #255	; 0xff
 8000d88:	d103      	bne.n	8000d92 <SD_RxDataBlock+0x26>
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <SD_RxDataBlock+0x58>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f4      	bne.n	8000d7c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	2bfe      	cmp	r3, #254	; 0xfe
 8000d96:	d001      	beq.n	8000d9c <SD_RxDataBlock+0x30>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e00f      	b.n	8000dbc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff60 	bl	8000c68 <SPI_RxBytePtr>
  } while(len--);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	603a      	str	r2, [r7, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f4      	bne.n	8000d9c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000db2:	f7ff ff3d 	bl	8000c30 <SPI_RxByte>
  SPI_RxByte();
 8000db6:	f7ff ff3b 	bl	8000c30 <SPI_RxByte>

  return TRUE;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000009c 	.word	0x2000009c

08000dc8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dd8:	f7ff ff54 	bl	8000c84 <SD_ReadyWait>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2bff      	cmp	r3, #255	; 0xff
 8000de0:	d001      	beq.n	8000de6 <SD_TxDataBlock+0x1e>
 8000de2:	2300      	movs	r3, #0
 8000de4:	e02f      	b.n	8000e46 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff feed 	bl	8000bc8 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	2bfd      	cmp	r3, #253	; 0xfd
 8000df2:	d020      	beq.n	8000e36 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff feff 	bl	8000bfc <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000dfe:	f7ff ff17 	bl	8000c30 <SPI_RxByte>
    SPI_RxByte();
 8000e02:	f7ff ff15 	bl	8000c30 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000e06:	e00b      	b.n	8000e20 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000e08:	f7ff ff12 	bl	8000c30 <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	d006      	beq.n	8000e28 <SD_TxDataBlock+0x60>
      i++;
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	2b40      	cmp	r3, #64	; 0x40
 8000e24:	d9f0      	bls.n	8000e08 <SD_TxDataBlock+0x40>
 8000e26:	e000      	b.n	8000e2a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000e28:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ff00 	bl	8000c30 <SPI_RxByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fa      	beq.n	8000e2c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d101      	bne.n	8000e44 <SD_TxDataBlock+0x7c>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	6039      	str	r1, [r7, #0]
 8000e58:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e5a:	f7ff ff13 	bl	8000c84 <SD_ReadyWait>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2bff      	cmp	r3, #255	; 0xff
 8000e62:	d001      	beq.n	8000e68 <SD_SendCmd+0x1a>
 8000e64:	23ff      	movs	r3, #255	; 0xff
 8000e66:	e042      	b.n	8000eee <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff feac 	bl	8000bc8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	0e1b      	lsrs	r3, r3, #24
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fea6 	bl	8000bc8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fea0 	bl	8000bc8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe9a 	bl	8000bc8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe95 	bl	8000bc8 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b40      	cmp	r3, #64	; 0x40
 8000ea2:	d102      	bne.n	8000eaa <SD_SendCmd+0x5c>
 8000ea4:	2395      	movs	r3, #149	; 0x95
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e007      	b.n	8000eba <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b48      	cmp	r3, #72	; 0x48
 8000eae:	d102      	bne.n	8000eb6 <SD_SendCmd+0x68>
 8000eb0:	2387      	movs	r3, #135	; 0x87
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e001      	b.n	8000eba <SD_SendCmd+0x6c>
  else crc = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe83 	bl	8000bc8 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec6:	d101      	bne.n	8000ecc <SD_SendCmd+0x7e>
 8000ec8:	f7ff feb2 	bl	8000c30 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000ed0:	f7ff feae 	bl	8000c30 <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ed8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da05      	bge.n	8000eec <SD_SendCmd+0x9e>
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f1      	bne.n	8000ed0 <SD_SendCmd+0x82>

  return res;
 8000eec:	7b7b      	ldrb	r3, [r7, #13]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SD_disk_initialize+0x14>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0d1      	b.n	80010b0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000f0c:	4b6a      	ldr	r3, [pc, #424]	; (80010b8 <SD_disk_initialize+0x1c0>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <SD_disk_initialize+0x2a>
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <SD_disk_initialize+0x1c0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	e0c6      	b.n	80010b0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000f22:	f7ff fec9 	bl	8000cb8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000f26:	f7ff fe2f 	bl	8000b88 <SELECT>

  /* check disk type */
  type = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2040      	movs	r0, #64	; 0x40
 8000f32:	f7ff ff8c 	bl	8000e4e <SD_SendCmd>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 80a1 	bne.w	8001080 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <SD_disk_initialize+0x1c4>)
 8000f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f44:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f4a:	2048      	movs	r0, #72	; 0x48
 8000f4c:	f7ff ff7f 	bl	8000e4e <SD_SendCmd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d155      	bne.n	8001002 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e00c      	b.n	8000f76 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000f5c:	7bfc      	ldrb	r4, [r7, #15]
 8000f5e:	f7ff fe67 	bl	8000c30 <SPI_RxByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	f104 0310 	add.w	r3, r4, #16
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9ef      	bls.n	8000f5c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f7c:	7abb      	ldrb	r3, [r7, #10]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d17e      	bne.n	8001080 <SD_disk_initialize+0x188>
 8000f82:	7afb      	ldrb	r3, [r7, #11]
 8000f84:	2baa      	cmp	r3, #170	; 0xaa
 8000f86:	d17b      	bne.n	8001080 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2077      	movs	r0, #119	; 0x77
 8000f8c:	f7ff ff5f 	bl	8000e4e <SD_SendCmd>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d807      	bhi.n	8000fa6 <SD_disk_initialize+0xae>
 8000f96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f9a:	2069      	movs	r0, #105	; 0x69
 8000f9c:	f7ff ff57 	bl	8000e4e <SD_SendCmd>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <SD_disk_initialize+0x1c4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ec      	bne.n	8000f88 <SD_disk_initialize+0x90>
 8000fae:	e000      	b.n	8000fb2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <SD_disk_initialize+0x1c4>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d062      	beq.n	8001080 <SD_disk_initialize+0x188>
 8000fba:	2100      	movs	r1, #0
 8000fbc:	207a      	movs	r0, #122	; 0x7a
 8000fbe:	f7ff ff46 	bl	8000e4e <SD_SendCmd>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d15b      	bne.n	8001080 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e00c      	b.n	8000fe8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000fce:	7bfc      	ldrb	r4, [r7, #15]
 8000fd0:	f7ff fe2e 	bl	8000c30 <SPI_RxByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f104 0310 	add.w	r3, r4, #16
 8000fdc:	443b      	add	r3, r7
 8000fde:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d9ef      	bls.n	8000fce <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SD_disk_initialize+0x104>
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	e000      	b.n	8000ffe <SD_disk_initialize+0x106>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	73bb      	strb	r3, [r7, #14]
 8001000:	e03e      	b.n	8001080 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001002:	2100      	movs	r1, #0
 8001004:	2077      	movs	r0, #119	; 0x77
 8001006:	f7ff ff22 	bl	8000e4e <SD_SendCmd>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d808      	bhi.n	8001022 <SD_disk_initialize+0x12a>
 8001010:	2100      	movs	r1, #0
 8001012:	2069      	movs	r0, #105	; 0x69
 8001014:	f7ff ff1b 	bl	8000e4e <SD_SendCmd>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d801      	bhi.n	8001022 <SD_disk_initialize+0x12a>
 800101e:	2302      	movs	r3, #2
 8001020:	e000      	b.n	8001024 <SD_disk_initialize+0x12c>
 8001022:	2301      	movs	r3, #1
 8001024:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d10e      	bne.n	800104a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800102c:	2100      	movs	r1, #0
 800102e:	2077      	movs	r0, #119	; 0x77
 8001030:	f7ff ff0d 	bl	8000e4e <SD_SendCmd>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d80e      	bhi.n	8001058 <SD_disk_initialize+0x160>
 800103a:	2100      	movs	r1, #0
 800103c:	2069      	movs	r0, #105	; 0x69
 800103e:	f7ff ff06 	bl	8000e4e <SD_SendCmd>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <SD_disk_initialize+0x160>
 8001048:	e00c      	b.n	8001064 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800104a:	2100      	movs	r1, #0
 800104c:	2041      	movs	r0, #65	; 0x41
 800104e:	f7ff fefe 	bl	8000e4e <SD_SendCmd>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <SD_disk_initialize+0x1c4>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e2      	bne.n	8001026 <SD_disk_initialize+0x12e>
 8001060:	e000      	b.n	8001064 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001062:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <SD_disk_initialize+0x1c4>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <SD_disk_initialize+0x184>
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	2050      	movs	r0, #80	; 0x50
 8001072:	f7ff feec 	bl	8000e4e <SD_SendCmd>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SD_disk_initialize+0x188>
 800107c:	2300      	movs	r3, #0
 800107e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001080:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <SD_disk_initialize+0x1c8>)
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001086:	f7ff fd8f 	bl	8000ba8 <DESELECT>
  SPI_RxByte();
 800108a:	f7ff fdd1 	bl	8000c30 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <SD_disk_initialize+0x1c0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SD_disk_initialize+0x1c0>)
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e001      	b.n	80010aa <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010a6:	f7ff fe49 	bl	8000d3c <SD_PowerOff>
  }

  return Stat;
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <SD_disk_initialize+0x1c0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	2000009c 	.word	0x2000009c
 80010c0:	200000a0 	.word	0x200000a0

080010c4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SD_disk_status+0x14>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e002      	b.n	80010de <SD_disk_status+0x1a>
  return Stat;
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SD_disk_status+0x28>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <SD_disk_read+0x1c>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <SD_disk_read+0x20>
 800110c:	2304      	movs	r3, #4
 800110e:	e051      	b.n	80011b4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <SD_disk_read+0xcc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SD_disk_read+0x32>
 800111e:	2303      	movs	r3, #3
 8001120:	e048      	b.n	80011b4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <SD_disk_read+0xd0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <SD_disk_read+0x44>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	025b      	lsls	r3, r3, #9
 8001132:	607b      	str	r3, [r7, #4]

  SELECT();
 8001134:	f7ff fd28 	bl	8000b88 <SELECT>

  if (count == 1)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d111      	bne.n	8001162 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	2051      	movs	r0, #81	; 0x51
 8001142:	f7ff fe84 	bl	8000e4e <SD_SendCmd>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d129      	bne.n	80011a0 <SD_disk_read+0xb0>
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f7ff fe0b 	bl	8000d6c <SD_RxDataBlock>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <SD_disk_read+0xb0>
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	e01e      	b.n	80011a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	2052      	movs	r0, #82	; 0x52
 8001166:	f7ff fe72 	bl	8000e4e <SD_SendCmd>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d117      	bne.n	80011a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f7ff fdf9 	bl	8000d6c <SD_RxDataBlock>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00a      	beq.n	8001196 <SD_disk_read+0xa6>
        buff += 512;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001186:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ed      	bne.n	8001170 <SD_disk_read+0x80>
 8001194:	e000      	b.n	8001198 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001196:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001198:	2100      	movs	r1, #0
 800119a:	204c      	movs	r0, #76	; 0x4c
 800119c:	f7ff fe57 	bl	8000e4e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80011a0:	f7ff fd02 	bl	8000ba8 <DESELECT>
  SPI_RxByte();
 80011a4:	f7ff fd44 	bl	8000c30 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200000a0 	.word	0x200000a0

080011c4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <SD_disk_write+0x1c>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <SD_disk_write+0x20>
 80011e0:	2304      	movs	r3, #4
 80011e2:	e06b      	b.n	80012bc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <SD_disk_write+0x100>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SD_disk_write+0x32>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e062      	b.n	80012bc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <SD_disk_write+0x100>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SD_disk_write+0x44>
 8001204:	2302      	movs	r3, #2
 8001206:	e059      	b.n	80012bc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <SD_disk_write+0x104>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <SD_disk_write+0x56>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	607b      	str	r3, [r7, #4]

  SELECT();
 800121a:	f7ff fcb5 	bl	8000b88 <SELECT>

  if (count == 1)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d110      	bne.n	8001246 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	2058      	movs	r0, #88	; 0x58
 8001228:	f7ff fe11 	bl	8000e4e <SD_SendCmd>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d13a      	bne.n	80012a8 <SD_disk_write+0xe4>
 8001232:	21fe      	movs	r1, #254	; 0xfe
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f7ff fdc7 	bl	8000dc8 <SD_TxDataBlock>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d033      	beq.n	80012a8 <SD_disk_write+0xe4>
      count = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	e030      	b.n	80012a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <SD_disk_write+0x104>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2077      	movs	r0, #119	; 0x77
 8001256:	f7ff fdfa 	bl	8000e4e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	2057      	movs	r0, #87	; 0x57
 800125e:	f7ff fdf6 	bl	8000e4e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2059      	movs	r0, #89	; 0x59
 8001266:	f7ff fdf2 	bl	8000e4e <SD_SendCmd>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d11b      	bne.n	80012a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001270:	21fc      	movs	r1, #252	; 0xfc
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f7ff fda8 	bl	8000dc8 <SD_TxDataBlock>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00a      	beq.n	8001294 <SD_disk_write+0xd0>
        buff += 512;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001284:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ee      	bne.n	8001270 <SD_disk_write+0xac>
 8001292:	e000      	b.n	8001296 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001294:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001296:	21fd      	movs	r1, #253	; 0xfd
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd95 	bl	8000dc8 <SD_TxDataBlock>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80012a8:	f7ff fc7e 	bl	8000ba8 <DESELECT>
  SPI_RxByte();
 80012ac:	f7ff fcc0 	bl	8000c30 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	200000a0 	.word	0x200000a0

080012cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	460b      	mov	r3, r1
 80012da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SD_disk_ioctl+0x1e>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e115      	b.n	8001516 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d124      	bne.n	8001340 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d012      	beq.n	8001324 <SD_disk_ioctl+0x58>
 80012fe:	2b02      	cmp	r3, #2
 8001300:	dc1a      	bgt.n	8001338 <SD_disk_ioctl+0x6c>
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <SD_disk_ioctl+0x40>
 8001306:	2b01      	cmp	r3, #1
 8001308:	d006      	beq.n	8001318 <SD_disk_ioctl+0x4c>
 800130a:	e015      	b.n	8001338 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800130c:	f7ff fd16 	bl	8000d3c <SD_PowerOff>
      res = RES_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001316:	e0fc      	b.n	8001512 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001318:	f7ff fcce 	bl	8000cb8 <SD_PowerOn>
      res = RES_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001322:	e0f6      	b.n	8001512 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	1c5c      	adds	r4, r3, #1
 8001328:	f7ff fd14 	bl	8000d54 <SD_CheckPower>
 800132c:	4603      	mov	r3, r0
 800132e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001336:	e0ec      	b.n	8001512 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001338:	2304      	movs	r3, #4
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133e:	e0e8      	b.n	8001512 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001340:	4b77      	ldr	r3, [pc, #476]	; (8001520 <SD_disk_ioctl+0x254>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SD_disk_ioctl+0x86>
 800134e:	2303      	movs	r3, #3
 8001350:	e0e1      	b.n	8001516 <SD_disk_ioctl+0x24a>

    SELECT();
 8001352:	f7ff fc19 	bl	8000b88 <SELECT>

    switch (ctrl)
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	2b0d      	cmp	r3, #13
 800135a:	f200 80cb 	bhi.w	80014f4 <SD_disk_ioctl+0x228>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <SD_disk_ioctl+0x98>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	0800145f 	.word	0x0800145f
 8001368:	0800139d 	.word	0x0800139d
 800136c:	0800144f 	.word	0x0800144f
 8001370:	080014f5 	.word	0x080014f5
 8001374:	080014f5 	.word	0x080014f5
 8001378:	080014f5 	.word	0x080014f5
 800137c:	080014f5 	.word	0x080014f5
 8001380:	080014f5 	.word	0x080014f5
 8001384:	080014f5 	.word	0x080014f5
 8001388:	080014f5 	.word	0x080014f5
 800138c:	080014f5 	.word	0x080014f5
 8001390:	08001471 	.word	0x08001471
 8001394:	08001495 	.word	0x08001495
 8001398:	080014b9 	.word	0x080014b9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800139c:	2100      	movs	r1, #0
 800139e:	2049      	movs	r0, #73	; 0x49
 80013a0:	f7ff fd55 	bl	8000e4e <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80a8 	bne.w	80014fc <SD_disk_ioctl+0x230>
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2110      	movs	r1, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fcda 	bl	8000d6c <SD_RxDataBlock>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 809e 	beq.w	80014fc <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	099b      	lsrs	r3, r3, #6
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10e      	bne.n	80013e8 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ca:	7d7b      	ldrb	r3, [r7, #21]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	7d3b      	ldrb	r3, [r7, #20]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80013de:	8bfb      	ldrh	r3, [r7, #30]
 80013e0:	029a      	lsls	r2, r3, #10
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e02e      	b.n	8001446 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013e8:	7c7b      	ldrb	r3, [r7, #17]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	09db      	lsrs	r3, r3, #7
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	7d7b      	ldrb	r3, [r7, #21]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f003 0306 	and.w	r3, r3, #6
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3302      	adds	r3, #2
 800140c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001410:	7d3b      	ldrb	r3, [r7, #20]
 8001412:	099b      	lsrs	r3, r3, #6
 8001414:	b2db      	uxtb	r3, r3
 8001416:	b29a      	uxth	r2, r3
 8001418:	7cfb      	ldrb	r3, [r7, #19]
 800141a:	b29b      	uxth	r3, r3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	b29b      	uxth	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	7cbb      	ldrb	r3, [r7, #18]
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	b29b      	uxth	r3, r3
 800142a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800142e:	b29b      	uxth	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001438:	8bfa      	ldrh	r2, [r7, #30]
 800143a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800143e:	3b09      	subs	r3, #9
 8001440:	409a      	lsls	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800144c:	e056      	b.n	80014fc <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800145c:	e055      	b.n	800150a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800145e:	f7ff fc11 	bl	8000c84 <SD_ReadyWait>
 8001462:	4603      	mov	r3, r0
 8001464:	2bff      	cmp	r3, #255	; 0xff
 8001466:	d14b      	bne.n	8001500 <SD_disk_ioctl+0x234>
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800146e:	e047      	b.n	8001500 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001470:	2100      	movs	r1, #0
 8001472:	2049      	movs	r0, #73	; 0x49
 8001474:	f7ff fceb 	bl	8000e4e <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d142      	bne.n	8001504 <SD_disk_ioctl+0x238>
 800147e:	2110      	movs	r1, #16
 8001480:	6a38      	ldr	r0, [r7, #32]
 8001482:	f7ff fc73 	bl	8000d6c <SD_RxDataBlock>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03b      	beq.n	8001504 <SD_disk_ioctl+0x238>
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001492:	e037      	b.n	8001504 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001494:	2100      	movs	r1, #0
 8001496:	204a      	movs	r0, #74	; 0x4a
 8001498:	f7ff fcd9 	bl	8000e4e <SD_SendCmd>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d132      	bne.n	8001508 <SD_disk_ioctl+0x23c>
 80014a2:	2110      	movs	r1, #16
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff fc61 	bl	8000d6c <SD_RxDataBlock>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02b      	beq.n	8001508 <SD_disk_ioctl+0x23c>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b6:	e027      	b.n	8001508 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014b8:	2100      	movs	r1, #0
 80014ba:	207a      	movs	r0, #122	; 0x7a
 80014bc:	f7ff fcc7 	bl	8000e4e <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014cc:	e00b      	b.n	80014e6 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 80014ce:	6a3c      	ldr	r4, [r7, #32]
 80014d0:	1c63      	adds	r3, r4, #1
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	f7ff fbac 	bl	8000c30 <SPI_RxByte>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80014dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e0:	3301      	adds	r3, #1
 80014e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d9ef      	bls.n	80014ce <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 80014f4:	2304      	movs	r3, #4
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014fa:	e006      	b.n	800150a <SD_disk_ioctl+0x23e>
      break;
 80014fc:	bf00      	nop
 80014fe:	e004      	b.n	800150a <SD_disk_ioctl+0x23e>
      break;
 8001500:	bf00      	nop
 8001502:	e002      	b.n	800150a <SD_disk_ioctl+0x23e>
      break;
 8001504:	bf00      	nop
 8001506:	e000      	b.n	800150a <SD_disk_ioctl+0x23e>
      break;
 8001508:	bf00      	nop
    }

    DESELECT();
 800150a:	f7ff fb4d 	bl	8000ba8 <DESELECT>
    SPI_RxByte();
 800150e:	f7ff fb8f 	bl	8000c30 <SPI_RxByte>
  }

  return res;
 8001512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001516:	4618      	mov	r0, r3
 8001518:	372c      	adds	r7, #44	; 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fc2e 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f810 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f000 f8ce 	bl	80016d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001534:	f000 f86c 	bl	8001610 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001538:	f000 f8a0 	bl	800167c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800153c:	f002 fbfa 	bl	8003d34 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_SD_card();
 8001540:	f000 f938 	bl	80017b4 <process_SD_card>
  HAL_Delay(5000);
 8001544:	f241 3088 	movw	r0, #5000	; 0x1388
 8001548:	f000 fc90 	bl	8001e6c <HAL_Delay>
  while (1)
 800154c:	e7fe      	b.n	800154c <main+0x28>
	...

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f006 f896 	bl	8007690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <SystemClock_Config+0xb8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <SystemClock_Config+0xb8>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <SystemClock_Config+0xb8>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <SystemClock_Config+0xbc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <SystemClock_Config+0xbc>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <SystemClock_Config+0xbc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b8:	2310      	movs	r3, #16
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fef9 	bl	80023bc <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015d0:	f000 f9fa 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80015dc:	2390      	movs	r3, #144	; 0x90
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f95c 	bl	80028ac <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015fa:	f000 f9e5 	bl	80019c8 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	; 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_SPI2_Init+0x64>)
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <MX_SPI2_Init+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_SPI2_Init+0x64>)
 800161c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_SPI2_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_SPI2_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_SPI2_Init+0x64>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_SPI2_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_SPI2_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_SPI2_Init+0x64>)
 800165c:	220a      	movs	r2, #10
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_SPI2_Init+0x64>)
 8001662:	f001 fb03 	bl	8002c6c <HAL_SPI_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800166c:	f000 f9ac 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000a4 	.word	0x200000a4
 8001678:	40003800 	.word	0x40003800

0800167c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f001 ff32 	bl	800351c <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f000 f983 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000fc 	.word	0x200000fc
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <MX_GPIO_Init+0xb8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a26      	ldr	r2, [pc, #152]	; (8001788 <MX_GPIO_Init+0xb8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <MX_GPIO_Init+0xb8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <MX_GPIO_Init+0xb8>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <MX_GPIO_Init+0xb8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_GPIO_Init+0xb8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0xbc>)
 800175e:	f000 fe13 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_GPIO_Init+0xbc>)
 800177c:	f000 fc80 	bl	8002080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800

08001790 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	2201      	movs	r2, #1
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <__io_putchar+0x20>)
 80017a2:	f001 ff0b 	bl	80035bc <HAL_UART_Transmit>
  return ch;
 80017a6:	687b      	ldr	r3, [r7, #4]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000fc 	.word	0x200000fc

080017b4 <process_SD_card>:
* @brief SD Card Operation
* @param none
* @retval none
*/
void process_SD_card( void )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 80017ba:	af00      	add	r7, sp, #0
char        buf[100];

do
{
  //Mount the SD Card
  fres = f_mount(&FatFs, "", 1);    //1=mount now
 80017bc:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80017c0:	2201      	movs	r2, #1
 80017c2:	4974      	ldr	r1, [pc, #464]	; (8001994 <process_SD_card+0x1e0>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fcff 	bl	80061c8 <f_mount>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80017d0:	f102 021f 	add.w	r2, r2, #31
 80017d4:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 80017d6:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80017da:	f103 031f 	add.w	r3, r3, #31
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <process_SD_card+0x44>
  {
    printf("No SD Card found : (%i)\r\n", fres);
 80017e4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80017e8:	f103 031f 	add.w	r3, r3, #31
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4869      	ldr	r0, [pc, #420]	; (8001998 <process_SD_card+0x1e4>)
 80017f2:	f005 fe07 	bl	8007404 <iprintf>
    break;
 80017f6:	e0c0      	b.n	800197a <process_SD_card+0x1c6>
  }
  printf("SD Card Mounted Successfully!!!\r\n");
 80017f8:	4868      	ldr	r0, [pc, #416]	; (800199c <process_SD_card+0x1e8>)
 80017fa:	f005 fe69 	bl	80074d0 <puts>
  //Read the SD Card Total size and Free Size
  FATFS *pfs;
  DWORD fre_clust;
  uint32_t totalSpace, freeSpace;

  f_getfree("", &fre_clust, &pfs);
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	3b1c      	subs	r3, #28
 8001804:	4639      	mov	r1, r7
 8001806:	461a      	mov	r2, r3
 8001808:	4862      	ldr	r0, [pc, #392]	; (8001994 <process_SD_card+0x1e0>)
 800180a:	f005 fa8a 	bl	8006d22 <f_getfree>
  totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800180e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001812:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	3b02      	subs	r3, #2
 800181a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800181e:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 8001822:	8952      	ldrh	r2, [r2, #10]
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe ff95 	bl	8000758 <__aeabi_ui2d>
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <process_SD_card+0x1ec>)
 8001834:	f7fe fd24 	bl	8000280 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f804 	bl	800084c <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800184a:	f102 0218 	add.w	r2, r2, #24
 800184e:	6013      	str	r3, [r2, #0]
  freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001850:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001854:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001858:	895b      	ldrh	r3, [r3, #10]
 800185a:	461a      	mov	r2, r3
 800185c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001860:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe ff75 	bl	8000758 <__aeabi_ui2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <process_SD_card+0x1ec>)
 8001874:	f7fe fd04 	bl	8000280 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7fe ffe4 	bl	800084c <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800188a:	f102 0214 	add.w	r2, r2, #20
 800188e:	6013      	str	r3, [r2, #0]

  printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8001890:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001894:	f103 0314 	add.w	r3, r3, #20
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800189e:	f103 0318 	add.w	r3, r3, #24
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	483f      	ldr	r0, [pc, #252]	; (80019a4 <process_SD_card+0x1f0>)
 80018a6:	f005 fdad 	bl	8007404 <iprintf>

  //Open the file
  fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80018aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ae:	3b14      	subs	r3, #20
 80018b0:	220b      	movs	r2, #11
 80018b2:	493d      	ldr	r1, [pc, #244]	; (80019a8 <process_SD_card+0x1f4>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fccd 	bl	8006254 <f_open>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80018c0:	f102 021f 	add.w	r2, r2, #31
 80018c4:	7013      	strb	r3, [r2, #0]
  if(fres != FR_OK)
 80018c6:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80018ca:	f103 031f 	add.w	r3, r3, #31
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <process_SD_card+0x134>
  {
    printf("File creation/open Error : (%i)\r\n", fres);
 80018d4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80018d8:	f103 031f 	add.w	r3, r3, #31
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	4832      	ldr	r0, [pc, #200]	; (80019ac <process_SD_card+0x1f8>)
 80018e2:	f005 fd8f 	bl	8007404 <iprintf>
    break;
 80018e6:	e048      	b.n	800197a <process_SD_card+0x1c6>
  }

  printf("Writing data!!!\r\n");
 80018e8:	4831      	ldr	r0, [pc, #196]	; (80019b0 <process_SD_card+0x1fc>)
 80018ea:	f005 fdf1 	bl	80074d0 <puts>
  //write the data
  f_puts("Welcome to EmbeTronicX", &fil);
 80018ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018f2:	3b14      	subs	r3, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	482f      	ldr	r0, [pc, #188]	; (80019b4 <process_SD_card+0x200>)
 80018f8:	f005 fb7c 	bl	8006ff4 <f_puts>

  //close your file
  f_close(&fil);
 80018fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001900:	3b14      	subs	r3, #20
 8001902:	4618      	mov	r0, r3
 8001904:	f005 f9e3 	bl	8006cce <f_close>

  //Open the file
  fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001908:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800190c:	3b14      	subs	r3, #20
 800190e:	2201      	movs	r2, #1
 8001910:	4925      	ldr	r1, [pc, #148]	; (80019a8 <process_SD_card+0x1f4>)
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fc9e 	bl	8006254 <f_open>
 8001918:	4603      	mov	r3, r0
 800191a:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800191e:	f102 021f 	add.w	r2, r2, #31
 8001922:	7013      	strb	r3, [r2, #0]
  if(fres != FR_OK)
 8001924:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001928:	f103 031f 	add.w	r3, r3, #31
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <process_SD_card+0x192>
  {
    printf("File opening Error : (%i)\r\n", fres);
 8001932:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001936:	f103 031f 	add.w	r3, r3, #31
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	481e      	ldr	r0, [pc, #120]	; (80019b8 <process_SD_card+0x204>)
 8001940:	f005 fd60 	bl	8007404 <iprintf>
    break;
 8001944:	e019      	b.n	800197a <process_SD_card+0x1c6>
  }

  //read the data
  f_gets(buf, sizeof(buf), &fil);
 8001946:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800194a:	3a14      	subs	r2, #20
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	3b18      	subs	r3, #24
 8001952:	2164      	movs	r1, #100	; 0x64
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fa99 	bl	8006e8c <f_gets>

  printf("Read Data : %s\n", buf);
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	3b18      	subs	r3, #24
 8001960:	4619      	mov	r1, r3
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <process_SD_card+0x208>)
 8001964:	f005 fd4e 	bl	8007404 <iprintf>

  //close your file
  f_close(&fil);
 8001968:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800196c:	3b14      	subs	r3, #20
 800196e:	4618      	mov	r0, r3
 8001970:	f005 f9ad 	bl	8006cce <f_close>
  printf("Closing File!!!\r\n");
 8001974:	4812      	ldr	r0, [pc, #72]	; (80019c0 <process_SD_card+0x20c>)
 8001976:	f005 fdab 	bl	80074d0 <puts>
  }
#endif
} while( false );

//We're done, so de-mount the drive
f_mount(NULL, "", 0);
 800197a:	2200      	movs	r2, #0
 800197c:	4905      	ldr	r1, [pc, #20]	; (8001994 <process_SD_card+0x1e0>)
 800197e:	2000      	movs	r0, #0
 8001980:	f004 fc22 	bl	80061c8 <f_mount>
printf("SD Card Unmounted Successfully!!!\r\n");
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <process_SD_card+0x210>)
 8001986:	f005 fda3 	bl	80074d0 <puts>
}
 800198a:	bf00      	nop
 800198c:	f507 5787 	add.w	r7, r7, #4320	; 0x10e0
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	080081bc 	.word	0x080081bc
 8001998:	080081c0 	.word	0x080081c0
 800199c:	080081dc 	.word	0x080081dc
 80019a0:	3fe00000 	.word	0x3fe00000
 80019a4:	08008200 	.word	0x08008200
 80019a8:	08008230 	.word	0x08008230
 80019ac:	08008240 	.word	0x08008240
 80019b0:	08008264 	.word	0x08008264
 80019b4:	08008278 	.word	0x08008278
 80019b8:	08008290 	.word	0x08008290
 80019bc:	080082ac 	.word	0x080082ac
 80019c0:	080082bc 	.word	0x080082bc
 80019c4:	080082d0 	.word	0x080082d0

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_SPI_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12c      	bne.n	8001aa0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001a7e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a90:	2305      	movs	r3, #5
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a9c:	f000 faf0 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40003800 	.word	0x40003800
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12c      	bne.n	8001b30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b20:	2307      	movs	r3, #7
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_UART_MspInit+0x8c>)
 8001b2c:	f000 faa8 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b48:	e7fe      	b.n	8001b48 <NMI_Handler+0x4>

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <SysTick_Handler+0x34>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <SysTick_Handler+0x18>
	  Timer1--;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <SysTick_Handler+0x34>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <SysTick_Handler+0x34>)
 8001ba2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <SysTick_Handler+0x38>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <SysTick_Handler+0x2c>
	  Timer2--;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Handler+0x38>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <SysTick_Handler+0x38>)
 8001bb6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f938 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000009c 	.word	0x2000009c
 8001bc4:	2000009e 	.word	0x2000009e

08001bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e00a      	b.n	8001bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	4601      	mov	r1, r0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbf0      	blt.n	8001bda <_read+0x12>
  }

  return len;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e009      	b.n	8001c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fdb7 	bl	8001790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf1      	blt.n	8001c14 <_write+0x12>
  }
  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_close>:

int _close(int file)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c62:	605a      	str	r2, [r3, #4]
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_isatty>:

int _isatty(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f005 fd2a 	bl	800772c <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20010000 	.word	0x20010000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000144 	.word	0x20000144
 8001d0c:	200004d8 	.word	0x200004d8

08001d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <SystemInit+0x20>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <SystemInit+0x20>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d38:	f7ff ffea 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	; (8001d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	; (8001d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f005 fce9 	bl	8007738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fbdd 	bl	8001524 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d78:	080087d8 	.word	0x080087d8
  ldr r2, =_sbss
 8001d7c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d80:	200004d4 	.word	0x200004d4

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f931 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fe0a 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f93b 	bl	8002066 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f911 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000004 	.word	0x20000004
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000000c 	.word	0x2000000c
 8001e50:	20000148 	.word	0x20000148

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000148 	.word	0x20000148

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000000c 	.word	0x2000000c

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff47 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff5c 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffb0 	bl	8001fd4 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	e159      	b.n	8002350 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8148 	bne.w	800234a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d005      	beq.n	80020d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d130      	bne.n	8002134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0201 	and.w	r2, r3, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b03      	cmp	r3, #3
 800213e:	d017      	beq.n	8002170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d123      	bne.n	80021c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a2 	beq.w	800234a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_GPIO_Init+0x2e8>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a56      	ldr	r2, [pc, #344]	; (8002368 <HAL_GPIO_Init+0x2e8>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_GPIO_Init+0x2e8>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002222:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_GPIO_Init+0x2ec>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a49      	ldr	r2, [pc, #292]	; (8002370 <HAL_GPIO_Init+0x2f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x202>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a48      	ldr	r2, [pc, #288]	; (8002374 <HAL_GPIO_Init+0x2f4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x1fe>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a47      	ldr	r2, [pc, #284]	; (8002378 <HAL_GPIO_Init+0x2f8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x1fa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a46      	ldr	r2, [pc, #280]	; (800237c <HAL_GPIO_Init+0x2fc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x1f6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a45      	ldr	r2, [pc, #276]	; (8002380 <HAL_GPIO_Init+0x300>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x1f2>
 800226e:	2304      	movs	r3, #4
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x204>
 8002272:	2307      	movs	r3, #7
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x204>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x204>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x204>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x204>
 8002282:	2300      	movs	r3, #0
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_GPIO_Init+0x2ec>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_GPIO_Init+0x304>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <HAL_GPIO_Init+0x304>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_GPIO_Init+0x304>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_GPIO_Init+0x304>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_GPIO_Init+0x304>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231a:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <HAL_GPIO_Init+0x304>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_GPIO_Init+0x304>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_GPIO_Init+0x304>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	f67f aea2 	bls.w	800209c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a4:	e003      	b.n	80023ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e267      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d00c      	beq.n	8002400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f2:	4b82      	ldr	r3, [pc, #520]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	4b7e      	ldr	r3, [pc, #504]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x108>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d157      	bne.n	80024c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e242      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x74>
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e01d      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002454:	4b69      	ldr	r3, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fcee 	bl	8001e54 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7ff fcea 	bl	8001e54 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e207      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xc0>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fcda 	bl	8001e54 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff fcd6 	bl	8001e54 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1f3      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0xe8>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d063      	beq.n	800259a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1c7      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4937      	ldr	r1, [pc, #220]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e03a      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7ff fc8f 	bl	8001e54 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7ff fc8b 	bl	8001e54 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1a8      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4925      	ldr	r1, [pc, #148]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff fc6e 	bl	8001e54 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257c:	f7ff fc6a 	bl	8001e54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e187      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fc4e 	bl	8001e54 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7ff fc4a 	bl	8001e54 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e167      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x200>
 80025da:	e01b      	b.n	8002614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7ff fc37 	bl	8001e54 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7ff fc33 	bl	8001e54 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e150      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ea      	bne.n	80025ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b7d      	ldr	r3, [pc, #500]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b7a      	ldr	r3, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7ff fbf3 	bl	8001e54 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7ff fbef 	bl	8001e54 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e10c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
 8002698:	4b64      	ldr	r3, [pc, #400]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x30c>
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a5e      	ldr	r2, [pc, #376]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a5b      	ldr	r2, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
 80026d4:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7ff fbb4 	bl	8001e54 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7ff fbb0 	bl	8001e54 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0cb      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x334>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7ff fb9e 	bl	8001e54 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7ff fb9a 	bl	8001e54 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0b5      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a38      	ldr	r2, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a1 	beq.w	800289c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d05c      	beq.n	8002820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d141      	bne.n	80027f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fb6e 	bl	8001e54 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff fb6a 	bl	8001e54 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e087      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	491b      	ldr	r1, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7ff fb43 	bl	8001e54 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff fb3f 	bl	8001e54 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e05c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x416>
 80027f0:	e054      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fb2c 	bl	8001e54 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff fb28 	bl	8001e54 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e045      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
 800281e:	e03d      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e038      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x4ec>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d028      	beq.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d121      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11a      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800286e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cc      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800290a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d044      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e067      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4934      	ldr	r1, [pc, #208]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7ff fa5a 	bl	8001e54 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7ff fa56 	bl	8001e54 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f821 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f9ba 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	0800833c 	.word	0x0800833c
 8002a70:	20000004 	.word	0x20000004
 8002a74:	20000008 	.word	0x20000008

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b090      	sub	sp, #64	; 0x40
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a90:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	f200 80a1 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aaa:	e09b      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ab0:	e09b      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ab6:	e098      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae4:	fb03 f201 	mul.w	r2, r3, r1
 8002ae8:	2300      	movs	r3, #0
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af2:	fba0 1202 	umull	r1, r2, r0, r2
 8002af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af8:	460a      	mov	r2, r1
 8002afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afe:	4413      	add	r3, r2
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	2200      	movs	r2, #0
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	61fa      	str	r2, [r7, #28]
 8002b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b12:	f7fd febb 	bl	800088c <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1e:	e053      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	617a      	str	r2, [r7, #20]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b32:	f04f 0b00 	mov.w	fp, #0
 8002b36:	4652      	mov	r2, sl
 8002b38:	465b      	mov	r3, fp
 8002b3a:	f04f 0000 	mov.w	r0, #0
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b48:	0150      	lsls	r0, r2, #5
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b52:	eb63 090b 	sbc.w	r9, r3, fp
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	00eb      	lsls	r3, r5, #3
 8002b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b80:	00e2      	lsls	r2, r4, #3
 8002b82:	4614      	mov	r4, r2
 8002b84:	461d      	mov	r5, r3
 8002b86:	eb14 030a 	adds.w	r3, r4, sl
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	eb45 030b 	adc.w	r3, r5, fp
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	028b      	lsls	r3, r1, #10
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba8:	4621      	mov	r1, r4
 8002baa:	028a      	lsls	r2, r1, #10
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bbc:	f7fd fe66 	bl	800088c <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3740      	adds	r7, #64	; 0x40
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	017d7840 	.word	0x017d7840

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	0800834c 	.word	0x0800834c

08002c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c48:	f7ff ffdc 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0b5b      	lsrs	r3, r3, #13
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	0800834c 	.word	0x0800834c

08002c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07b      	b.n	8002d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d108      	bne.n	8002c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8e:	d009      	beq.n	8002ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
 8002c96:	e005      	b.n	8002ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe feb0 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	ea42 0103 	orr.w	r1, r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	f003 0104 	and.w	r1, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0210 	and.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b088      	sub	sp, #32
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_SPI_Transmit+0x22>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e12d      	b.n	8002ffc <HAL_SPI_Transmit+0x27e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da8:	f7ff f854 	bl	8001e54 <HAL_GetTick>
 8002dac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc2:	e116      	b.n	8002ff2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0x52>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dd4:	e10d      	b.n	8002ff2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1c:	d10f      	bne.n	8002e3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d007      	beq.n	8002e5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e64:	d14f      	bne.n	8002f06 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Transmit+0xf6>
 8002e6e:	8afb      	ldrh	r3, [r7, #22]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d142      	bne.n	8002efa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	1c9a      	adds	r2, r3, #2
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e98:	e02f      	b.n	8002efa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d112      	bne.n	8002ece <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ecc:	e015      	b.n	8002efa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ece:	f7fe ffc1 	bl	8001e54 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d803      	bhi.n	8002ee6 <HAL_SPI_Transmit+0x168>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d102      	bne.n	8002eec <HAL_SPI_Transmit+0x16e>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ef8:	e07b      	b.n	8002ff2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ca      	bne.n	8002e9a <HAL_SPI_Transmit+0x11c>
 8002f04:	e050      	b.n	8002fa8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Transmit+0x196>
 8002f0e:	8afb      	ldrh	r3, [r7, #22]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d144      	bne.n	8002f9e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f3a:	e030      	b.n	8002f9e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d113      	bne.n	8002f72 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f70:	e015      	b.n	8002f9e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe ff6f 	bl	8001e54 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Transmit+0x20c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x212>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f9c:	e029      	b.n	8002ff2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1c9      	bne.n	8002f3c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fa61 	bl	8003474 <SPI_EndRxTxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e003      	b.n	8002ff2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003012:	2301      	movs	r3, #1
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_TransmitReceive+0x26>
 8003026:	2302      	movs	r3, #2
 8003028:	e198      	b.n	800335c <HAL_SPI_TransmitReceive+0x358>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe ff0f 	bl	8001e54 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00f      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x70>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305a:	d107      	bne.n	800306c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_SPI_TransmitReceive+0x68>
 8003064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003068:	2b04      	cmp	r3, #4
 800306a:	d003      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003072:	e16d      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x82>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x82>
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800308c:	e160      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2205      	movs	r2, #5
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d007      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	d17c      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_SPI_TransmitReceive+0x10a>
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d16a      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003132:	e057      	b.n	80031e4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d11b      	bne.n	800317a <HAL_SPI_TransmitReceive+0x176>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_SPI_TransmitReceive+0x176>
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d113      	bne.n	800317a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d119      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x1b8>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d014      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031bc:	f7fe fe4a 	bl	8001e54 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d80b      	bhi.n	80031e4 <HAL_SPI_TransmitReceive+0x1e0>
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d007      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80031e2:	e0b5      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1a2      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x130>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d19d      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x130>
 80031f8:	e080      	b.n	80032fc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x204>
 8003202:	8b7b      	ldrh	r3, [r7, #26]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d16f      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322e:	e05b      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d11c      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x274>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x274>
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d114      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d119      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x2b6>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d014      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032b6:	2301      	movs	r3, #1
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ba:	f7fe fdcb 	bl	8001e54 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d803      	bhi.n	80032d2 <HAL_SPI_TransmitReceive+0x2ce>
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d102      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x2d4>
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80032e6:	e033      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d19e      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x22c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d199      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f8b7 	bl	8003474 <SPI_EndRxTxTransaction>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003318:	e01a      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003346:	e003      	b.n	8003350 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800335c:	4618      	mov	r0, r3
 800335e:	3730      	adds	r7, #48	; 0x30
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003374:	f7fe fd6e 	bl	8001e54 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	4413      	add	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003384:	f7fe fd66 	bl	8001e54 <HAL_GetTick>
 8003388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	015b      	lsls	r3, r3, #5
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	e054      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d050      	beq.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a4:	f7fe fd56 	bl	8001e54 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d902      	bls.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d13d      	bne.n	8003436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d111      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033dc:	d004      	beq.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d107      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d10f      	bne.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e017      	b.n	8003466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3b01      	subs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d19b      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000004 	.word	0x20000004

08003474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2201      	movs	r2, #1
 8003488:	2102      	movs	r1, #2
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff6a 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e032      	b.n	800350c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <SPI_EndRxTxTransaction+0xa0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <SPI_EndRxTxTransaction+0xa4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	0d5b      	lsrs	r3, r3, #21
 80034b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c4:	d112      	bne.n	80034ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7ff ff47 	bl	8003364 <SPI_WaitFlagStateUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e00f      	b.n	800350c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d0f2      	beq.n	80034ec <SPI_EndRxTxTransaction+0x78>
 8003506:	e000      	b.n	800350a <SPI_EndRxTxTransaction+0x96>
        break;
 8003508:	bf00      	nop
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000004 	.word	0x20000004
 8003518:	165e9f81 	.word	0x165e9f81

0800351c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e042      	b.n	80035b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fab6 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f973 	bl	800384c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d175      	bne.n	80036c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Transmit+0x2c>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e06e      	b.n	80036ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2221      	movs	r2, #33	; 0x21
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fa:	f7fe fc2b 	bl	8001e54 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d108      	bne.n	8003628 <HAL_UART_Transmit+0x6c>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e003      	b.n	8003630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003630:	e02e      	b.n	8003690 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f848 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e03a      	b.n	80036ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003668:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e007      	b.n	8003682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1cb      	bne.n	8003632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2140      	movs	r1, #64	; 0x40
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f814 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e006      	b.n	80036ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	e03b      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d037      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe fbb2 	bl	8001e54 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e03a      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d020      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d01d      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b08      	cmp	r3, #8
 800372c:	d116      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f81d 	bl	8003784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2208      	movs	r2, #8
 800374e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e00f      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d0b4      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b095      	sub	sp, #84	; 0x54
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ac:	643a      	str	r2, [r7, #64]	; 0x40
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d119      	bne.n	8003830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	60bb      	str	r3, [r7, #8]
   return(result);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381c:	61ba      	str	r2, [r7, #24]
 800381e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6979      	ldr	r1, [r7, #20]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	613b      	str	r3, [r7, #16]
   return(result);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800383e:	bf00      	nop
 8003840:	3754      	adds	r7, #84	; 0x54
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003850:	b0c0      	sub	sp, #256	; 0x100
 8003852:	af00      	add	r7, sp, #0
 8003854:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	68d9      	ldr	r1, [r3, #12]
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	ea40 0301 	orr.w	r3, r0, r1
 8003874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	431a      	orrs	r2, r3
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038a4:	f021 010c 	bic.w	r1, r1, #12
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038b2:	430b      	orrs	r3, r1
 80038b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	6999      	ldr	r1, [r3, #24]
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	ea40 0301 	orr.w	r3, r0, r1
 80038d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <UART_SetConfig+0x2cc>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d005      	beq.n	80038ec <UART_SetConfig+0xa0>
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b8d      	ldr	r3, [pc, #564]	; (8003b1c <UART_SetConfig+0x2d0>)
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d104      	bne.n	80038f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff f9aa 	bl	8002c44 <HAL_RCC_GetPCLK2Freq>
 80038f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038f4:	e003      	b.n	80038fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038f6:	f7ff f991 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 80038fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003908:	f040 810c 	bne.w	8003b24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800390c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003916:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800391a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800391e:	4622      	mov	r2, r4
 8003920:	462b      	mov	r3, r5
 8003922:	1891      	adds	r1, r2, r2
 8003924:	65b9      	str	r1, [r7, #88]	; 0x58
 8003926:	415b      	adcs	r3, r3
 8003928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800392a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800392e:	4621      	mov	r1, r4
 8003930:	eb12 0801 	adds.w	r8, r2, r1
 8003934:	4629      	mov	r1, r5
 8003936:	eb43 0901 	adc.w	r9, r3, r1
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800394a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800394e:	4690      	mov	r8, r2
 8003950:	4699      	mov	r9, r3
 8003952:	4623      	mov	r3, r4
 8003954:	eb18 0303 	adds.w	r3, r8, r3
 8003958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800395c:	462b      	mov	r3, r5
 800395e:	eb49 0303 	adc.w	r3, r9, r3
 8003962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003972:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800397a:	460b      	mov	r3, r1
 800397c:	18db      	adds	r3, r3, r3
 800397e:	653b      	str	r3, [r7, #80]	; 0x50
 8003980:	4613      	mov	r3, r2
 8003982:	eb42 0303 	adc.w	r3, r2, r3
 8003986:	657b      	str	r3, [r7, #84]	; 0x54
 8003988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800398c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003990:	f7fc ff7c 	bl	800088c <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <UART_SetConfig+0x2d4>)
 800399a:	fba3 2302 	umull	r2, r3, r3, r2
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	011c      	lsls	r4, r3, #4
 80039a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039b4:	4642      	mov	r2, r8
 80039b6:	464b      	mov	r3, r9
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80039bc:	415b      	adcs	r3, r3
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039c4:	4641      	mov	r1, r8
 80039c6:	eb12 0a01 	adds.w	sl, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb43 0b01 	adc.w	fp, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e4:	4692      	mov	sl, r2
 80039e6:	469b      	mov	fp, r3
 80039e8:	4643      	mov	r3, r8
 80039ea:	eb1a 0303 	adds.w	r3, sl, r3
 80039ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f2:	464b      	mov	r3, r9
 80039f4:	eb4b 0303 	adc.w	r3, fp, r3
 80039f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a10:	460b      	mov	r3, r1
 8003a12:	18db      	adds	r3, r3, r3
 8003a14:	643b      	str	r3, [r7, #64]	; 0x40
 8003a16:	4613      	mov	r3, r2
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a26:	f7fc ff31 	bl	800088c <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <UART_SetConfig+0x2d4>)
 8003a32:	fba3 2301 	umull	r2, r3, r3, r1
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2264      	movs	r2, #100	; 0x64
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	1acb      	subs	r3, r1, r3
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <UART_SetConfig+0x2d4>)
 8003a48:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a54:	441c      	add	r4, r3
 8003a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a68:	4642      	mov	r2, r8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	1891      	adds	r1, r2, r2
 8003a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a70:	415b      	adcs	r3, r3
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a78:	4641      	mov	r1, r8
 8003a7a:	1851      	adds	r1, r2, r1
 8003a7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a7e:	4649      	mov	r1, r9
 8003a80:	414b      	adcs	r3, r1
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a90:	4659      	mov	r1, fp
 8003a92:	00cb      	lsls	r3, r1, #3
 8003a94:	4651      	mov	r1, sl
 8003a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	00ca      	lsls	r2, r1, #3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aac:	464b      	mov	r3, r9
 8003aae:	460a      	mov	r2, r1
 8003ab0:	eb42 0303 	adc.w	r3, r2, r3
 8003ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ac4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003acc:	460b      	mov	r3, r1
 8003ace:	18db      	adds	r3, r3, r3
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ade:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ae2:	f7fc fed3 	bl	800088c <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <UART_SetConfig+0x2d4>)
 8003aec:	fba3 1302 	umull	r1, r3, r3, r2
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	2164      	movs	r1, #100	; 0x64
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	3332      	adds	r3, #50	; 0x32
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <UART_SetConfig+0x2d4>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	f003 0207 	and.w	r2, r3, #7
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4422      	add	r2, r4
 8003b12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b14:	e106      	b.n	8003d24 <UART_SetConfig+0x4d8>
 8003b16:	bf00      	nop
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	40011400 	.word	0x40011400
 8003b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b36:	4642      	mov	r2, r8
 8003b38:	464b      	mov	r3, r9
 8003b3a:	1891      	adds	r1, r2, r2
 8003b3c:	6239      	str	r1, [r7, #32]
 8003b3e:	415b      	adcs	r3, r3
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b46:	4641      	mov	r1, r8
 8003b48:	1854      	adds	r4, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb43 0501 	adc.w	r5, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	00eb      	lsls	r3, r5, #3
 8003b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5e:	00e2      	lsls	r2, r4, #3
 8003b60:	4614      	mov	r4, r2
 8003b62:	461d      	mov	r5, r3
 8003b64:	4643      	mov	r3, r8
 8003b66:	18e3      	adds	r3, r4, r3
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	eb45 0303 	adc.w	r3, r5, r3
 8003b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b92:	4629      	mov	r1, r5
 8003b94:	008b      	lsls	r3, r1, #2
 8003b96:	4621      	mov	r1, r4
 8003b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	008a      	lsls	r2, r1, #2
 8003ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ba4:	f7fc fe72 	bl	800088c <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4b60      	ldr	r3, [pc, #384]	; (8003d30 <UART_SetConfig+0x4e4>)
 8003bae:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	011c      	lsls	r4, r3, #4
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	1891      	adds	r1, r2, r2
 8003bce:	61b9      	str	r1, [r7, #24]
 8003bd0:	415b      	adcs	r3, r3
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd8:	4641      	mov	r1, r8
 8003bda:	1851      	adds	r1, r2, r1
 8003bdc:	6139      	str	r1, [r7, #16]
 8003bde:	4649      	mov	r1, r9
 8003be0:	414b      	adcs	r3, r1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	00cb      	lsls	r3, r1, #3
 8003bf4:	4651      	mov	r1, sl
 8003bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	00ca      	lsls	r2, r1, #3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	4642      	mov	r2, r8
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	460a      	mov	r2, r1
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c30:	4649      	mov	r1, r9
 8003c32:	008b      	lsls	r3, r1, #2
 8003c34:	4641      	mov	r1, r8
 8003c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	008a      	lsls	r2, r1, #2
 8003c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c42:	f7fc fe23 	bl	800088c <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <UART_SetConfig+0x4e4>)
 8003c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2264      	movs	r2, #100	; 0x64
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	1acb      	subs	r3, r1, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a33      	ldr	r2, [pc, #204]	; (8003d30 <UART_SetConfig+0x4e4>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c6c:	441c      	add	r4, r3
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	673b      	str	r3, [r7, #112]	; 0x70
 8003c76:	677a      	str	r2, [r7, #116]	; 0x74
 8003c78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	1891      	adds	r1, r2, r2
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	415b      	adcs	r3, r3
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	1851      	adds	r1, r2, r1
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	4649      	mov	r1, r9
 8003c94:	414b      	adcs	r3, r1
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	00cb      	lsls	r3, r1, #3
 8003ca8:	4651      	mov	r1, sl
 8003caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cae:	4651      	mov	r1, sl
 8003cb0:	00ca      	lsls	r2, r1, #3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4642      	mov	r2, r8
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	eb42 0303 	adc.w	r3, r2, r3
 8003cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd2:	667a      	str	r2, [r7, #100]	; 0x64
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cea:	4641      	mov	r1, r8
 8003cec:	008a      	lsls	r2, r1, #2
 8003cee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cf2:	f7fc fdcb 	bl	800088c <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <UART_SetConfig+0x4e4>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	3332      	adds	r3, #50	; 0x32
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <UART_SetConfig+0x4e4>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4422      	add	r2, r4
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d30:	51eb851f 	.word	0x51eb851f

08003d34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d38:	4904      	ldr	r1, [pc, #16]	; (8003d4c <MX_FATFS_Init+0x18>)
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_FATFS_Init+0x1c>)
 8003d3c:	f003 f9ca 	bl	80070d4 <FATFS_LinkDriver>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <MX_FATFS_Init+0x20>)
 8003d46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000150 	.word	0x20000150
 8003d50:	20000010 	.word	0x20000010
 8003d54:	2000014c 	.word	0x2000014c

08003d58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd f8bf 	bl	8000ef8 <SD_disk_initialize>
 8003d7a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd f997 	bl	80010c4 <SD_disk_status>
 8003d96:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003db0:	7bf8      	ldrb	r0, [r7, #15]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	f7fd f99a 	bl	80010f0 <SD_disk_read>
 8003dbc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003dd6:	7bf8      	ldrb	r0, [r7, #15]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	f7fd f9f1 	bl	80011c4 <SD_disk_write>
 8003de2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	603a      	str	r2, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003dfc:	79b9      	ldrb	r1, [r7, #6]
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fa62 	bl	80012cc <SD_disk_ioctl>
 8003e08:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <disk_status+0x30>)
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	4905      	ldr	r1, [pc, #20]	; (8003e44 <disk_status+0x30>)
 8003e2e:	440a      	add	r2, r1
 8003e30:	7a12      	ldrb	r2, [r2, #8]
 8003e32:	4610      	mov	r0, r2
 8003e34:	4798      	blx	r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	2000037c 	.word	0x2000037c

08003e48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <disk_initialize+0x4c>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d114      	bne.n	8003e8a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <disk_initialize+0x4c>)
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	79fa      	ldrb	r2, [r7, #7]
 8003e6e:	4909      	ldr	r1, [pc, #36]	; (8003e94 <disk_initialize+0x4c>)
 8003e70:	440a      	add	r2, r1
 8003e72:	7a12      	ldrb	r2, [r2, #8]
 8003e74:	4610      	mov	r0, r2
 8003e76:	4798      	blx	r3
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <disk_initialize+0x4c>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000037c 	.word	0x2000037c

08003e98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <disk_read+0x3c>)
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	689c      	ldr	r4, [r3, #8]
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <disk_read+0x3c>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	7a18      	ldrb	r0, [r3, #8]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	47a0      	blx	r4
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000037c 	.word	0x2000037c

08003ed8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <disk_write+0x3c>)
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68dc      	ldr	r4, [r3, #12]
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <disk_write+0x3c>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	7a18      	ldrb	r0, [r3, #8]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	47a0      	blx	r4
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd90      	pop	{r4, r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000037c 	.word	0x2000037c

08003f18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	603a      	str	r2, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
 8003f24:	460b      	mov	r3, r1
 8003f26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <disk_ioctl+0x38>)
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	79fa      	ldrb	r2, [r7, #7]
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <disk_ioctl+0x38>)
 8003f38:	440a      	add	r2, r1
 8003f3a:	7a10      	ldrb	r0, [r2, #8]
 8003f3c:	79b9      	ldrb	r1, [r7, #6]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4798      	blx	r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2000037c 	.word	0x2000037c

08003f54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f64:	89fb      	ldrh	r3, [r7, #14]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	b21a      	sxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f76:	89fb      	ldrh	r3, [r7, #14]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3303      	adds	r3, #3
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	3202      	adds	r2, #2
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	3201      	adds	r2, #1
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	1c53      	adds	r3, r2, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	6179      	str	r1, [r7, #20]
 800407e:	7812      	ldrb	r2, [r2, #0]
 8004080:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3b01      	subs	r3, #1
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f1      	bne.n	8004072 <mem_cpy+0x1a>
	}
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800409a:	b480      	push	{r7}
 800409c:	b087      	sub	sp, #28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	617a      	str	r2, [r7, #20]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f3      	bne.n	80040aa <mem_set+0x10>
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	61ba      	str	r2, [r7, #24]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	1acb      	subs	r3, r1, r3
 80040fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3b01      	subs	r3, #1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <mem_cmp+0x40>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0eb      	beq.n	80040e8 <mem_cmp+0x18>

	return r;
 8004110:	697b      	ldr	r3, [r7, #20]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004128:	e002      	b.n	8004130 <chk_chr+0x12>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3301      	adds	r3, #1
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <chk_chr+0x26>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	4293      	cmp	r3, r2
 8004142:	d1f2      	bne.n	800412a <chk_chr+0xc>
	return *str;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	781b      	ldrb	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e029      	b.n	80041bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004168:	4a27      	ldr	r2, [pc, #156]	; (8004208 <chk_lock+0xb4>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4413      	add	r3, r2
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01d      	beq.n	80041b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <chk_lock+0xb4>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d116      	bne.n	80041b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <chk_lock+0xb4>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004198:	429a      	cmp	r2, r3
 800419a:	d10c      	bne.n	80041b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800419c:	4a1a      	ldr	r2, [pc, #104]	; (8004208 <chk_lock+0xb4>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	4413      	add	r3, r2
 80041a4:	3308      	adds	r3, #8
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d102      	bne.n	80041b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041b0:	e007      	b.n	80041c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d9d2      	bls.n	8004168 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d109      	bne.n	80041dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <chk_lock+0x80>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d101      	bne.n	80041d8 <chk_lock+0x84>
 80041d4:	2300      	movs	r3, #0
 80041d6:	e010      	b.n	80041fa <chk_lock+0xa6>
 80041d8:	2312      	movs	r3, #18
 80041da:	e00e      	b.n	80041fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d108      	bne.n	80041f4 <chk_lock+0xa0>
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <chk_lock+0xb4>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	4413      	add	r3, r2
 80041ea:	330c      	adds	r3, #12
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d101      	bne.n	80041f8 <chk_lock+0xa4>
 80041f4:	2310      	movs	r3, #16
 80041f6:	e000      	b.n	80041fa <chk_lock+0xa6>
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2000015c 	.word	0x2000015c

0800420c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e002      	b.n	800421e <enq_lock+0x12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3301      	adds	r3, #1
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d806      	bhi.n	8004232 <enq_lock+0x26>
 8004224:	4a09      	ldr	r2, [pc, #36]	; (800424c <enq_lock+0x40>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4413      	add	r3, r2
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f2      	bne.n	8004218 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000015c 	.word	0x2000015c

08004250 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e01f      	b.n	80042a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004260:	4a41      	ldr	r2, [pc, #260]	; (8004368 <inc_lock+0x118>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d113      	bne.n	800429a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004272:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <inc_lock+0x118>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004282:	429a      	cmp	r2, r3
 8004284:	d109      	bne.n	800429a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <inc_lock+0x118>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	3308      	adds	r3, #8
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004296:	429a      	cmp	r2, r3
 8004298:	d006      	beq.n	80042a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d9dc      	bls.n	8004260 <inc_lock+0x10>
 80042a6:	e000      	b.n	80042aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d132      	bne.n	8004316 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e002      	b.n	80042bc <inc_lock+0x6c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d806      	bhi.n	80042d0 <inc_lock+0x80>
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <inc_lock+0x118>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f2      	bne.n	80042b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d101      	bne.n	80042da <inc_lock+0x8a>
 80042d6:	2300      	movs	r3, #0
 80042d8:	e040      	b.n	800435c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4922      	ldr	r1, [pc, #136]	; (8004368 <inc_lock+0x118>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	440b      	add	r3, r1
 80042e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	491e      	ldr	r1, [pc, #120]	; (8004368 <inc_lock+0x118>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	440b      	add	r3, r1
 80042f4:	3304      	adds	r3, #4
 80042f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	491a      	ldr	r1, [pc, #104]	; (8004368 <inc_lock+0x118>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	440b      	add	r3, r1
 8004304:	3308      	adds	r3, #8
 8004306:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <inc_lock+0x118>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4413      	add	r3, r2
 8004310:	330c      	adds	r3, #12
 8004312:	2200      	movs	r2, #0
 8004314:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <inc_lock+0xe0>
 800431c:	4a12      	ldr	r2, [pc, #72]	; (8004368 <inc_lock+0x118>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	4413      	add	r3, r2
 8004324:	330c      	adds	r3, #12
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <inc_lock+0xe0>
 800432c:	2300      	movs	r3, #0
 800432e:	e015      	b.n	800435c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <inc_lock+0xf8>
 8004336:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <inc_lock+0x118>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4413      	add	r3, r2
 800433e:	330c      	adds	r3, #12
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	e001      	b.n	800434c <inc_lock+0xfc>
 8004348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800434c:	4906      	ldr	r1, [pc, #24]	; (8004368 <inc_lock+0x118>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	440b      	add	r3, r1
 8004354:	330c      	adds	r3, #12
 8004356:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3301      	adds	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	2000015c 	.word	0x2000015c

0800436c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d825      	bhi.n	80043cc <dec_lock+0x60>
		n = Files[i].ctr;
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <dec_lock+0x74>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	330c      	adds	r3, #12
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d101      	bne.n	800439a <dec_lock+0x2e>
 8004396:	2300      	movs	r3, #0
 8004398:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <dec_lock+0x3a>
 80043a0:	89fb      	ldrh	r3, [r7, #14]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043a6:	4a0e      	ldr	r2, [pc, #56]	; (80043e0 <dec_lock+0x74>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	330c      	adds	r3, #12
 80043b0:	89fa      	ldrh	r2, [r7, #14]
 80043b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043b4:	89fb      	ldrh	r3, [r7, #14]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <dec_lock+0x5a>
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <dec_lock+0x74>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	737b      	strb	r3, [r7, #13]
 80043ca:	e001      	b.n	80043d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043cc:	2302      	movs	r3, #2
 80043ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000015c 	.word	0x2000015c

080043e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e010      	b.n	8004414 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043f2:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <clear_lock+0x44>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d105      	bne.n	800440e <clear_lock+0x2a>
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <clear_lock+0x44>)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d9eb      	bls.n	80043f2 <clear_lock+0xe>
	}
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	2000015c 	.word	0x2000015c

0800442c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	78db      	ldrb	r3, [r3, #3]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d034      	beq.n	80044aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7858      	ldrb	r0, [r3, #1]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004450:	2301      	movs	r3, #1
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f7ff fd40 	bl	8003ed8 <disk_write>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <sync_window+0x38>
			res = FR_DISK_ERR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	e022      	b.n	80044aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	429a      	cmp	r2, r3
 8004478:	d217      	bcs.n	80044aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	789b      	ldrb	r3, [r3, #2]
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e010      	b.n	80044a4 <sync_window+0x78>
					wsect += fs->fsize;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4413      	add	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7858      	ldrb	r0, [r3, #1]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004496:	2301      	movs	r3, #1
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	f7ff fd1d 	bl	8003ed8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d8eb      	bhi.n	8004482 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d01b      	beq.n	8004504 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffad 	bl	800442c <sync_window>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7858      	ldrb	r0, [r3, #1]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044e6:	2301      	movs	r3, #1
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	f7ff fcd5 	bl	8003e98 <disk_read>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
 80044f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff87 	bl	800442c <sync_window>
 800451e:	4603      	mov	r3, r0
 8004520:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d159      	bne.n	80045dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d149      	bne.n	80045c4 <sync_fs+0xb4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d145      	bne.n	80045c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	899b      	ldrh	r3, [r3, #12]
 8004542:	461a      	mov	r2, r3
 8004544:	2100      	movs	r1, #0
 8004546:	f7ff fda8 	bl	800409a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3338      	adds	r3, #56	; 0x38
 800454e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004552:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd37 	bl	8003fca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3338      	adds	r3, #56	; 0x38
 8004560:	4921      	ldr	r1, [pc, #132]	; (80045e8 <sync_fs+0xd8>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fd4c 	bl	8004000 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3338      	adds	r3, #56	; 0x38
 800456c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004570:	491e      	ldr	r1, [pc, #120]	; (80045ec <sync_fs+0xdc>)
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fd44 	bl	8004000 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3338      	adds	r3, #56	; 0x38
 800457c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7ff fd3a 	bl	8004000 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3338      	adds	r3, #56	; 0x38
 8004590:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7ff fd30 	bl	8004000 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7858      	ldrb	r0, [r3, #1]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b8:	2301      	movs	r3, #1
 80045ba:	f7ff fc8d 	bl	8003ed8 <disk_write>
			fs->fsi_flag = 0;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fca3 	bl	8003f18 <disk_ioctl>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <sync_fs+0xcc>
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	41615252 	.word	0x41615252
 80045ec:	61417272 	.word	0x61417272

080045f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	3b02      	subs	r3, #2
 80045fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	3b02      	subs	r3, #2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d301      	bcc.n	8004610 <clust2sect+0x20>
 800460c:	2300      	movs	r3, #0
 800460e:	e008      	b.n	8004622 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	895b      	ldrh	r3, [r3, #10]
 8004614:	461a      	mov	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	fb03 f202 	mul.w	r2, r3, r2
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4413      	add	r3, r2
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d904      	bls.n	800464e <get_fat+0x20>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <get_fat+0x26>
		val = 1;	/* Internal error */
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e0bb      	b.n	80047cc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b03      	cmp	r3, #3
 8004660:	f000 8083 	beq.w	800476a <get_fat+0x13c>
 8004664:	2b03      	cmp	r3, #3
 8004666:	f300 80a7 	bgt.w	80047b8 <get_fat+0x18a>
 800466a:	2b01      	cmp	r3, #1
 800466c:	d002      	beq.n	8004674 <get_fat+0x46>
 800466e:	2b02      	cmp	r3, #2
 8004670:	d056      	beq.n	8004720 <get_fat+0xf2>
 8004672:	e0a1      	b.n	80047b8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	899b      	ldrh	r3, [r3, #12]
 800468a:	4619      	mov	r1, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004692:	4413      	add	r3, r2
 8004694:	4619      	mov	r1, r3
 8004696:	6938      	ldr	r0, [r7, #16]
 8004698:	f7ff ff0c 	bl	80044b4 <move_window>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 808d 	bne.w	80047be <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	60fa      	str	r2, [r7, #12]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	8992      	ldrh	r2, [r2, #12]
 80046ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80046b2:	fb01 f202 	mul.w	r2, r1, r2
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	899b      	ldrh	r3, [r3, #12]
 80046ca:	4619      	mov	r1, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80046d2:	4413      	add	r3, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	6938      	ldr	r0, [r7, #16]
 80046d8:	f7ff feec 	bl	80044b4 <move_window>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d16f      	bne.n	80047c2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	899b      	ldrh	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ee:	fb01 f202 	mul.w	r2, r1, r2
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <get_fat+0xe8>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	e002      	b.n	800471c <get_fat+0xee>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471c:	617b      	str	r3, [r7, #20]
			break;
 800471e:	e055      	b.n	80047cc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	899b      	ldrh	r3, [r3, #12]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	fbb3 f3f1 	udiv	r3, r3, r1
 8004734:	4413      	add	r3, r2
 8004736:	4619      	mov	r1, r3
 8004738:	6938      	ldr	r0, [r7, #16]
 800473a:	f7ff febb 	bl	80044b4 <move_window>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d140      	bne.n	80047c6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	8992      	ldrh	r2, [r2, #12]
 8004752:	fbb3 f0f2 	udiv	r0, r3, r2
 8004756:	fb00 f202 	mul.w	r2, r0, r2
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	440b      	add	r3, r1
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fbf8 	bl	8003f54 <ld_word>
 8004764:	4603      	mov	r3, r0
 8004766:	617b      	str	r3, [r7, #20]
			break;
 8004768:	e030      	b.n	80047cc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	899b      	ldrh	r3, [r3, #12]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	b29b      	uxth	r3, r3
 8004776:	4619      	mov	r1, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	fbb3 f3f1 	udiv	r3, r3, r1
 800477e:	4413      	add	r3, r2
 8004780:	4619      	mov	r1, r3
 8004782:	6938      	ldr	r0, [r7, #16]
 8004784:	f7ff fe96 	bl	80044b4 <move_window>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11d      	bne.n	80047ca <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	8992      	ldrh	r2, [r2, #12]
 800479c:	fbb3 f0f2 	udiv	r0, r3, r2
 80047a0:	fb00 f202 	mul.w	r2, r0, r2
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fbeb 	bl	8003f84 <ld_dword>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047b4:	617b      	str	r3, [r7, #20]
			break;
 80047b6:	e009      	b.n	80047cc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e006      	b.n	80047cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047be:	bf00      	nop
 80047c0:	e004      	b.n	80047cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047ca:	bf00      	nop
		}
	}

	return val;
 80047cc:	697b      	ldr	r3, [r7, #20]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047d6:	b590      	push	{r4, r7, lr}
 80047d8:	b089      	sub	sp, #36	; 0x24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f240 8109 	bls.w	8004a00 <put_fat+0x22a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f080 8103 	bcs.w	8004a00 <put_fat+0x22a>
		switch (fs->fs_type) {
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	f000 80b6 	beq.w	8004970 <put_fat+0x19a>
 8004804:	2b03      	cmp	r3, #3
 8004806:	f300 80fb 	bgt.w	8004a00 <put_fat+0x22a>
 800480a:	2b01      	cmp	r3, #1
 800480c:	d003      	beq.n	8004816 <put_fat+0x40>
 800480e:	2b02      	cmp	r3, #2
 8004810:	f000 8083 	beq.w	800491a <put_fat+0x144>
 8004814:	e0f4      	b.n	8004a00 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4413      	add	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	899b      	ldrh	r3, [r3, #12]
 800482c:	4619      	mov	r1, r3
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	fbb3 f3f1 	udiv	r3, r3, r1
 8004834:	4413      	add	r3, r2
 8004836:	4619      	mov	r1, r3
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fe3b 	bl	80044b4 <move_window>
 800483e:	4603      	mov	r3, r0
 8004840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 80d4 	bne.w	80049f2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	61ba      	str	r2, [r7, #24]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	8992      	ldrh	r2, [r2, #12]
 800485a:	fbb3 f0f2 	udiv	r0, r3, r2
 800485e:	fb00 f202 	mul.w	r2, r0, r2
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	440b      	add	r3, r1
 8004866:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <put_fat+0xb8>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b25b      	sxtb	r3, r3
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	b25a      	sxtb	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	b25b      	sxtb	r3, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	b25b      	sxtb	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e001      	b.n	8004892 <put_fat+0xbc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	899b      	ldrh	r3, [r3, #12]
 80048a4:	4619      	mov	r1, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ac:	4413      	add	r3, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fdff 	bl	80044b4 <move_window>
 80048b6:	4603      	mov	r3, r0
 80048b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f040 809a 	bne.w	80049f6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	899b      	ldrh	r3, [r3, #12]
 80048cc:	461a      	mov	r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80048d4:	fb00 f202 	mul.w	r2, r0, r2
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	440b      	add	r3, r1
 80048dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <put_fat+0x11a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e00e      	b.n	800490e <put_fat+0x138>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	f023 030f 	bic.w	r3, r3, #15
 80048fa:	b25a      	sxtb	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b25b      	sxtb	r3, r3
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	b25b      	sxtb	r3, r3
 8004908:	4313      	orrs	r3, r2
 800490a:	b25b      	sxtb	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	70da      	strb	r2, [r3, #3]
			break;
 8004918:	e072      	b.n	8004a00 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	899b      	ldrh	r3, [r3, #12]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	fbb3 f3f1 	udiv	r3, r3, r1
 800492e:	4413      	add	r3, r2
 8004930:	4619      	mov	r1, r3
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fdbe 	bl	80044b4 <move_window>
 8004938:	4603      	mov	r3, r0
 800493a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d15b      	bne.n	80049fa <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	8992      	ldrh	r2, [r2, #12]
 8004950:	fbb3 f0f2 	udiv	r0, r3, r2
 8004954:	fb00 f202 	mul.w	r2, r0, r2
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	440b      	add	r3, r1
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	b292      	uxth	r2, r2
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fb31 	bl	8003fca <st_word>
			fs->wflag = 1;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	70da      	strb	r2, [r3, #3]
			break;
 800496e:	e047      	b.n	8004a00 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	899b      	ldrh	r3, [r3, #12]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	b29b      	uxth	r3, r3
 800497c:	4619      	mov	r1, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	fbb3 f3f1 	udiv	r3, r3, r1
 8004984:	4413      	add	r3, r2
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fd93 	bl	80044b4 <move_window>
 800498e:	4603      	mov	r3, r0
 8004990:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004992:	7ffb      	ldrb	r3, [r7, #31]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d132      	bne.n	80049fe <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	8992      	ldrh	r2, [r2, #12]
 80049ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80049b0:	fb00 f202 	mul.w	r2, r0, r2
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	440b      	add	r3, r1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fae3 	bl	8003f84 <ld_dword>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049c4:	4323      	orrs	r3, r4
 80049c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	8992      	ldrh	r2, [r2, #12]
 80049d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80049da:	fb00 f202 	mul.w	r2, r0, r2
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fb0b 	bl	8004000 <st_dword>
			fs->wflag = 1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	70da      	strb	r2, [r3, #3]
			break;
 80049f0:	e006      	b.n	8004a00 <put_fat+0x22a>
			if (res != FR_OK) break;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <put_fat+0x22a>
			if (res != FR_OK) break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <put_fat+0x22a>
			if (res != FR_OK) break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <put_fat+0x22a>
			if (res != FR_OK) break;
 80049fe:	bf00      	nop
		}
	}
	return res;
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}

08004a0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d904      	bls.n	8004a30 <remove_chain+0x26>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d301      	bcc.n	8004a34 <remove_chain+0x2a>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e04b      	b.n	8004acc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	69b8      	ldr	r0, [r7, #24]
 8004a42:	f7ff fec8 	bl	80047d6 <put_fat>
 8004a46:	4603      	mov	r3, r0
 8004a48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <remove_chain+0x4a>
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	e03b      	b.n	8004acc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fde9 	bl	800462e <get_fat>
 8004a5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d031      	beq.n	8004ac8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <remove_chain+0x64>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e02e      	b.n	8004acc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d101      	bne.n	8004a7a <remove_chain+0x70>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e028      	b.n	8004acc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f7ff fea9 	bl	80047d6 <put_fat>
 8004a84:	4603      	mov	r3, r0
 8004a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <remove_chain+0x88>
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	e01c      	b.n	8004acc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	3b02      	subs	r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20b      	bcs.n	8004ab8 <remove_chain+0xae>
			fs->free_clst++;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3c6      	bcc.n	8004a54 <remove_chain+0x4a>
 8004ac6:	e000      	b.n	8004aca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ac8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <create_chain+0x2c>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d31b      	bcc.n	8004b38 <create_chain+0x64>
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e018      	b.n	8004b38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd90 	bl	800462e <get_fat>
 8004b0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d801      	bhi.n	8004b1a <create_chain+0x46>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e070      	b.n	8004bfc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d101      	bne.n	8004b26 <create_chain+0x52>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	e06a      	b.n	8004bfc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d201      	bcs.n	8004b34 <create_chain+0x60>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	e063      	b.n	8004bfc <create_chain+0x128>
		scl = clst;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <create_chain+0x88>
				ncl = 2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d901      	bls.n	8004b5c <create_chain+0x88>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e04f      	b.n	8004bfc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fd65 	bl	800462e <get_fat>
 8004b64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d003      	beq.n	8004b7a <create_chain+0xa6>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d101      	bne.n	8004b7e <create_chain+0xaa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e03e      	b.n	8004bfc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1da      	bne.n	8004b3c <create_chain+0x68>
 8004b86:	2300      	movs	r3, #0
 8004b88:	e038      	b.n	8004bfc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	f7ff fe1f 	bl	80047d6 <put_fat>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <create_chain+0xe2>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6938      	ldr	r0, [r7, #16]
 8004bae:	f7ff fe12 	bl	80047d6 <put_fat>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d116      	bne.n	8004bea <create_chain+0x116>
		fs->last_clst = ncl;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d804      	bhi.n	8004bda <create_chain+0x106>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	711a      	strb	r2, [r3, #4]
 8004be8:	e007      	b.n	8004bfa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <create_chain+0x122>
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	e000      	b.n	8004bf8 <create_chain+0x124>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bfa:	69fb      	ldr	r3, [r7, #28]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	3304      	adds	r3, #4
 8004c1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	899b      	ldrh	r3, [r3, #12]
 8004c20:	461a      	mov	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	8952      	ldrh	r2, [r2, #10]
 8004c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	613a      	str	r2, [r7, #16]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <clmt_clust+0x42>
 8004c42:	2300      	movs	r3, #0
 8004c44:	e010      	b.n	8004c68 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d307      	bcc.n	8004c5e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c5c:	e7e9      	b.n	8004c32 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d204      	bcs.n	8004c96 <dir_sdi+0x22>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e071      	b.n	8004d7e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <dir_sdi+0x46>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d902      	bls.n	8004cba <dir_sdi+0x46>
		clst = fs->dirbase;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	8912      	ldrh	r2, [r2, #8]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d301      	bcc.n	8004cd0 <dir_sdi+0x5c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e056      	b.n	8004d7e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61da      	str	r2, [r3, #28]
 8004cd8:	e02d      	b.n	8004d36 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	895b      	ldrh	r3, [r3, #10]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	899b      	ldrh	r3, [r3, #12]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cea:	e019      	b.n	8004d20 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fc9c 	bl	800462e <get_fat>
 8004cf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d101      	bne.n	8004d04 <dir_sdi+0x90>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e03c      	b.n	8004d7e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d904      	bls.n	8004d14 <dir_sdi+0xa0>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d301      	bcc.n	8004d18 <dir_sdi+0xa4>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e032      	b.n	8004d7e <dir_sdi+0x10a>
			ofs -= csz;
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d2e1      	bcs.n	8004cec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7ff fc60 	bl	80045f0 <clust2sect>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <dir_sdi+0xd4>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e01a      	b.n	8004d7e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	899b      	ldrh	r3, [r3, #12]
 8004d50:	4619      	mov	r1, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d70:	fb00 f202 	mul.w	r2, r0, r2
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	18ca      	adds	r2, r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <dir_next+0x28>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d301      	bcc.n	8004db2 <dir_next+0x2c>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e0bb      	b.n	8004f2a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	899b      	ldrh	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dbe:	fb01 f202 	mul.w	r2, r1, r2
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 809d 	bne.w	8004f04 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	8912      	ldrh	r2, [r2, #8]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f0c0 808d 	bcc.w	8004f04 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	2304      	movs	r3, #4
 8004df2:	e09a      	b.n	8004f2a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	899b      	ldrh	r3, [r3, #12]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	8952      	ldrh	r2, [r2, #10]
 8004e04:	3a01      	subs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d17b      	bne.n	8004f04 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7ff fc0a 	bl	800462e <get_fat>
 8004e1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d801      	bhi.n	8004e26 <dir_next+0xa0>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e081      	b.n	8004f2a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d101      	bne.n	8004e32 <dir_next+0xac>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07b      	b.n	8004f2a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d359      	bcc.n	8004ef0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e06e      	b.n	8004f2a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff fe3d 	bl	8004ad4 <create_chain>
 8004e5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <dir_next+0xe0>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e061      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <dir_next+0xea>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e05c      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d101      	bne.n	8004e7c <dir_next+0xf6>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e056      	b.n	8004f2a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fad5 	bl	800442c <sync_window>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <dir_next+0x106>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04e      	b.n	8004f2a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	899b      	ldrh	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f7ff f8fe 	bl	800409a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fba3 	bl	80045f0 <clust2sect>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb0:	e012      	b.n	8004ed8 <dir_next+0x152>
						fs->wflag = 1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fab7 	bl	800442c <sync_window>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <dir_next+0x142>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e030      	b.n	8004f2a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	895b      	ldrh	r3, [r3, #10]
 8004edc:	461a      	mov	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d3e6      	bcc.n	8004eb2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fb79 	bl	80045f0 <clust2sect>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	899b      	ldrh	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f1c:	fb00 f202 	mul.w	r2, r0, r2
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	18ca      	adds	r2, r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fe95 	bl	8004c74 <dir_sdi>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12b      	bne.n	8004fac <dir_alloc+0x7a>
		n = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff faa8 	bl	80044b4 <move_window>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11d      	bne.n	8004faa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2be5      	cmp	r3, #229	; 0xe5
 8004f76:	d004      	beq.n	8004f82 <dir_alloc+0x50>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <dir_alloc+0x64>
 8004f90:	e00c      	b.n	8004fac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f96:	2101      	movs	r1, #1
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fef4 	bl	8004d86 <dir_next>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0d7      	beq.n	8004f58 <dir_alloc+0x26>
 8004fa8:	e000      	b.n	8004fac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004faa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d101      	bne.n	8004fb6 <dir_alloc+0x84>
 8004fb2:	2307      	movs	r3, #7
 8004fb4:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	331a      	adds	r3, #26
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffc0 	bl	8003f54 <ld_word>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d109      	bne.n	8004ff4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe ffb5 	bl	8003f54 <ld_word>
 8004fea:	4603      	mov	r3, r0
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	331a      	adds	r3, #26
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	b292      	uxth	r2, r2
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe ffd8 	bl	8003fca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d109      	bne.n	8005036 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f103 0214 	add.w	r2, r3, #20
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	b29b      	uxth	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe ffca 	bl	8003fca <st_word>
	}
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	331a      	adds	r3, #26
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe ff80 	bl	8003f54 <ld_word>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <cmp_lfn+0x1e>
 800505a:	2300      	movs	r3, #0
 800505c:	e059      	b.n	8005112 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005074:	2301      	movs	r3, #1
 8005076:	81fb      	strh	r3, [r7, #14]
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e033      	b.n	80050e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <cmp_lfn+0xdc>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4413      	add	r3, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe ff61 	bl	8003f54 <ld_word>
 8005092:	4603      	mov	r3, r0
 8005094:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01a      	beq.n	80050d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2bfe      	cmp	r3, #254	; 0xfe
 80050a0:	d812      	bhi.n	80050c8 <cmp_lfn+0x88>
 80050a2:	89bb      	ldrh	r3, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 f861 	bl	800716c <ff_wtoupper>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461c      	mov	r4, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	617a      	str	r2, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f002 f855 	bl	800716c <ff_wtoupper>
 80050c2:	4603      	mov	r3, r0
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d001      	beq.n	80050cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050c8:	2300      	movs	r3, #0
 80050ca:	e022      	b.n	8005112 <cmp_lfn+0xd2>
			}
			wc = uc;
 80050cc:	89bb      	ldrh	r3, [r7, #12]
 80050ce:	81fb      	strh	r3, [r7, #14]
 80050d0:	e006      	b.n	80050e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050d2:	89bb      	ldrh	r3, [r7, #12]
 80050d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d8:	4293      	cmp	r3, r2
 80050da:	d001      	beq.n	80050e0 <cmp_lfn+0xa0>
 80050dc:	2300      	movs	r3, #0
 80050de:	e018      	b.n	8005112 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d9c8      	bls.n	800507e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <cmp_lfn+0xd0>
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <cmp_lfn+0xd0>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <cmp_lfn+0xd0>
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005110:	2301      	movs	r3, #1
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop
 800511c:	080083d4 	.word	0x080083d4

08005120 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	4613      	mov	r3, r2
 8005134:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	330d      	adds	r3, #13
 800513a:	79ba      	ldrb	r2, [r7, #6]
 800513c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	330b      	adds	r3, #11
 8005142:	220f      	movs	r2, #15
 8005144:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	330c      	adds	r3, #12
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	331a      	adds	r3, #26
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe ff38 	bl	8003fca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	82fb      	strh	r3, [r7, #22]
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005172:	8afb      	ldrh	r3, [r7, #22]
 8005174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <put_lfn+0x6c>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <put_lfn+0xcc>)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	8afa      	ldrh	r2, [r7, #22]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff13 	bl	8003fca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80051a4:	8afb      	ldrh	r3, [r7, #22]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <put_lfn+0x90>
 80051aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d9da      	bls.n	8005172 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d006      	beq.n	80051d4 <put_lfn+0xb4>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <put_lfn+0xbc>
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	79fa      	ldrb	r2, [r7, #7]
 80051e0:	701a      	strb	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	080083d4 	.word	0x080083d4

080051f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80051fe:	220b      	movs	r2, #11
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7fe ff28 	bl	8004058 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d92b      	bls.n	8005266 <gen_numname+0x76>
		sr = seq;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005212:	e022      	b.n	800525a <gen_numname+0x6a>
			wc = *lfn++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	e017      	b.n	8005254 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005a      	lsls	r2, r3, #1
 8005228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <gen_numname+0x5e>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005248:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800524c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3301      	adds	r3, #1
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d9e4      	bls.n	8005224 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1d8      	bne.n	8005214 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005266:	2307      	movs	r3, #7
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2db      	uxtb	r3, r3
 8005274:	3330      	adds	r3, #48	; 0x30
 8005276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800527a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800527e:	2b39      	cmp	r3, #57	; 0x39
 8005280:	d904      	bls.n	800528c <gen_numname+0x9c>
 8005282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005286:	3307      	adds	r3, #7
 8005288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	1e5a      	subs	r2, r3, #1
 8005290:	62ba      	str	r2, [r7, #40]	; 0x28
 8005292:	3330      	adds	r3, #48	; 0x30
 8005294:	443b      	add	r3, r7
 8005296:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800529a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1df      	bne.n	800526a <gen_numname+0x7a>
	ns[i] = '~';
 80052aa:	f107 0214 	add.w	r2, r7, #20
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	227e      	movs	r2, #126	; 0x7e
 80052b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e002      	b.n	80052c2 <gen_numname+0xd2>
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	3301      	adds	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d205      	bcs.n	80052d6 <gen_numname+0xe6>
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d1f2      	bne.n	80052bc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	2b07      	cmp	r3, #7
 80052da:	d807      	bhi.n	80052ec <gen_numname+0xfc>
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80052e2:	3330      	adds	r3, #48	; 0x30
 80052e4:	443b      	add	r3, r7
 80052e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052ea:	e000      	b.n	80052ee <gen_numname+0xfe>
 80052ec:	2120      	movs	r1, #32
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	627a      	str	r2, [r7, #36]	; 0x24
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	460a      	mov	r2, r1
 80052fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b07      	cmp	r3, #7
 8005300:	d9e9      	bls.n	80052d6 <gen_numname+0xe6>
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3730      	adds	r7, #48	; 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005318:	230b      	movs	r3, #11
 800531a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	0852      	lsrs	r2, r2, #1
 8005322:	01db      	lsls	r3, r3, #7
 8005324:	4313      	orrs	r3, r2
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	6079      	str	r1, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4413      	add	r3, r2
 8005332:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3b01      	subs	r3, #1
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ed      	bne.n	800531c <sum_sfn+0x10>
	return sum;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800535c:	2100      	movs	r1, #0
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fc88 	bl	8004c74 <dir_sdi>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <dir_find+0x24>
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	e0a9      	b.n	80054c6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	753b      	strb	r3, [r7, #20]
 8005376:	7d3b      	ldrb	r3, [r7, #20]
 8005378:	757b      	strb	r3, [r7, #21]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4619      	mov	r1, r3
 8005388:	6938      	ldr	r0, [r7, #16]
 800538a:	f7ff f893 	bl	80044b4 <move_window>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 8090 	bne.w	80054ba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053a2:	7dbb      	ldrb	r3, [r7, #22]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <dir_find+0x60>
 80053a8:	2304      	movs	r3, #4
 80053aa:	75fb      	strb	r3, [r7, #23]
 80053ac:	e08a      	b.n	80054c4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	330b      	adds	r3, #11
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053c2:	7dbb      	ldrb	r3, [r7, #22]
 80053c4:	2be5      	cmp	r3, #229	; 0xe5
 80053c6:	d007      	beq.n	80053d8 <dir_find+0x8a>
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <dir_find+0x98>
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b0f      	cmp	r3, #15
 80053d6:	d006      	beq.n	80053e6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053d8:	23ff      	movs	r3, #255	; 0xff
 80053da:	757b      	strb	r3, [r7, #21]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
 80053e4:	e05e      	b.n	80054a4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d136      	bne.n	800545a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d154      	bne.n	80054a4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	7b5b      	ldrb	r3, [r3, #13]
 800540a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800540c:	7dbb      	ldrb	r3, [r7, #22]
 800540e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005412:	75bb      	strb	r3, [r7, #22]
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005420:	7dba      	ldrb	r2, [r7, #22]
 8005422:	7d7b      	ldrb	r3, [r7, #21]
 8005424:	429a      	cmp	r2, r3
 8005426:	d115      	bne.n	8005454 <dir_find+0x106>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	330d      	adds	r3, #13
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	7d3a      	ldrb	r2, [r7, #20]
 8005432:	429a      	cmp	r2, r3
 8005434:	d10e      	bne.n	8005454 <dir_find+0x106>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff fdfd 	bl	8005040 <cmp_lfn>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <dir_find+0x106>
 800544c:	7d7b      	ldrb	r3, [r7, #21]
 800544e:	3b01      	subs	r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e000      	b.n	8005456 <dir_find+0x108>
 8005454:	23ff      	movs	r3, #255	; 0xff
 8005456:	757b      	strb	r3, [r7, #21]
 8005458:	e024      	b.n	80054a4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800545a:	7d7b      	ldrb	r3, [r7, #21]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <dir_find+0x126>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ff51 	bl	800530c <sum_sfn>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	7d3b      	ldrb	r3, [r7, #20]
 8005470:	4293      	cmp	r3, r2
 8005472:	d024      	beq.n	80054be <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <dir_find+0x14a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a18      	ldr	r0, [r3, #32]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3324      	adds	r3, #36	; 0x24
 800548a:	220b      	movs	r2, #11
 800548c:	4619      	mov	r1, r3
 800548e:	f7fe fe1f 	bl	80040d0 <mem_cmp>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005498:	23ff      	movs	r3, #255	; 0xff
 800549a:	757b      	strb	r3, [r7, #21]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fc6d 	bl	8004d86 <dir_next>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f43f af65 	beq.w	8005382 <dir_find+0x34>
 80054b8:	e004      	b.n	80054c4 <dir_find+0x176>
		if (res != FR_OK) break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054c2:	bf00      	nop

	return res;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	; 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <dir_register+0x20>
 80054ec:	2306      	movs	r3, #6
 80054ee:	e0e0      	b.n	80056b2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	e002      	b.n	80054fc <dir_register+0x2c>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f4      	bne.n	80054f6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	220c      	movs	r2, #12
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fd9d 	bl	8004058 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d032      	beq.n	800558e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005530:	2301      	movs	r3, #1
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	e016      	b.n	8005564 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	f107 010c 	add.w	r1, r7, #12
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f7ff fe53 	bl	80051f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff feff 	bl	800534e <dir_find>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	3301      	adds	r3, #1
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b63      	cmp	r3, #99	; 0x63
 8005568:	d9e5      	bls.n	8005536 <dir_register+0x66>
 800556a:	e000      	b.n	800556e <dir_register+0x9e>
			if (res != FR_OK) break;
 800556c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	2b64      	cmp	r3, #100	; 0x64
 8005572:	d101      	bne.n	8005578 <dir_register+0xa8>
 8005574:	2307      	movs	r3, #7
 8005576:	e09c      	b.n	80056b2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800557c:	2b04      	cmp	r3, #4
 800557e:	d002      	beq.n	8005586 <dir_register+0xb6>
 8005580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005584:	e095      	b.n	80056b2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005586:	7dfa      	ldrb	r2, [r7, #23]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <dir_register+0xd8>
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	330c      	adds	r3, #12
 800559c:	4a47      	ldr	r2, [pc, #284]	; (80056bc <dir_register+0x1ec>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	3301      	adds	r3, #1
 80055a6:	e000      	b.n	80055aa <dir_register+0xda>
 80055a8:	2301      	movs	r3, #1
 80055aa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fcbf 	bl	8004f32 <dir_alloc>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80055ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d148      	bne.n	8005654 <dir_register+0x184>
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d042      	beq.n	8005654 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	015b      	lsls	r3, r3, #5
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fb4a 	bl	8004c74 <dir_sdi>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80055e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d132      	bne.n	8005654 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3324      	adds	r3, #36	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fe8a 	bl	800530c <sum_sfn>
 80055f8:	4603      	mov	r3, r0
 80055fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4619      	mov	r1, r3
 8005602:	69f8      	ldr	r0, [r7, #28]
 8005604:	f7fe ff56 	bl	80044b4 <move_window>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800560e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11d      	bne.n	8005652 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	6918      	ldr	r0, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a19      	ldr	r1, [r3, #32]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	7efb      	ldrb	r3, [r7, #27]
 8005624:	f7ff fd7c 	bl	8005120 <put_lfn>
				fs->wflag = 1;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2201      	movs	r2, #1
 800562c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800562e:	2100      	movs	r1, #0
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fba8 	bl	8004d86 <dir_next>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800563c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <dir_register+0x184>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	3b01      	subs	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1d5      	bne.n	80055fc <dir_register+0x12c>
 8005650:	e000      	b.n	8005654 <dir_register+0x184>
				if (res != FR_OK) break;
 8005652:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005658:	2b00      	cmp	r3, #0
 800565a:	d128      	bne.n	80056ae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	4619      	mov	r1, r3
 8005662:	69f8      	ldr	r0, [r7, #28]
 8005664:	f7fe ff26 	bl	80044b4 <move_window>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800566e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11b      	bne.n	80056ae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	2220      	movs	r2, #32
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fd0b 	bl	800409a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a18      	ldr	r0, [r3, #32]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3324      	adds	r3, #36	; 0x24
 800568c:	220b      	movs	r2, #11
 800568e:	4619      	mov	r1, r3
 8005690:	f7fe fce2 	bl	8004058 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	330c      	adds	r3, #12
 80056a0:	f002 0218 	and.w	r2, r2, #24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2201      	movs	r2, #1
 80056ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80056ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3730      	adds	r7, #48	; 0x30
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	4ec4ec4f 	.word	0x4ec4ec4f

080056c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	61ba      	str	r2, [r7, #24]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80056ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f0:	2b1f      	cmp	r3, #31
 80056f2:	d940      	bls.n	8005776 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80056f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f6:	2b2f      	cmp	r3, #47	; 0x2f
 80056f8:	d006      	beq.n	8005708 <create_name+0x48>
 80056fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fc:	2b5c      	cmp	r3, #92	; 0x5c
 80056fe:	d110      	bne.n	8005722 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005700:	e002      	b.n	8005708 <create_name+0x48>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	3301      	adds	r3, #1
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4413      	add	r3, r2
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b2f      	cmp	r3, #47	; 0x2f
 8005712:	d0f6      	beq.n	8005702 <create_name+0x42>
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4413      	add	r3, r2
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b5c      	cmp	r3, #92	; 0x5c
 800571e:	d0f0      	beq.n	8005702 <create_name+0x42>
			break;
 8005720:	e02a      	b.n	8005778 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2bfe      	cmp	r3, #254	; 0xfe
 8005726:	d901      	bls.n	800572c <create_name+0x6c>
 8005728:	2306      	movs	r3, #6
 800572a:	e17d      	b.n	8005a28 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800572c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800572e:	b2db      	uxtb	r3, r3
 8005730:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fcdc 	bl	80070f4 <ff_convert>
 800573c:	4603      	mov	r3, r0
 800573e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <create_name+0x8a>
 8005746:	2306      	movs	r3, #6
 8005748:	e16e      	b.n	8005a28 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800574a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800574c:	2b7f      	cmp	r3, #127	; 0x7f
 800574e:	d809      	bhi.n	8005764 <create_name+0xa4>
 8005750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005752:	4619      	mov	r1, r3
 8005754:	488d      	ldr	r0, [pc, #564]	; (800598c <create_name+0x2cc>)
 8005756:	f7fe fce2 	bl	800411e <chk_chr>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <create_name+0xa4>
 8005760:	2306      	movs	r3, #6
 8005762:	e161      	b.n	8005a28 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	617a      	str	r2, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005772:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005774:	e7b4      	b.n	80056e0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005776:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	441a      	add	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005784:	2b1f      	cmp	r3, #31
 8005786:	d801      	bhi.n	800578c <create_name+0xcc>
 8005788:	2304      	movs	r3, #4
 800578a:	e000      	b.n	800578e <create_name+0xce>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005792:	e011      	b.n	80057b8 <create_name+0xf8>
		w = lfn[di - 1];
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800579a:	3b01      	subs	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80057a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d002      	beq.n	80057b2 <create_name+0xf2>
 80057ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ae:	2b2e      	cmp	r3, #46	; 0x2e
 80057b0:	d106      	bne.n	80057c0 <create_name+0x100>
		di--;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ea      	bne.n	8005794 <create_name+0xd4>
 80057be:	e000      	b.n	80057c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80057c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <create_name+0x118>
 80057d4:	2306      	movs	r3, #6
 80057d6:	e127      	b.n	8005a28 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3324      	adds	r3, #36	; 0x24
 80057dc:	220b      	movs	r2, #11
 80057de:	2120      	movs	r1, #32
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fc5a 	bl	800409a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e002      	b.n	80057f2 <create_name+0x132>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d0f5      	beq.n	80057ec <create_name+0x12c>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2b2e      	cmp	r3, #46	; 0x2e
 800580c:	d0ee      	beq.n	80057ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <create_name+0x168>
 8005814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005818:	f043 0303 	orr.w	r3, r3, #3
 800581c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005820:	e002      	b.n	8005828 <create_name+0x168>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3b01      	subs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <create_name+0x182>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005834:	3b01      	subs	r3, #1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	2b2e      	cmp	r3, #46	; 0x2e
 8005840:	d1ef      	bne.n	8005822 <create_name+0x162>

	i = b = 0; ni = 8;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005848:	2300      	movs	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
 800584c:	2308      	movs	r3, #8
 800584e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	61ba      	str	r2, [r7, #24]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8090 	beq.w	8005988 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800586a:	2b20      	cmp	r3, #32
 800586c:	d006      	beq.n	800587c <create_name+0x1bc>
 800586e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005870:	2b2e      	cmp	r3, #46	; 0x2e
 8005872:	d10a      	bne.n	800588a <create_name+0x1ca>
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d006      	beq.n	800588a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	f043 0303 	orr.w	r3, r3, #3
 8005884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005888:	e07d      	b.n	8005986 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	429a      	cmp	r2, r3
 8005890:	d203      	bcs.n	800589a <create_name+0x1da>
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	429a      	cmp	r2, r3
 8005898:	d123      	bne.n	80058e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b0b      	cmp	r3, #11
 800589e:	d106      	bne.n	80058ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80058a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a4:	f043 0303 	orr.w	r3, r3, #3
 80058a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058ac:	e075      	b.n	800599a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d005      	beq.n	80058c2 <create_name+0x202>
 80058b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ba:	f043 0303 	orr.w	r3, r3, #3
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d866      	bhi.n	8005998 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	2308      	movs	r3, #8
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	230b      	movs	r3, #11
 80058d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80058d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058e0:	e051      	b.n	8005986 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80058e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e4:	2b7f      	cmp	r3, #127	; 0x7f
 80058e6:	d914      	bls.n	8005912 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80058e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fc01 	bl	80070f4 <ff_convert>
 80058f2:	4603      	mov	r3, r0
 80058f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <create_name+0x246>
 80058fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fe:	3b80      	subs	r3, #128	; 0x80
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <create_name+0x2d0>)
 8005902:	5cd3      	ldrb	r3, [r2, r3]
 8005904:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <create_name+0x268>
 8005918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800591a:	4619      	mov	r1, r3
 800591c:	481d      	ldr	r0, [pc, #116]	; (8005994 <create_name+0x2d4>)
 800591e:	f7fe fbfe 	bl	800411e <chk_chr>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005928:	235f      	movs	r3, #95	; 0x5f
 800592a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800592c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005930:	f043 0303 	orr.w	r3, r3, #3
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005938:	e01b      	b.n	8005972 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d909      	bls.n	8005954 <create_name+0x294>
 8005940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005942:	2b5a      	cmp	r3, #90	; 0x5a
 8005944:	d806      	bhi.n	8005954 <create_name+0x294>
					b |= 2;
 8005946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005952:	e00e      	b.n	8005972 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005956:	2b60      	cmp	r3, #96	; 0x60
 8005958:	d90b      	bls.n	8005972 <create_name+0x2b2>
 800595a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800595c:	2b7a      	cmp	r3, #122	; 0x7a
 800595e:	d808      	bhi.n	8005972 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800596c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596e:	3b20      	subs	r3, #32
 8005970:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	623a      	str	r2, [r7, #32]
 8005978:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800597a:	b2d1      	uxtb	r1, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4413      	add	r3, r2
 8005980:	460a      	mov	r2, r1
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005986:	e763      	b.n	8005850 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005988:	bf00      	nop
 800598a:	e006      	b.n	800599a <create_name+0x2da>
 800598c:	080082f4 	.word	0x080082f4
 8005990:	08008354 	.word	0x08008354
 8005994:	08008300 	.word	0x08008300
			if (si > di) break;			/* No extension */
 8005998:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a0:	2be5      	cmp	r3, #229	; 0xe5
 80059a2:	d103      	bne.n	80059ac <create_name+0x2ec>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2205      	movs	r2, #5
 80059a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d104      	bne.n	80059bc <create_name+0x2fc>
 80059b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80059bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d005      	beq.n	80059d4 <create_name+0x314>
 80059c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d105      	bne.n	80059e0 <create_name+0x320>
 80059d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80059e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d117      	bne.n	8005a1c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80059ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d105      	bne.n	8005a04 <create_name+0x344>
 80059f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fc:	f043 0310 	orr.w	r3, r3, #16
 8005a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d105      	bne.n	8005a1c <create_name+0x35c>
 8005a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005a26:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3728      	adds	r7, #40	; 0x28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a44:	e002      	b.n	8005a4c <follow_path+0x1c>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b2f      	cmp	r3, #47	; 0x2f
 8005a52:	d0f8      	beq.n	8005a46 <follow_path+0x16>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b5c      	cmp	r3, #92	; 0x5c
 8005a5a:	d0f4      	beq.n	8005a46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b1f      	cmp	r3, #31
 8005a68:	d80a      	bhi.n	8005a80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2280      	movs	r2, #128	; 0x80
 8005a6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005a72:	2100      	movs	r1, #0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f8fd 	bl	8004c74 <dir_sdi>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e048      	b.n	8005b12 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a80:	463b      	mov	r3, r7
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fe1b 	bl	80056c0 <create_name>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d139      	bne.n	8005b08 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fc5a 	bl	800534e <dir_find>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005aa4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d12c      	bne.n	8005b0c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d127      	bne.n	8005b0c <follow_path+0xdc>
 8005abc:	2305      	movs	r3, #5
 8005abe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ac0:	e024      	b.n	8005b0c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d121      	bne.n	8005b10 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	799b      	ldrb	r3, [r3, #6]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ad8:	2305      	movs	r3, #5
 8005ada:	75fb      	strb	r3, [r7, #23]
 8005adc:	e019      	b.n	8005b12 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	8992      	ldrh	r2, [r2, #12]
 8005aec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005af0:	fb00 f202 	mul.w	r2, r0, r2
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fa60 	bl	8004fc0 <ld_clust>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b06:	e7bb      	b.n	8005a80 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <follow_path+0xe2>
				break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b10:	bf00      	nop
			}
		}
	}

	return res;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d031      	beq.n	8005b96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e002      	b.n	8005b40 <get_ldnumber+0x24>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b1f      	cmp	r3, #31
 8005b46:	d903      	bls.n	8005b50 <get_ldnumber+0x34>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b3a      	cmp	r3, #58	; 0x3a
 8005b4e:	d1f4      	bne.n	8005b3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b3a      	cmp	r3, #58	; 0x3a
 8005b56:	d11c      	bne.n	8005b92 <get_ldnumber+0x76>
			tp = *path;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	3b30      	subs	r3, #48	; 0x30
 8005b68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d80e      	bhi.n	8005b8e <get_ldnumber+0x72>
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d10a      	bne.n	8005b8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d107      	bne.n	8005b8e <get_ldnumber+0x72>
					vol = (int)i;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	e002      	b.n	8005b98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005b96:	693b      	ldr	r3, [r7, #16]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	70da      	strb	r2, [r3, #3]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe fc78 	bl	80044b4 <move_window>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <check_fs+0x2a>
 8005bca:	2304      	movs	r3, #4
 8005bcc:	e038      	b.n	8005c40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe f9bc 	bl	8003f54 <ld_word>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	461a      	mov	r2, r3
 8005be0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <check_fs+0x48>
 8005be8:	2303      	movs	r3, #3
 8005bea:	e029      	b.n	8005c40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf2:	2be9      	cmp	r3, #233	; 0xe9
 8005bf4:	d009      	beq.n	8005c0a <check_fs+0x66>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bfc:	2beb      	cmp	r3, #235	; 0xeb
 8005bfe:	d11e      	bne.n	8005c3e <check_fs+0x9a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c06:	2b90      	cmp	r3, #144	; 0x90
 8005c08:	d119      	bne.n	8005c3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3338      	adds	r3, #56	; 0x38
 8005c0e:	3336      	adds	r3, #54	; 0x36
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe f9b7 	bl	8003f84 <ld_dword>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <check_fs+0xa4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <check_fs+0x82>
 8005c22:	2300      	movs	r3, #0
 8005c24:	e00c      	b.n	8005c40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3338      	adds	r3, #56	; 0x38
 8005c2a:	3352      	adds	r3, #82	; 0x52
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9a9 	bl	8003f84 <ld_dword>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <check_fs+0xa8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <check_fs+0x9a>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c3e:	2302      	movs	r3, #2
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00544146 	.word	0x00544146
 8005c4c:	33544146 	.word	0x33544146

08005c50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b096      	sub	sp, #88	; 0x58
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff ff59 	bl	8005b1c <get_ldnumber>
 8005c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da01      	bge.n	8005c76 <find_volume+0x26>
 8005c72:	230b      	movs	r3, #11
 8005c74:	e265      	b.n	8006142 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c76:	4a9f      	ldr	r2, [pc, #636]	; (8005ef4 <find_volume+0x2a4>)
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <find_volume+0x3a>
 8005c86:	230c      	movs	r3, #12
 8005c88:	e25b      	b.n	8006142 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01a      	beq.n	8005cd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe f8b5 	bl	8003e14 <disk_status>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <find_volume+0x82>
 8005cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e237      	b.n	8006142 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e235      	b.n	8006142 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe f8ad 	bl	8003e48 <disk_initialize>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d00:	2303      	movs	r3, #3
 8005d02:	e21e      	b.n	8006142 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <find_volume+0xca>
 8005d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d16:	230a      	movs	r3, #10
 8005d18:	e213      	b.n	8006142 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	7858      	ldrb	r0, [r3, #1]
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	330c      	adds	r3, #12
 8005d22:	461a      	mov	r2, r3
 8005d24:	2102      	movs	r1, #2
 8005d26:	f7fe f8f7 	bl	8003f18 <disk_ioctl>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <find_volume+0xe4>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e206      	b.n	8006142 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	899b      	ldrh	r3, [r3, #12]
 8005d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3c:	d80d      	bhi.n	8005d5a <find_volume+0x10a>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	899b      	ldrh	r3, [r3, #12]
 8005d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d46:	d308      	bcc.n	8005d5a <find_volume+0x10a>
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	899b      	ldrh	r3, [r3, #12]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	899b      	ldrh	r3, [r3, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <find_volume+0x10e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1f1      	b.n	8006142 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d66:	f7ff ff1d 	bl	8005ba4 <check_fs>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d149      	bne.n	8005e0c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7c:	e01e      	b.n	8005dbc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d8c:	4413      	add	r3, r2
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	3304      	adds	r3, #4
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <find_volume+0x158>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe f8f0 	bl	8003f84 <ld_dword>
 8005da4:	4602      	mov	r2, r0
 8005da6:	e000      	b.n	8005daa <find_volume+0x15a>
 8005da8:	2200      	movs	r2, #0
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3358      	adds	r3, #88	; 0x58
 8005db0:	443b      	add	r3, r7
 8005db2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db8:	3301      	adds	r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d9dd      	bls.n	8005d7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <find_volume+0x182>
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	3358      	adds	r3, #88	; 0x58
 8005dd8:	443b      	add	r3, r7
 8005dda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005dde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <find_volume+0x1a2>
 8005de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dea:	f7ff fedb 	bl	8005ba4 <check_fs>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e000      	b.n	8005df4 <find_volume+0x1a4>
 8005df2:	2303      	movs	r3, #3
 8005df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d905      	bls.n	8005e0c <find_volume+0x1bc>
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	3301      	adds	r3, #1
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d9e2      	bls.n	8005dd2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d101      	bne.n	8005e18 <find_volume+0x1c8>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e194      	b.n	8006142 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d901      	bls.n	8005e24 <find_volume+0x1d4>
 8005e20:	230d      	movs	r3, #13
 8005e22:	e18e      	b.n	8006142 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	3338      	adds	r3, #56	; 0x38
 8005e28:	330b      	adds	r3, #11
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe f892 	bl	8003f54 <ld_word>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	899b      	ldrh	r3, [r3, #12]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <find_volume+0x1f0>
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	e180      	b.n	8006142 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	3338      	adds	r3, #56	; 0x38
 8005e44:	3316      	adds	r3, #22
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe f884 	bl	8003f54 <ld_word>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <find_volume+0x214>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	3338      	adds	r3, #56	; 0x38
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe f891 	bl	8003f84 <ld_dword>
 8005e62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	789b      	ldrb	r3, [r3, #2]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d005      	beq.n	8005e88 <find_volume+0x238>
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d001      	beq.n	8005e88 <find_volume+0x238>
 8005e84:	230d      	movs	r3, #13
 8005e86:	e15c      	b.n	8006142 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <find_volume+0x26c>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	895b      	ldrh	r3, [r3, #10]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	895b      	ldrh	r3, [r3, #10]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <find_volume+0x270>
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	e140      	b.n	8006142 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	3311      	adds	r3, #17
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f844 	bl	8003f54 <ld_word>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	891b      	ldrh	r3, [r3, #8]
 8005ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eda:	8992      	ldrh	r2, [r2, #12]
 8005edc:	0952      	lsrs	r2, r2, #5
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee4:	fb01 f202 	mul.w	r2, r1, r2
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <find_volume+0x2a8>
 8005ef0:	230d      	movs	r3, #13
 8005ef2:	e126      	b.n	8006142 <find_volume+0x4f2>
 8005ef4:	20000154 	.word	0x20000154

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	3338      	adds	r3, #56	; 0x38
 8005efc:	3313      	adds	r3, #19
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe f828 	bl	8003f54 <ld_word>
 8005f04:	4603      	mov	r3, r0
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <find_volume+0x2cc>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	3338      	adds	r3, #56	; 0x38
 8005f12:	3320      	adds	r3, #32
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe f835 	bl	8003f84 <ld_dword>
 8005f1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	3338      	adds	r3, #56	; 0x38
 8005f20:	330e      	adds	r3, #14
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe f816 	bl	8003f54 <ld_word>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <find_volume+0x2e6>
 8005f32:	230d      	movs	r3, #13
 8005f34:	e105      	b.n	8006142 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	4413      	add	r3, r2
 8005f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3e:	8911      	ldrh	r1, [r2, #8]
 8005f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f42:	8992      	ldrh	r2, [r2, #12]
 8005f44:	0952      	lsrs	r2, r2, #5
 8005f46:	b292      	uxth	r2, r2
 8005f48:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	4413      	add	r3, r2
 8005f50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d201      	bcs.n	8005f5e <find_volume+0x30e>
 8005f5a:	230d      	movs	r3, #13
 8005f5c:	e0f1      	b.n	8006142 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f66:	8952      	ldrh	r2, [r2, #10]
 8005f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <find_volume+0x328>
 8005f74:	230d      	movs	r3, #13
 8005f76:	e0e4      	b.n	8006142 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d802      	bhi.n	8005f8e <find_volume+0x33e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d802      	bhi.n	8005f9e <find_volume+0x34e>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	441a      	add	r2, r3
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	441a      	add	r2, r3
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d11e      	bne.n	8006006 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	332a      	adds	r3, #42	; 0x2a
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd ffc0 	bl	8003f54 <ld_word>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <find_volume+0x38e>
 8005fda:	230d      	movs	r3, #13
 8005fdc:	e0b1      	b.n	8006142 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	891b      	ldrh	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <find_volume+0x39a>
 8005fe6:	230d      	movs	r3, #13
 8005fe8:	e0ab      	b.n	8006142 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	3338      	adds	r3, #56	; 0x38
 8005fee:	332c      	adds	r3, #44	; 0x2c
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd ffc7 	bl	8003f84 <ld_dword>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
 8006004:	e01f      	b.n	8006046 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	891b      	ldrh	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <find_volume+0x3c2>
 800600e:	230d      	movs	r3, #13
 8006010:	e097      	b.n	8006142 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006018:	441a      	add	r2, r3
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800601e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <find_volume+0x3de>
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	e00a      	b.n	8006044 <find_volume+0x3f4>
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	085a      	lsrs	r2, r3, #1
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	899b      	ldrh	r3, [r3, #12]
 800604e:	4619      	mov	r1, r3
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006052:	440b      	add	r3, r1
 8006054:	3b01      	subs	r3, #1
 8006056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006058:	8989      	ldrh	r1, [r1, #12]
 800605a:	fbb3 f3f1 	udiv	r3, r3, r1
 800605e:	429a      	cmp	r2, r3
 8006060:	d201      	bcs.n	8006066 <find_volume+0x416>
 8006062:	230d      	movs	r3, #13
 8006064:	e06d      	b.n	8006142 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	619a      	str	r2, [r3, #24]
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800607c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006080:	2b03      	cmp	r3, #3
 8006082:	d149      	bne.n	8006118 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	3338      	adds	r3, #56	; 0x38
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd ff62 	bl	8003f54 <ld_word>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d140      	bne.n	8006118 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	3301      	adds	r3, #1
 800609a:	4619      	mov	r1, r3
 800609c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800609e:	f7fe fa09 	bl	80044b4 <move_window>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d137      	bne.n	8006118 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	2200      	movs	r2, #0
 80060ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	3338      	adds	r3, #56	; 0x38
 80060b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd ff4c 	bl	8003f54 <ld_word>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d127      	bne.n	8006118 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	3338      	adds	r3, #56	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd ff59 	bl	8003f84 <ld_dword>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <find_volume+0x4fc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d11e      	bne.n	8006118 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	3338      	adds	r3, #56	; 0x38
 80060de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fd ff4e 	bl	8003f84 <ld_dword>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <find_volume+0x500>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d113      	bne.n	8006118 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	3338      	adds	r3, #56	; 0x38
 80060f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fd ff43 	bl	8003f84 <ld_dword>
 80060fe:	4602      	mov	r2, r0
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd ff39 	bl	8003f84 <ld_dword>
 8006112:	4602      	mov	r2, r0
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800611e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <find_volume+0x504>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <find_volume+0x504>)
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <find_volume+0x504>)
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	4a08      	ldr	r2, [pc, #32]	; (8006158 <find_volume+0x508>)
 8006138:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800613a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800613c:	f7fe f952 	bl	80043e4 <clear_lock>
#endif
	return FR_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3758      	adds	r7, #88	; 0x58
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	41615252 	.word	0x41615252
 8006150:	61417272 	.word	0x61417272
 8006154:	20000158 	.word	0x20000158
 8006158:	2000017c 	.word	0x2000017c

0800615c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006166:	2309      	movs	r3, #9
 8006168:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01c      	beq.n	80061aa <validate+0x4e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d018      	beq.n	80061aa <validate+0x4e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <validate+0x4e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	889a      	ldrh	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	88db      	ldrh	r3, [r3, #6]
 800618c:	429a      	cmp	r2, r3
 800618e:	d10c      	bne.n	80061aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fe3c 	bl	8003e14 <disk_status>
 800619c:	4603      	mov	r3, r0
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <validate+0x4e>
			res = FR_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <validate+0x5a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	e000      	b.n	80061b8 <validate+0x5c>
 80061b6:	2300      	movs	r3, #0
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6013      	str	r3, [r2, #0]
	return res;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fc9c 	bl	8005b1c <get_ldnumber>
 80061e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da01      	bge.n	80061f0 <f_mount+0x28>
 80061ec:	230b      	movs	r3, #11
 80061ee:	e02b      	b.n	8006248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061f0:	4a17      	ldr	r2, [pc, #92]	; (8006250 <f_mount+0x88>)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006200:	69b8      	ldr	r0, [r7, #24]
 8006202:	f7fe f8ef 	bl	80043e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	490d      	ldr	r1, [pc, #52]	; (8006250 <f_mount+0x88>)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <f_mount+0x66>
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d001      	beq.n	8006232 <f_mount+0x6a>
 800622e:	2300      	movs	r3, #0
 8006230:	e00a      	b.n	8006248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006232:	f107 010c 	add.w	r1, r7, #12
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	2200      	movs	r2, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fd07 	bl	8005c50 <find_volume>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000154 	.word	0x20000154

08006254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b09a      	sub	sp, #104	; 0x68
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <f_open+0x18>
 8006268:	2309      	movs	r3, #9
 800626a:	e1bb      	b.n	80065e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006272:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	f107 0114 	add.w	r1, r7, #20
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fce6 	bl	8005c50 <find_volume>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800628a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 819f 	bne.w	80065d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	f107 0318 	add.w	r3, r7, #24
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fbc5 	bl	8005a30 <follow_path>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d11a      	bne.n	80062ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80062b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da03      	bge.n	80062c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80062be:	2306      	movs	r3, #6
 80062c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80062c4:	e011      	b.n	80062ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	f107 0318 	add.w	r3, r7, #24
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd ff38 	bl	8004154 <chk_lock>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	f003 031c 	and.w	r3, r3, #28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d07f      	beq.n	80063f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80062f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80062fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006300:	2b04      	cmp	r3, #4
 8006302:	d10e      	bne.n	8006322 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006304:	f7fd ff82 	bl	800420c <enq_lock>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <f_open+0xc8>
 800630e:	f107 0318 	add.w	r3, r7, #24
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f8dc 	bl	80054d0 <dir_register>
 8006318:	4603      	mov	r3, r0
 800631a:	e000      	b.n	800631e <f_open+0xca>
 800631c:	2312      	movs	r3, #18
 800631e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	71fb      	strb	r3, [r7, #7]
 800632a:	e010      	b.n	800634e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800632c:	7fbb      	ldrb	r3, [r7, #30]
 800632e:	f003 0311 	and.w	r3, r3, #17
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <f_open+0xea>
					res = FR_DENIED;
 8006336:	2307      	movs	r3, #7
 8006338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800633c:	e007      	b.n	800634e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <f_open+0xfa>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800634e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006352:	2b00      	cmp	r3, #0
 8006354:	d168      	bne.n	8006428 <f_open+0x1d4>
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d063      	beq.n	8006428 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006360:	f7fd fcfa 	bl	8003d58 <get_fattime>
 8006364:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	330e      	adds	r3, #14
 800636a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800636c:	4618      	mov	r0, r3
 800636e:	f7fd fe47 	bl	8004000 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	3316      	adds	r3, #22
 8006376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006378:	4618      	mov	r0, r3
 800637a:	f7fd fe41 	bl	8004000 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	330b      	adds	r3, #11
 8006382:	2220      	movs	r2, #32
 8006384:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe17 	bl	8004fc0 <ld_clust>
 8006392:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006398:	2200      	movs	r2, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fe2f 	bl	8004ffe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	331c      	adds	r3, #28
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd fe2a 	bl	8004000 <st_dword>
					fs->wflag = 1;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2201      	movs	r2, #1
 80063b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d037      	beq.n	8006428 <f_open+0x1d4>
						dw = fs->winsect;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	2200      	movs	r2, #0
 80063c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fb1f 	bl	8004a0a <remove_chain>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80063d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d126      	bne.n	8006428 <f_open+0x1d4>
							res = move_window(fs, dw);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe f868 	bl	80044b4 <move_window>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ee:	3a01      	subs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]
 80063f2:	e019      	b.n	8006428 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80063f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80063fc:	7fbb      	ldrb	r3, [r7, #30]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006406:	2304      	movs	r3, #4
 8006408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800640c:	e00c      	b.n	8006428 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <f_open+0x1d4>
 8006418:	7fbb      	ldrb	r3, [r7, #30]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <f_open+0x1d4>
						res = FR_DENIED;
 8006422:	2307      	movs	r3, #7
 8006424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800642c:	2b00      	cmp	r3, #0
 800642e:	d128      	bne.n	8006482 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006440:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800644a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	f107 0318 	add.w	r3, r7, #24
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd fef1 	bl	8004250 <inc_lock>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <f_open+0x22e>
 800647c:	2302      	movs	r3, #2
 800647e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 80a3 	bne.w	80065d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fd94 	bl	8004fc0 <ld_clust>
 8006498:	4602      	mov	r2, r0
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	331c      	adds	r3, #28
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fd6e 	bl	8003f84 <ld_dword>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	88da      	ldrh	r2, [r3, #6]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	79fa      	ldrb	r2, [r7, #7]
 80064c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3330      	adds	r3, #48	; 0x30
 80064de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fdd8 	bl	800409a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d06e      	beq.n	80065d2 <f_open+0x37e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d06a      	beq.n	80065d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	895b      	ldrh	r3, [r3, #10]
 8006508:	461a      	mov	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	899b      	ldrh	r3, [r3, #12]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006520:	e016      	b.n	8006550 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe f881 	bl	800462e <get_fat>
 800652c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800652e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006530:	2b01      	cmp	r3, #1
 8006532:	d802      	bhi.n	800653a <f_open+0x2e6>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800653a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d102      	bne.n	8006548 <f_open+0x2f4>
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <f_open+0x30c>
 8006558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800655a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655c:	429a      	cmp	r2, r3
 800655e:	d8e0      	bhi.n	8006522 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006564:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800656a:	2b00      	cmp	r3, #0
 800656c:	d131      	bne.n	80065d2 <f_open+0x37e>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	899b      	ldrh	r3, [r3, #12]
 8006572:	461a      	mov	r2, r3
 8006574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006576:	fbb3 f1f2 	udiv	r1, r3, r2
 800657a:	fb01 f202 	mul.w	r2, r1, r2
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d026      	beq.n	80065d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f831 	bl	80045f0 <clust2sect>
 800658e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <f_open+0x34a>
						res = FR_INT_ERR;
 8006596:	2302      	movs	r3, #2
 8006598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800659c:	e019      	b.n	80065d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	899b      	ldrh	r3, [r3, #12]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	441a      	add	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	7858      	ldrb	r0, [r3, #1]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	2301      	movs	r3, #1
 80065c2:	f7fd fc69 	bl	8003e98 <disk_read>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <f_open+0x37e>
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80065d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <f_open+0x38c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3768      	adds	r7, #104	; 0x68
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f107 0214 	add.w	r2, r7, #20
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fda5 	bl	800615c <validate>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <f_read+0x44>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7d5b      	ldrb	r3, [r3, #21]
 8006624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <f_read+0x4a>
 8006630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006634:	e135      	b.n	80068a2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	7d1b      	ldrb	r3, [r3, #20]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <f_read+0x5a>
 8006642:	2307      	movs	r3, #7
 8006644:	e12d      	b.n	80068a2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	429a      	cmp	r2, r3
 8006658:	f240 811e 	bls.w	8006898 <f_read+0x2ac>
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006660:	e11a      	b.n	8006898 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	8992      	ldrh	r2, [r2, #12]
 800666a:	fbb3 f1f2 	udiv	r1, r3, r2
 800666e:	fb01 f202 	mul.w	r2, r1, r2
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 80d5 	bne.w	8006824 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	8992      	ldrh	r2, [r2, #12]
 8006682:	fbb3 f3f2 	udiv	r3, r3, r2
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	8952      	ldrh	r2, [r2, #10]
 800668a:	3a01      	subs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12f      	bne.n	80066f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
 80066a4:	e013      	b.n	80066ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7fe faa5 	bl	8004c04 <clmt_clust>
 80066ba:	6338      	str	r0, [r7, #48]	; 0x30
 80066bc:	e007      	b.n	80066ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fd ffb1 	bl	800462e <get_fat>
 80066cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d804      	bhi.n	80066de <f_read+0xf2>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2202      	movs	r2, #2
 80066d8:	755a      	strb	r2, [r3, #21]
 80066da:	2302      	movs	r3, #2
 80066dc:	e0e1      	b.n	80068a2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d104      	bne.n	80066f0 <f_read+0x104>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	755a      	strb	r2, [r3, #21]
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0d8      	b.n	80068a2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f7fd ff76 	bl	80045f0 <clust2sect>
 8006704:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <f_read+0x12a>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	755a      	strb	r2, [r3, #21]
 8006712:	2302      	movs	r3, #2
 8006714:	e0c5      	b.n	80068a2 <f_read+0x2b6>
			sect += csect;
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	899b      	ldrh	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	fbb3 f3f2 	udiv	r3, r3, r2
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d041      	beq.n	80067b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	4413      	add	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	8952      	ldrh	r2, [r2, #10]
 800673c:	4293      	cmp	r3, r2
 800673e:	d905      	bls.n	800674c <f_read+0x160>
					cc = fs->csize - csect;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	895b      	ldrh	r3, [r3, #10]
 8006744:	461a      	mov	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	7858      	ldrb	r0, [r3, #1]
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006756:	f7fd fb9f 	bl	8003e98 <disk_read>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <f_read+0x17e>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	755a      	strb	r2, [r3, #21]
 8006766:	2301      	movs	r3, #1
 8006768:	e09b      	b.n	80068a2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	7d1b      	ldrb	r3, [r3, #20]
 800676e:	b25b      	sxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	da18      	bge.n	80067a6 <f_read+0x1ba>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677e:	429a      	cmp	r2, r3
 8006780:	d911      	bls.n	80067a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	8992      	ldrh	r2, [r2, #12]
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006794:	18d0      	adds	r0, r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	899b      	ldrh	r3, [r3, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f7fd fc59 	bl	8004058 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	899b      	ldrh	r3, [r3, #12]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80067b4:	e05c      	b.n	8006870 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d02e      	beq.n	800681e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7d1b      	ldrb	r3, [r3, #20]
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da18      	bge.n	80067fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	7858      	ldrb	r0, [r3, #1]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	2301      	movs	r3, #1
 80067da:	f7fd fb7d 	bl	8003ed8 <disk_write>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <f_read+0x202>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	755a      	strb	r2, [r3, #21]
 80067ea:	2301      	movs	r3, #1
 80067ec:	e059      	b.n	80068a2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7d1b      	ldrb	r3, [r3, #20]
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	7858      	ldrb	r0, [r3, #1]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006806:	2301      	movs	r3, #1
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	f7fd fb45 	bl	8003e98 <disk_read>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <f_read+0x232>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	755a      	strb	r2, [r3, #21]
 800681a:	2301      	movs	r3, #1
 800681c:	e041      	b.n	80068a2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	899b      	ldrh	r3, [r3, #12]
 8006828:	4618      	mov	r0, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	8992      	ldrh	r2, [r2, #12]
 8006832:	fbb3 f1f2 	udiv	r1, r3, r2
 8006836:	fb01 f202 	mul.w	r2, r1, r2
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	1ac3      	subs	r3, r0, r3
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d901      	bls.n	800684c <f_read+0x260>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	8992      	ldrh	r2, [r2, #12]
 800685a:	fbb3 f0f2 	udiv	r0, r3, r2
 800685e:	fb00 f202 	mul.w	r2, r0, r2
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	440b      	add	r3, r1
 8006866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006868:	4619      	mov	r1, r3
 800686a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686c:	f7fd fbf4 	bl	8004058 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	4413      	add	r3, r2
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	441a      	add	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f47f aee1 	bne.w	8006662 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3738      	adds	r7, #56	; 0x38
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08c      	sub	sp, #48	; 0x30
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f107 0210 	add.w	r2, r7, #16
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fc46 	bl	800615c <validate>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <f_write+0x44>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	7d5b      	ldrb	r3, [r3, #21]
 80068e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80068e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <f_write+0x4a>
 80068ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f2:	e16a      	b.n	8006bca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	7d1b      	ldrb	r3, [r3, #20]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <f_write+0x5a>
 8006900:	2307      	movs	r3, #7
 8006902:	e162      	b.n	8006bca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	f080 814c 	bcs.w	8006bae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	43db      	mvns	r3, r3
 800691c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800691e:	e146      	b.n	8006bae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	8992      	ldrh	r2, [r2, #12]
 8006928:	fbb3 f1f2 	udiv	r1, r3, r2
 800692c:	fb01 f202 	mul.w	r2, r1, r2
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	f040 80f1 	bne.w	8006b1a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	8992      	ldrh	r2, [r2, #12]
 8006940:	fbb3 f3f2 	udiv	r3, r3, r2
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	8952      	ldrh	r2, [r2, #10]
 8006948:	3a01      	subs	r2, #1
 800694a:	4013      	ands	r3, r2
 800694c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d143      	bne.n	80069dc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10c      	bne.n	8006976 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11a      	bne.n	800699e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe f8b1 	bl	8004ad4 <create_chain>
 8006972:	62b8      	str	r0, [r7, #40]	; 0x28
 8006974:	e013      	b.n	800699e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	4619      	mov	r1, r3
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7fe f93d 	bl	8004c04 <clmt_clust>
 800698a:	62b8      	str	r0, [r7, #40]	; 0x28
 800698c:	e007      	b.n	800699e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fe f89c 	bl	8004ad4 <create_chain>
 800699c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8109 	beq.w	8006bb8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d104      	bne.n	80069b6 <f_write+0x10c>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2202      	movs	r2, #2
 80069b0:	755a      	strb	r2, [r3, #21]
 80069b2:	2302      	movs	r3, #2
 80069b4:	e109      	b.n	8006bca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d104      	bne.n	80069c8 <f_write+0x11e>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	755a      	strb	r2, [r3, #21]
 80069c4:	2301      	movs	r3, #1
 80069c6:	e100      	b.n	8006bca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <f_write+0x132>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7d1b      	ldrb	r3, [r3, #20]
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da18      	bge.n	8006a18 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	7858      	ldrb	r0, [r3, #1]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	2301      	movs	r3, #1
 80069f6:	f7fd fa6f 	bl	8003ed8 <disk_write>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <f_write+0x160>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	755a      	strb	r2, [r3, #21]
 8006a06:	2301      	movs	r3, #1
 8006a08:	e0df      	b.n	8006bca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	7d1b      	ldrb	r3, [r3, #20]
 8006a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7fd fde5 	bl	80045f0 <clust2sect>
 8006a26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <f_write+0x18e>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	755a      	strb	r2, [r3, #21]
 8006a34:	2302      	movs	r3, #2
 8006a36:	e0c8      	b.n	8006bca <f_write+0x320>
			sect += csect;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	899b      	ldrh	r3, [r3, #12]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d043      	beq.n	8006adc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4413      	add	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	8952      	ldrh	r2, [r2, #10]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d905      	bls.n	8006a6e <f_write+0x1c4>
					cc = fs->csize - csect;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	461a      	mov	r2, r3
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	7858      	ldrb	r0, [r3, #1]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	69f9      	ldr	r1, [r7, #28]
 8006a78:	f7fd fa2e 	bl	8003ed8 <disk_write>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <f_write+0x1e2>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	755a      	strb	r2, [r3, #21]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09e      	b.n	8006bca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d918      	bls.n	8006acc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	8992      	ldrh	r2, [r2, #12]
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	18d1      	adds	r1, r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	899b      	ldrh	r3, [r3, #12]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f7fd facd 	bl	8004058 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	7d1b      	ldrb	r3, [r3, #20]
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	899b      	ldrh	r3, [r3, #12]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006ada:	e04b      	b.n	8006b74 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d016      	beq.n	8006b14 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d210      	bcs.n	8006b14 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	7858      	ldrb	r0, [r3, #1]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006afc:	2301      	movs	r3, #1
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	f7fd f9ca 	bl	8003e98 <disk_read>
 8006b04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	755a      	strb	r2, [r3, #21]
 8006b10:	2301      	movs	r3, #1
 8006b12:	e05a      	b.n	8006bca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	899b      	ldrh	r3, [r3, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	8992      	ldrh	r2, [r2, #12]
 8006b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2c:	fb01 f202 	mul.w	r2, r1, r2
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	1ac3      	subs	r3, r0, r3
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d901      	bls.n	8006b42 <f_write+0x298>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	8992      	ldrh	r2, [r2, #12]
 8006b50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b54:	fb00 f202 	mul.w	r2, r0, r2
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5e:	69f9      	ldr	r1, [r7, #28]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fd fa79 	bl	8004058 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7d1b      	ldrb	r3, [r3, #20]
 8006b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	4413      	add	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf38      	it	cc
 8006b94:	461a      	movcc	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	441a      	add	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f47f aeb5 	bne.w	8006920 <f_write+0x76>
 8006bb6:	e000      	b.n	8006bba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006bb8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7d1b      	ldrb	r3, [r3, #20]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f107 0208 	add.w	r2, r7, #8
 8006be0:	4611      	mov	r1, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff faba 	bl	800615c <validate>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d168      	bne.n	8006cc4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7d1b      	ldrb	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d062      	beq.n	8006cc4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da15      	bge.n	8006c34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	7858      	ldrb	r0, [r3, #1]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	2301      	movs	r3, #1
 8006c18:	f7fd f95e 	bl	8003ed8 <disk_write>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <f_sync+0x54>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e04f      	b.n	8006cc6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7d1b      	ldrb	r3, [r3, #20]
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006c34:	f7fd f890 	bl	8003d58 <get_fattime>
 8006c38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fd fc36 	bl	80044b4 <move_window>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d138      	bne.n	8006cc4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	330b      	adds	r3, #11
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	330b      	adds	r3, #11
 8006c62:	f042 0220 	orr.w	r2, r2, #32
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	f7fe f9c2 	bl	8004ffe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f103 021c 	add.w	r2, r3, #28
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fd f9ba 	bl	8004000 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3316      	adds	r3, #22
 8006c90:	6939      	ldr	r1, [r7, #16]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd f9b4 	bl	8004000 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3312      	adds	r3, #18
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd f993 	bl	8003fca <st_word>
					fs->wflag = 1;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd fc2f 	bl	8004510 <sync_fs>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7d1b      	ldrb	r3, [r3, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff7b 	bl	8006bd2 <f_sync>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f107 0208 	add.w	r2, r7, #8
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fa34 	bl	800615c <validate>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10c      	bne.n	8006d18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd fb32 	bl	800436c <dec_lock>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b092      	sub	sp, #72	; 0x48
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006d2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006d32:	f107 030c 	add.w	r3, r7, #12
 8006d36:	2200      	movs	r2, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe ff89 	bl	8005c50 <find_volume>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006d44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 8099 	bne.w	8006e80 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	3b02      	subs	r3, #2
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d804      	bhi.n	8006d6c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e089      	b.n	8006e80 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d128      	bne.n	8006dca <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd fc51 	bl	800462e <get_fat>
 8006d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d94:	d103      	bne.n	8006d9e <f_getfree+0x7c>
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d9c:	e063      	b.n	8006e66 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d103      	bne.n	8006dac <f_getfree+0x8a>
 8006da4:	2302      	movs	r3, #2
 8006da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006daa:	e05c      	b.n	8006e66 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <f_getfree+0x96>
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	3301      	adds	r3, #1
 8006db6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dba:	3301      	adds	r3, #1
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d3db      	bcc.n	8006d80 <f_getfree+0x5e>
 8006dc8:	e04d      	b.n	8006e66 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	2300      	movs	r3, #0
 8006ddc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d113      	bne.n	8006e0c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	63ba      	str	r2, [r7, #56]	; 0x38
 8006dec:	4619      	mov	r1, r3
 8006dee:	f7fd fb61 	bl	80044b4 <move_window>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d131      	bne.n	8006e64 <f_getfree+0x142>
							p = fs->win;
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	3338      	adds	r3, #56	; 0x38
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	899b      	ldrh	r3, [r3, #12]
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d10f      	bne.n	8006e34 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e16:	f7fd f89d 	bl	8003f54 <ld_word>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <f_getfree+0x104>
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	3301      	adds	r3, #1
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	3302      	adds	r3, #2
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	3b02      	subs	r3, #2
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	e010      	b.n	8006e56 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e36:	f7fd f8a5 	bl	8003f84 <ld_dword>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <f_getfree+0x128>
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	3301      	adds	r3, #1
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	3b04      	subs	r3, #4
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bd      	bne.n	8006dde <f_getfree+0xbc>
 8006e62:	e000      	b.n	8006e66 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006e64:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e6a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e70:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	791a      	ldrb	r2, [r3, #4]
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006e80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3748      	adds	r7, #72	; 0x48
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006ea0:	e01b      	b.n	8006eda <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006ea2:	f107 0310 	add.w	r3, r7, #16
 8006ea6:	f107 0114 	add.w	r1, r7, #20
 8006eaa:	2201      	movs	r2, #1
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fb9d 	bl	80065ec <f_read>
		if (rc != 1) break;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d116      	bne.n	8006ee6 <f_gets+0x5a>
		c = s[0];
 8006eb8:	7d3b      	ldrb	r3, [r7, #20]
 8006eba:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b0d      	cmp	r3, #13
 8006ec0:	d100      	bne.n	8006ec4 <f_gets+0x38>
 8006ec2:	e00a      	b.n	8006eda <f_gets+0x4e>
		*p++ = c;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	61ba      	str	r2, [r7, #24]
 8006eca:	7dfa      	ldrb	r2, [r7, #23]
 8006ecc:	701a      	strb	r2, [r3, #0]
		n++;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b0a      	cmp	r3, #10
 8006ed8:	d007      	beq.n	8006eea <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	dbde      	blt.n	8006ea2 <f_gets+0x16>
 8006ee4:	e002      	b.n	8006eec <f_gets+0x60>
		if (rc != 1) break;
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006eea:	bf00      	nop
	}
	*p = 0;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <f_gets+0x70>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	e000      	b.n	8006efe <f_gets+0x72>
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	2b0a      	cmp	r3, #10
 8006f16:	d103      	bne.n	8006f20 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006f18:	210d      	movs	r1, #13
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fff3 	bl	8006f06 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db25      	blt.n	8006f78 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	60fa      	str	r2, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4413      	add	r3, r2
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b3c      	cmp	r3, #60	; 0x3c
 8006f3e:	dd12      	ble.n	8006f66 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f103 010c 	add.w	r1, r3, #12
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	f7ff fcab 	bl	80068aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d101      	bne.n	8006f60 <putc_bfd+0x5a>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e001      	b.n	8006f64 <putc_bfd+0x5e>
 8006f60:	f04f 33ff 	mov.w	r3, #4294967295
 8006f64:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]
 8006f76:	e000      	b.n	8006f7a <putc_bfd+0x74>
	if (i < 0) return;
 8006f78:	bf00      	nop
}
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	db16      	blt.n	8006fbe <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f103 010c 	add.w	r1, r3, #12
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	f7ff fc81 	bl	80068aa <f_write>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d107      	bne.n	8006fbe <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d102      	bne.n	8006fbe <putc_flush+0x3e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	e001      	b.n	8006fc2 <putc_flush+0x42>
	return EOF;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b096      	sub	sp, #88	; 0x58
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff ffe0 	bl	8006fca <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800700a:	e009      	b.n	8007020 <f_puts+0x2c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff ff73 	bl	8006f06 <putc_bfd>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1f1      	bne.n	800700c <f_puts+0x18>
	return putc_flush(&pb);
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ffa7 	bl	8006f80 <putc_flush>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3758      	adds	r7, #88	; 0x58
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007052:	4b1f      	ldr	r3, [pc, #124]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007054:	7a5b      	ldrb	r3, [r3, #9]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d131      	bne.n	80070c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800705e:	7a5b      	ldrb	r3, [r3, #9]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007066:	2100      	movs	r1, #0
 8007068:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800706a:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800706c:	7a5b      	ldrb	r3, [r3, #9]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800707c:	7a5b      	ldrb	r3, [r3, #9]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007084:	4413      	add	r3, r2
 8007086:	79fa      	ldrb	r2, [r7, #7]
 8007088:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800708c:	7a5b      	ldrb	r3, [r3, #9]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	b2d1      	uxtb	r1, r2
 8007094:	4a0e      	ldr	r2, [pc, #56]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007096:	7251      	strb	r1, [r2, #9]
 8007098:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800709a:	7dbb      	ldrb	r3, [r7, #22]
 800709c:	3330      	adds	r3, #48	; 0x30
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3301      	adds	r3, #1
 80070a8:	223a      	movs	r2, #58	; 0x3a
 80070aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3302      	adds	r3, #2
 80070b0:	222f      	movs	r2, #47	; 0x2f
 80070b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3303      	adds	r3, #3
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2000037c 	.word	0x2000037c

080070d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070de:	2200      	movs	r2, #0
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ffaa 	bl	800703c <FATFS_LinkDriverEx>
 80070e8:	4603      	mov	r3, r0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	2b7f      	cmp	r3, #127	; 0x7f
 8007104:	d802      	bhi.n	800710c <ff_convert+0x18>
		c = chr;
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	81fb      	strh	r3, [r7, #14]
 800710a:	e025      	b.n	8007158 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	2bff      	cmp	r3, #255	; 0xff
 8007116:	d805      	bhi.n	8007124 <ff_convert+0x30>
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	3b80      	subs	r3, #128	; 0x80
 800711c:	4a12      	ldr	r2, [pc, #72]	; (8007168 <ff_convert+0x74>)
 800711e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007122:	e000      	b.n	8007126 <ff_convert+0x32>
 8007124:	2300      	movs	r3, #0
 8007126:	81fb      	strh	r3, [r7, #14]
 8007128:	e016      	b.n	8007158 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800712a:	2300      	movs	r3, #0
 800712c:	81fb      	strh	r3, [r7, #14]
 800712e:	e009      	b.n	8007144 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007130:	89fb      	ldrh	r3, [r7, #14]
 8007132:	4a0d      	ldr	r2, [pc, #52]	; (8007168 <ff_convert+0x74>)
 8007134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007138:	88fa      	ldrh	r2, [r7, #6]
 800713a:	429a      	cmp	r2, r3
 800713c:	d006      	beq.n	800714c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800713e:	89fb      	ldrh	r3, [r7, #14]
 8007140:	3301      	adds	r3, #1
 8007142:	81fb      	strh	r3, [r7, #14]
 8007144:	89fb      	ldrh	r3, [r7, #14]
 8007146:	2b7f      	cmp	r3, #127	; 0x7f
 8007148:	d9f2      	bls.n	8007130 <ff_convert+0x3c>
 800714a:	e000      	b.n	800714e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800714c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800714e:	89fb      	ldrh	r3, [r7, #14]
 8007150:	3380      	adds	r3, #128	; 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	b2db      	uxtb	r3, r3
 8007156:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007158:	89fb      	ldrh	r3, [r7, #14]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	080083e4 	.word	0x080083e4

0800716c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717c:	d201      	bcs.n	8007182 <ff_wtoupper+0x16>
 800717e:	4b3e      	ldr	r3, [pc, #248]	; (8007278 <ff_wtoupper+0x10c>)
 8007180:	e000      	b.n	8007184 <ff_wtoupper+0x18>
 8007182:	4b3e      	ldr	r3, [pc, #248]	; (800727c <ff_wtoupper+0x110>)
 8007184:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	617a      	str	r2, [r7, #20]
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007190:	8a7b      	ldrh	r3, [r7, #18]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d068      	beq.n	8007268 <ff_wtoupper+0xfc>
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	8a7b      	ldrh	r3, [r7, #18]
 800719a:	429a      	cmp	r2, r3
 800719c:	d364      	bcc.n	8007268 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	617a      	str	r2, [r7, #20]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	823b      	strh	r3, [r7, #16]
 80071a8:	8a3b      	ldrh	r3, [r7, #16]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	81fb      	strh	r3, [r7, #14]
 80071ae:	8a3b      	ldrh	r3, [r7, #16]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80071b4:	88fa      	ldrh	r2, [r7, #6]
 80071b6:	8a79      	ldrh	r1, [r7, #18]
 80071b8:	8a3b      	ldrh	r3, [r7, #16]
 80071ba:	440b      	add	r3, r1
 80071bc:	429a      	cmp	r2, r3
 80071be:	da49      	bge.n	8007254 <ff_wtoupper+0xe8>
			switch (cmd) {
 80071c0:	89fb      	ldrh	r3, [r7, #14]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d84f      	bhi.n	8007266 <ff_wtoupper+0xfa>
 80071c6:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <ff_wtoupper+0x60>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007221 	.word	0x08007221
 80071dc:	08007229 	.word	0x08007229
 80071e0:	08007231 	.word	0x08007231
 80071e4:	08007239 	.word	0x08007239
 80071e8:	08007241 	.word	0x08007241
 80071ec:	08007249 	.word	0x08007249
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	8a7b      	ldrh	r3, [r7, #18]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	80fb      	strh	r3, [r7, #6]
 8007200:	e027      	b.n	8007252 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007202:	88fa      	ldrh	r2, [r7, #6]
 8007204:	8a7b      	ldrh	r3, [r7, #18]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	b29b      	uxth	r3, r3
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	80fb      	strh	r3, [r7, #6]
 8007216:	e01c      	b.n	8007252 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	3b10      	subs	r3, #16
 800721c:	80fb      	strh	r3, [r7, #6]
 800721e:	e018      	b.n	8007252 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	3b20      	subs	r3, #32
 8007224:	80fb      	strh	r3, [r7, #6]
 8007226:	e014      	b.n	8007252 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	3b30      	subs	r3, #48	; 0x30
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	e010      	b.n	8007252 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	3b1a      	subs	r3, #26
 8007234:	80fb      	strh	r3, [r7, #6]
 8007236:	e00c      	b.n	8007252 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	3308      	adds	r3, #8
 800723c:	80fb      	strh	r3, [r7, #6]
 800723e:	e008      	b.n	8007252 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	3b50      	subs	r3, #80	; 0x50
 8007244:	80fb      	strh	r3, [r7, #6]
 8007246:	e004      	b.n	8007252 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800724e:	80fb      	strh	r3, [r7, #6]
 8007250:	bf00      	nop
			}
			break;
 8007252:	e008      	b.n	8007266 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007254:	89fb      	ldrh	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d195      	bne.n	8007186 <ff_wtoupper+0x1a>
 800725a:	8a3b      	ldrh	r3, [r7, #16]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4413      	add	r3, r2
 8007262:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007264:	e78f      	b.n	8007186 <ff_wtoupper+0x1a>
			break;
 8007266:	bf00      	nop
	}

	return chr;
 8007268:	88fb      	ldrh	r3, [r7, #6]
}
 800726a:	4618      	mov	r0, r3
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	080084e4 	.word	0x080084e4
 800727c:	080086d8 	.word	0x080086d8

08007280 <std>:
 8007280:	2300      	movs	r3, #0
 8007282:	b510      	push	{r4, lr}
 8007284:	4604      	mov	r4, r0
 8007286:	e9c0 3300 	strd	r3, r3, [r0]
 800728a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800728e:	6083      	str	r3, [r0, #8]
 8007290:	8181      	strh	r1, [r0, #12]
 8007292:	6643      	str	r3, [r0, #100]	; 0x64
 8007294:	81c2      	strh	r2, [r0, #14]
 8007296:	6183      	str	r3, [r0, #24]
 8007298:	4619      	mov	r1, r3
 800729a:	2208      	movs	r2, #8
 800729c:	305c      	adds	r0, #92	; 0x5c
 800729e:	f000 f9f7 	bl	8007690 <memset>
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <std+0x58>)
 80072a4:	6263      	str	r3, [r4, #36]	; 0x24
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <std+0x5c>)
 80072a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <std+0x60>)
 80072ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <std+0x64>)
 80072b0:	6323      	str	r3, [r4, #48]	; 0x30
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <std+0x68>)
 80072b4:	6224      	str	r4, [r4, #32]
 80072b6:	429c      	cmp	r4, r3
 80072b8:	d006      	beq.n	80072c8 <std+0x48>
 80072ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072be:	4294      	cmp	r4, r2
 80072c0:	d002      	beq.n	80072c8 <std+0x48>
 80072c2:	33d0      	adds	r3, #208	; 0xd0
 80072c4:	429c      	cmp	r4, r3
 80072c6:	d105      	bne.n	80072d4 <std+0x54>
 80072c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	f000 ba56 	b.w	8007780 <__retarget_lock_init_recursive>
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	bf00      	nop
 80072d8:	080074e1 	.word	0x080074e1
 80072dc:	08007503 	.word	0x08007503
 80072e0:	0800753b 	.word	0x0800753b
 80072e4:	0800755f 	.word	0x0800755f
 80072e8:	20000388 	.word	0x20000388

080072ec <stdio_exit_handler>:
 80072ec:	4a02      	ldr	r2, [pc, #8]	; (80072f8 <stdio_exit_handler+0xc>)
 80072ee:	4903      	ldr	r1, [pc, #12]	; (80072fc <stdio_exit_handler+0x10>)
 80072f0:	4803      	ldr	r0, [pc, #12]	; (8007300 <stdio_exit_handler+0x14>)
 80072f2:	f000 b869 	b.w	80073c8 <_fwalk_sglue>
 80072f6:	bf00      	nop
 80072f8:	20000024 	.word	0x20000024
 80072fc:	0800802d 	.word	0x0800802d
 8007300:	20000030 	.word	0x20000030

08007304 <cleanup_stdio>:
 8007304:	6841      	ldr	r1, [r0, #4]
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <cleanup_stdio+0x34>)
 8007308:	4299      	cmp	r1, r3
 800730a:	b510      	push	{r4, lr}
 800730c:	4604      	mov	r4, r0
 800730e:	d001      	beq.n	8007314 <cleanup_stdio+0x10>
 8007310:	f000 fe8c 	bl	800802c <_fflush_r>
 8007314:	68a1      	ldr	r1, [r4, #8]
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <cleanup_stdio+0x38>)
 8007318:	4299      	cmp	r1, r3
 800731a:	d002      	beq.n	8007322 <cleanup_stdio+0x1e>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fe85 	bl	800802c <_fflush_r>
 8007322:	68e1      	ldr	r1, [r4, #12]
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <cleanup_stdio+0x3c>)
 8007326:	4299      	cmp	r1, r3
 8007328:	d004      	beq.n	8007334 <cleanup_stdio+0x30>
 800732a:	4620      	mov	r0, r4
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f000 be7c 	b.w	800802c <_fflush_r>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	bf00      	nop
 8007338:	20000388 	.word	0x20000388
 800733c:	200003f0 	.word	0x200003f0
 8007340:	20000458 	.word	0x20000458

08007344 <global_stdio_init.part.0>:
 8007344:	b510      	push	{r4, lr}
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <global_stdio_init.part.0+0x30>)
 8007348:	4c0b      	ldr	r4, [pc, #44]	; (8007378 <global_stdio_init.part.0+0x34>)
 800734a:	4a0c      	ldr	r2, [pc, #48]	; (800737c <global_stdio_init.part.0+0x38>)
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	4620      	mov	r0, r4
 8007350:	2200      	movs	r2, #0
 8007352:	2104      	movs	r1, #4
 8007354:	f7ff ff94 	bl	8007280 <std>
 8007358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800735c:	2201      	movs	r2, #1
 800735e:	2109      	movs	r1, #9
 8007360:	f7ff ff8e 	bl	8007280 <std>
 8007364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007368:	2202      	movs	r2, #2
 800736a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736e:	2112      	movs	r1, #18
 8007370:	f7ff bf86 	b.w	8007280 <std>
 8007374:	200004c0 	.word	0x200004c0
 8007378:	20000388 	.word	0x20000388
 800737c:	080072ed 	.word	0x080072ed

08007380 <__sfp_lock_acquire>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__sfp_lock_acquire+0x8>)
 8007382:	f000 b9fe 	b.w	8007782 <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	200004c9 	.word	0x200004c9

0800738c <__sfp_lock_release>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__sfp_lock_release+0x8>)
 800738e:	f000 b9f9 	b.w	8007784 <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	200004c9 	.word	0x200004c9

08007398 <__sinit>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	f7ff fff0 	bl	8007380 <__sfp_lock_acquire>
 80073a0:	6a23      	ldr	r3, [r4, #32]
 80073a2:	b11b      	cbz	r3, 80073ac <__sinit+0x14>
 80073a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a8:	f7ff bff0 	b.w	800738c <__sfp_lock_release>
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <__sinit+0x28>)
 80073ae:	6223      	str	r3, [r4, #32]
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <__sinit+0x2c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f5      	bne.n	80073a4 <__sinit+0xc>
 80073b8:	f7ff ffc4 	bl	8007344 <global_stdio_init.part.0>
 80073bc:	e7f2      	b.n	80073a4 <__sinit+0xc>
 80073be:	bf00      	nop
 80073c0:	08007305 	.word	0x08007305
 80073c4:	200004c0 	.word	0x200004c0

080073c8 <_fwalk_sglue>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4607      	mov	r7, r0
 80073ce:	4688      	mov	r8, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	2600      	movs	r6, #0
 80073d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073d8:	f1b9 0901 	subs.w	r9, r9, #1
 80073dc:	d505      	bpl.n	80073ea <_fwalk_sglue+0x22>
 80073de:	6824      	ldr	r4, [r4, #0]
 80073e0:	2c00      	cmp	r4, #0
 80073e2:	d1f7      	bne.n	80073d4 <_fwalk_sglue+0xc>
 80073e4:	4630      	mov	r0, r6
 80073e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d907      	bls.n	8007400 <_fwalk_sglue+0x38>
 80073f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073f4:	3301      	adds	r3, #1
 80073f6:	d003      	beq.n	8007400 <_fwalk_sglue+0x38>
 80073f8:	4629      	mov	r1, r5
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c0      	blx	r8
 80073fe:	4306      	orrs	r6, r0
 8007400:	3568      	adds	r5, #104	; 0x68
 8007402:	e7e9      	b.n	80073d8 <_fwalk_sglue+0x10>

08007404 <iprintf>:
 8007404:	b40f      	push	{r0, r1, r2, r3}
 8007406:	b507      	push	{r0, r1, r2, lr}
 8007408:	4906      	ldr	r1, [pc, #24]	; (8007424 <iprintf+0x20>)
 800740a:	ab04      	add	r3, sp, #16
 800740c:	6808      	ldr	r0, [r1, #0]
 800740e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007412:	6881      	ldr	r1, [r0, #8]
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	f000 fad9 	bl	80079cc <_vfiprintf_r>
 800741a:	b003      	add	sp, #12
 800741c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007420:	b004      	add	sp, #16
 8007422:	4770      	bx	lr
 8007424:	2000007c 	.word	0x2000007c

08007428 <_puts_r>:
 8007428:	6a03      	ldr	r3, [r0, #32]
 800742a:	b570      	push	{r4, r5, r6, lr}
 800742c:	6884      	ldr	r4, [r0, #8]
 800742e:	4605      	mov	r5, r0
 8007430:	460e      	mov	r6, r1
 8007432:	b90b      	cbnz	r3, 8007438 <_puts_r+0x10>
 8007434:	f7ff ffb0 	bl	8007398 <__sinit>
 8007438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800743a:	07db      	lsls	r3, r3, #31
 800743c:	d405      	bmi.n	800744a <_puts_r+0x22>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	0598      	lsls	r0, r3, #22
 8007442:	d402      	bmi.n	800744a <_puts_r+0x22>
 8007444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007446:	f000 f99c 	bl	8007782 <__retarget_lock_acquire_recursive>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	0719      	lsls	r1, r3, #28
 800744e:	d513      	bpl.n	8007478 <_puts_r+0x50>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	b18b      	cbz	r3, 8007478 <_puts_r+0x50>
 8007454:	3e01      	subs	r6, #1
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800745c:	3b01      	subs	r3, #1
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	b9e9      	cbnz	r1, 800749e <_puts_r+0x76>
 8007462:	2b00      	cmp	r3, #0
 8007464:	da2e      	bge.n	80074c4 <_puts_r+0x9c>
 8007466:	4622      	mov	r2, r4
 8007468:	210a      	movs	r1, #10
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f87b 	bl	8007566 <__swbuf_r>
 8007470:	3001      	adds	r0, #1
 8007472:	d007      	beq.n	8007484 <_puts_r+0x5c>
 8007474:	250a      	movs	r5, #10
 8007476:	e007      	b.n	8007488 <_puts_r+0x60>
 8007478:	4621      	mov	r1, r4
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f8b0 	bl	80075e0 <__swsetup_r>
 8007480:	2800      	cmp	r0, #0
 8007482:	d0e7      	beq.n	8007454 <_puts_r+0x2c>
 8007484:	f04f 35ff 	mov.w	r5, #4294967295
 8007488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800748a:	07da      	lsls	r2, r3, #31
 800748c:	d405      	bmi.n	800749a <_puts_r+0x72>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d402      	bmi.n	800749a <_puts_r+0x72>
 8007494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007496:	f000 f975 	bl	8007784 <__retarget_lock_release_recursive>
 800749a:	4628      	mov	r0, r5
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da04      	bge.n	80074ac <_puts_r+0x84>
 80074a2:	69a2      	ldr	r2, [r4, #24]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	dc06      	bgt.n	80074b6 <_puts_r+0x8e>
 80074a8:	290a      	cmp	r1, #10
 80074aa:	d004      	beq.n	80074b6 <_puts_r+0x8e>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	7019      	strb	r1, [r3, #0]
 80074b4:	e7cf      	b.n	8007456 <_puts_r+0x2e>
 80074b6:	4622      	mov	r2, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f854 	bl	8007566 <__swbuf_r>
 80074be:	3001      	adds	r0, #1
 80074c0:	d1c9      	bne.n	8007456 <_puts_r+0x2e>
 80074c2:	e7df      	b.n	8007484 <_puts_r+0x5c>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	250a      	movs	r5, #10
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	701d      	strb	r5, [r3, #0]
 80074ce:	e7db      	b.n	8007488 <_puts_r+0x60>

080074d0 <puts>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <puts+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7ff bfa7 	b.w	8007428 <_puts_r>
 80074da:	bf00      	nop
 80074dc:	2000007c 	.word	0x2000007c

080074e0 <__sread>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	f000 f8fc 	bl	80076e4 <_read_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	bfab      	itete	ge
 80074f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074f2:	89a3      	ldrhlt	r3, [r4, #12]
 80074f4:	181b      	addge	r3, r3, r0
 80074f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074fa:	bfac      	ite	ge
 80074fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074fe:	81a3      	strhlt	r3, [r4, #12]
 8007500:	bd10      	pop	{r4, pc}

08007502 <__swrite>:
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	461f      	mov	r7, r3
 8007508:	898b      	ldrh	r3, [r1, #12]
 800750a:	05db      	lsls	r3, r3, #23
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d505      	bpl.n	8007520 <__swrite+0x1e>
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	2302      	movs	r3, #2
 800751a:	2200      	movs	r2, #0
 800751c:	f000 f8d0 	bl	80076c0 <_lseek_r>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	4628      	mov	r0, r5
 8007532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007536:	f000 b8e7 	b.w	8007708 <_write_r>

0800753a <__sseek>:
 800753a:	b510      	push	{r4, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 f8bd 	bl	80076c0 <_lseek_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	bf15      	itete	ne
 800754c:	6560      	strne	r0, [r4, #84]	; 0x54
 800754e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007556:	81a3      	strheq	r3, [r4, #12]
 8007558:	bf18      	it	ne
 800755a:	81a3      	strhne	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__sclose>:
 800755e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007562:	f000 b89d 	b.w	80076a0 <_close_r>

08007566 <__swbuf_r>:
 8007566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007568:	460e      	mov	r6, r1
 800756a:	4614      	mov	r4, r2
 800756c:	4605      	mov	r5, r0
 800756e:	b118      	cbz	r0, 8007578 <__swbuf_r+0x12>
 8007570:	6a03      	ldr	r3, [r0, #32]
 8007572:	b90b      	cbnz	r3, 8007578 <__swbuf_r+0x12>
 8007574:	f7ff ff10 	bl	8007398 <__sinit>
 8007578:	69a3      	ldr	r3, [r4, #24]
 800757a:	60a3      	str	r3, [r4, #8]
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	071a      	lsls	r2, r3, #28
 8007580:	d525      	bpl.n	80075ce <__swbuf_r+0x68>
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	b31b      	cbz	r3, 80075ce <__swbuf_r+0x68>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	1a98      	subs	r0, r3, r2
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	b2f6      	uxtb	r6, r6
 8007590:	4283      	cmp	r3, r0
 8007592:	4637      	mov	r7, r6
 8007594:	dc04      	bgt.n	80075a0 <__swbuf_r+0x3a>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 fd47 	bl	800802c <_fflush_r>
 800759e:	b9e0      	cbnz	r0, 80075da <__swbuf_r+0x74>
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60a3      	str	r3, [r4, #8]
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	701e      	strb	r6, [r3, #0]
 80075ae:	6962      	ldr	r2, [r4, #20]
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d004      	beq.n	80075c0 <__swbuf_r+0x5a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	07db      	lsls	r3, r3, #31
 80075ba:	d506      	bpl.n	80075ca <__swbuf_r+0x64>
 80075bc:	2e0a      	cmp	r6, #10
 80075be:	d104      	bne.n	80075ca <__swbuf_r+0x64>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 fd32 	bl	800802c <_fflush_r>
 80075c8:	b938      	cbnz	r0, 80075da <__swbuf_r+0x74>
 80075ca:	4638      	mov	r0, r7
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f805 	bl	80075e0 <__swsetup_r>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d0d5      	beq.n	8007586 <__swbuf_r+0x20>
 80075da:	f04f 37ff 	mov.w	r7, #4294967295
 80075de:	e7f4      	b.n	80075ca <__swbuf_r+0x64>

080075e0 <__swsetup_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4b2a      	ldr	r3, [pc, #168]	; (800768c <__swsetup_r+0xac>)
 80075e4:	4605      	mov	r5, r0
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	460c      	mov	r4, r1
 80075ea:	b118      	cbz	r0, 80075f4 <__swsetup_r+0x14>
 80075ec:	6a03      	ldr	r3, [r0, #32]
 80075ee:	b90b      	cbnz	r3, 80075f4 <__swsetup_r+0x14>
 80075f0:	f7ff fed2 	bl	8007398 <__sinit>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075fa:	0718      	lsls	r0, r3, #28
 80075fc:	d422      	bmi.n	8007644 <__swsetup_r+0x64>
 80075fe:	06d9      	lsls	r1, r3, #27
 8007600:	d407      	bmi.n	8007612 <__swsetup_r+0x32>
 8007602:	2309      	movs	r3, #9
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	e034      	b.n	800767c <__swsetup_r+0x9c>
 8007612:	0758      	lsls	r0, r3, #29
 8007614:	d512      	bpl.n	800763c <__swsetup_r+0x5c>
 8007616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007618:	b141      	cbz	r1, 800762c <__swsetup_r+0x4c>
 800761a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800761e:	4299      	cmp	r1, r3
 8007620:	d002      	beq.n	8007628 <__swsetup_r+0x48>
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f8b0 	bl	8007788 <_free_r>
 8007628:	2300      	movs	r3, #0
 800762a:	6363      	str	r3, [r4, #52]	; 0x34
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	2300      	movs	r3, #0
 8007636:	6063      	str	r3, [r4, #4]
 8007638:	6923      	ldr	r3, [r4, #16]
 800763a:	6023      	str	r3, [r4, #0]
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f043 0308 	orr.w	r3, r3, #8
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	b94b      	cbnz	r3, 800765c <__swsetup_r+0x7c>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800764e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007652:	d003      	beq.n	800765c <__swsetup_r+0x7c>
 8007654:	4621      	mov	r1, r4
 8007656:	4628      	mov	r0, r5
 8007658:	f000 fd36 	bl	80080c8 <__smakebuf_r>
 800765c:	89a0      	ldrh	r0, [r4, #12]
 800765e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007662:	f010 0301 	ands.w	r3, r0, #1
 8007666:	d00a      	beq.n	800767e <__swsetup_r+0x9e>
 8007668:	2300      	movs	r3, #0
 800766a:	60a3      	str	r3, [r4, #8]
 800766c:	6963      	ldr	r3, [r4, #20]
 800766e:	425b      	negs	r3, r3
 8007670:	61a3      	str	r3, [r4, #24]
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	b943      	cbnz	r3, 8007688 <__swsetup_r+0xa8>
 8007676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800767a:	d1c4      	bne.n	8007606 <__swsetup_r+0x26>
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	0781      	lsls	r1, r0, #30
 8007680:	bf58      	it	pl
 8007682:	6963      	ldrpl	r3, [r4, #20]
 8007684:	60a3      	str	r3, [r4, #8]
 8007686:	e7f4      	b.n	8007672 <__swsetup_r+0x92>
 8007688:	2000      	movs	r0, #0
 800768a:	e7f7      	b.n	800767c <__swsetup_r+0x9c>
 800768c:	2000007c 	.word	0x2000007c

08007690 <memset>:
 8007690:	4402      	add	r2, r0
 8007692:	4603      	mov	r3, r0
 8007694:	4293      	cmp	r3, r2
 8007696:	d100      	bne.n	800769a <memset+0xa>
 8007698:	4770      	bx	lr
 800769a:	f803 1b01 	strb.w	r1, [r3], #1
 800769e:	e7f9      	b.n	8007694 <memset+0x4>

080076a0 <_close_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d06      	ldr	r5, [pc, #24]	; (80076bc <_close_r+0x1c>)
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7fa fac5 	bl	8001c3a <_close>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_close_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_close_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200004c4 	.word	0x200004c4

080076c0 <_lseek_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d07      	ldr	r5, [pc, #28]	; (80076e0 <_lseek_r+0x20>)
 80076c4:	4604      	mov	r4, r0
 80076c6:	4608      	mov	r0, r1
 80076c8:	4611      	mov	r1, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	602a      	str	r2, [r5, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7fa fada 	bl	8001c88 <_lseek>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_lseek_r+0x1e>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_lseek_r+0x1e>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	200004c4 	.word	0x200004c4

080076e4 <_read_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4d07      	ldr	r5, [pc, #28]	; (8007704 <_read_r+0x20>)
 80076e8:	4604      	mov	r4, r0
 80076ea:	4608      	mov	r0, r1
 80076ec:	4611      	mov	r1, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f7fa fa68 	bl	8001bc8 <_read>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_read_r+0x1e>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_read_r+0x1e>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	200004c4 	.word	0x200004c4

08007708 <_write_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d07      	ldr	r5, [pc, #28]	; (8007728 <_write_r+0x20>)
 800770c:	4604      	mov	r4, r0
 800770e:	4608      	mov	r0, r1
 8007710:	4611      	mov	r1, r2
 8007712:	2200      	movs	r2, #0
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f7fa fa73 	bl	8001c02 <_write>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_write_r+0x1e>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	b103      	cbz	r3, 8007726 <_write_r+0x1e>
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	200004c4 	.word	0x200004c4

0800772c <__errno>:
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <__errno+0x8>)
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000007c 	.word	0x2000007c

08007738 <__libc_init_array>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4d0d      	ldr	r5, [pc, #52]	; (8007770 <__libc_init_array+0x38>)
 800773c:	4c0d      	ldr	r4, [pc, #52]	; (8007774 <__libc_init_array+0x3c>)
 800773e:	1b64      	subs	r4, r4, r5
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	2600      	movs	r6, #0
 8007744:	42a6      	cmp	r6, r4
 8007746:	d109      	bne.n	800775c <__libc_init_array+0x24>
 8007748:	4d0b      	ldr	r5, [pc, #44]	; (8007778 <__libc_init_array+0x40>)
 800774a:	4c0c      	ldr	r4, [pc, #48]	; (800777c <__libc_init_array+0x44>)
 800774c:	f000 fd2a 	bl	80081a4 <_init>
 8007750:	1b64      	subs	r4, r4, r5
 8007752:	10a4      	asrs	r4, r4, #2
 8007754:	2600      	movs	r6, #0
 8007756:	42a6      	cmp	r6, r4
 8007758:	d105      	bne.n	8007766 <__libc_init_array+0x2e>
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007760:	4798      	blx	r3
 8007762:	3601      	adds	r6, #1
 8007764:	e7ee      	b.n	8007744 <__libc_init_array+0xc>
 8007766:	f855 3b04 	ldr.w	r3, [r5], #4
 800776a:	4798      	blx	r3
 800776c:	3601      	adds	r6, #1
 800776e:	e7f2      	b.n	8007756 <__libc_init_array+0x1e>
 8007770:	080087d0 	.word	0x080087d0
 8007774:	080087d0 	.word	0x080087d0
 8007778:	080087d0 	.word	0x080087d0
 800777c:	080087d4 	.word	0x080087d4

08007780 <__retarget_lock_init_recursive>:
 8007780:	4770      	bx	lr

08007782 <__retarget_lock_acquire_recursive>:
 8007782:	4770      	bx	lr

08007784 <__retarget_lock_release_recursive>:
 8007784:	4770      	bx	lr
	...

08007788 <_free_r>:
 8007788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800778a:	2900      	cmp	r1, #0
 800778c:	d044      	beq.n	8007818 <_free_r+0x90>
 800778e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007792:	9001      	str	r0, [sp, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f1a1 0404 	sub.w	r4, r1, #4
 800779a:	bfb8      	it	lt
 800779c:	18e4      	addlt	r4, r4, r3
 800779e:	f000 f8df 	bl	8007960 <__malloc_lock>
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <_free_r+0x94>)
 80077a4:	9801      	ldr	r0, [sp, #4]
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x30>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	b003      	add	sp, #12
 80077b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077b4:	f000 b8da 	b.w	800796c <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x46>
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1961      	adds	r1, r4, r5
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x22>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x50>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x46>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1855      	adds	r5, r2, r1
 80077dc:	42a5      	cmp	r5, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x70>
 80077e0:	6824      	ldr	r4, [r4, #0]
 80077e2:	4421      	add	r1, r4
 80077e4:	1854      	adds	r4, r2, r1
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x26>
 80077ec:	681c      	ldr	r4, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	440c      	add	r4, r1
 80077f4:	6014      	str	r4, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x26>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x78>
 80077fa:	230c      	movs	r3, #12
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x26>
 8007800:	6825      	ldr	r5, [r4, #0]
 8007802:	1961      	adds	r1, r4, r5
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1949      	addeq	r1, r1, r5
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x26>
 8007818:	b003      	add	sp, #12
 800781a:	bd30      	pop	{r4, r5, pc}
 800781c:	200004cc 	.word	0x200004cc

08007820 <sbrk_aligned>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0e      	ldr	r6, [pc, #56]	; (800785c <sbrk_aligned+0x3c>)
 8007824:	460c      	mov	r4, r1
 8007826:	6831      	ldr	r1, [r6, #0]
 8007828:	4605      	mov	r5, r0
 800782a:	b911      	cbnz	r1, 8007832 <sbrk_aligned+0x12>
 800782c:	f000 fcaa 	bl	8008184 <_sbrk_r>
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fca5 	bl	8008184 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d00a      	beq.n	8007854 <sbrk_aligned+0x34>
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d007      	beq.n	8007858 <sbrk_aligned+0x38>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4628      	mov	r0, r5
 800784c:	f000 fc9a 	bl	8008184 <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d101      	bne.n	8007858 <sbrk_aligned+0x38>
 8007854:	f04f 34ff 	mov.w	r4, #4294967295
 8007858:	4620      	mov	r0, r4
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	200004d0 	.word	0x200004d0

08007860 <_malloc_r>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	1ccd      	adds	r5, r1, #3
 8007866:	f025 0503 	bic.w	r5, r5, #3
 800786a:	3508      	adds	r5, #8
 800786c:	2d0c      	cmp	r5, #12
 800786e:	bf38      	it	cc
 8007870:	250c      	movcc	r5, #12
 8007872:	2d00      	cmp	r5, #0
 8007874:	4607      	mov	r7, r0
 8007876:	db01      	blt.n	800787c <_malloc_r+0x1c>
 8007878:	42a9      	cmp	r1, r5
 800787a:	d905      	bls.n	8007888 <_malloc_r+0x28>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2600      	movs	r6, #0
 8007882:	4630      	mov	r0, r6
 8007884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800795c <_malloc_r+0xfc>
 800788c:	f000 f868 	bl	8007960 <__malloc_lock>
 8007890:	f8d8 3000 	ldr.w	r3, [r8]
 8007894:	461c      	mov	r4, r3
 8007896:	bb5c      	cbnz	r4, 80078f0 <_malloc_r+0x90>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ffc0 	bl	8007820 <sbrk_aligned>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	4604      	mov	r4, r0
 80078a4:	d155      	bne.n	8007952 <_malloc_r+0xf2>
 80078a6:	f8d8 4000 	ldr.w	r4, [r8]
 80078aa:	4626      	mov	r6, r4
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	d145      	bne.n	800793c <_malloc_r+0xdc>
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	d048      	beq.n	8007946 <_malloc_r+0xe6>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	eb04 0903 	add.w	r9, r4, r3
 80078be:	f000 fc61 	bl	8008184 <_sbrk_r>
 80078c2:	4581      	cmp	r9, r0
 80078c4:	d13f      	bne.n	8007946 <_malloc_r+0xe6>
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	1a6d      	subs	r5, r5, r1
 80078ca:	4629      	mov	r1, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ffa7 	bl	8007820 <sbrk_aligned>
 80078d2:	3001      	adds	r0, #1
 80078d4:	d037      	beq.n	8007946 <_malloc_r+0xe6>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	442b      	add	r3, r5
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	f8d8 3000 	ldr.w	r3, [r8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d038      	beq.n	8007956 <_malloc_r+0xf6>
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	42a2      	cmp	r2, r4
 80078e8:	d12b      	bne.n	8007942 <_malloc_r+0xe2>
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	e00f      	b.n	8007910 <_malloc_r+0xb0>
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	1b52      	subs	r2, r2, r5
 80078f4:	d41f      	bmi.n	8007936 <_malloc_r+0xd6>
 80078f6:	2a0b      	cmp	r2, #11
 80078f8:	d917      	bls.n	800792a <_malloc_r+0xca>
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	6059      	strne	r1, [r3, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	bf08      	it	eq
 8007908:	f8c8 1000 	streq.w	r1, [r8]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f000 f829 	bl	800796c <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0ae      	beq.n	8007882 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7ab      	b.n	8007882 <_malloc_r+0x22>
 800792a:	42a3      	cmp	r3, r4
 800792c:	6862      	ldr	r2, [r4, #4]
 800792e:	d1dd      	bne.n	80078ec <_malloc_r+0x8c>
 8007930:	f8c8 2000 	str.w	r2, [r8]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xb0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7ac      	b.n	8007896 <_malloc_r+0x36>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b4      	b.n	80078ac <_malloc_r+0x4c>
 8007942:	4613      	mov	r3, r2
 8007944:	e7cc      	b.n	80078e0 <_malloc_r+0x80>
 8007946:	230c      	movs	r3, #12
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4638      	mov	r0, r7
 800794c:	f000 f80e 	bl	800796c <__malloc_unlock>
 8007950:	e797      	b.n	8007882 <_malloc_r+0x22>
 8007952:	6025      	str	r5, [r4, #0]
 8007954:	e7dc      	b.n	8007910 <_malloc_r+0xb0>
 8007956:	605b      	str	r3, [r3, #4]
 8007958:	deff      	udf	#255	; 0xff
 800795a:	bf00      	nop
 800795c:	200004cc 	.word	0x200004cc

08007960 <__malloc_lock>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__malloc_lock+0x8>)
 8007962:	f7ff bf0e 	b.w	8007782 <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	200004c8 	.word	0x200004c8

0800796c <__malloc_unlock>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__malloc_unlock+0x8>)
 800796e:	f7ff bf09 	b.w	8007784 <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	200004c8 	.word	0x200004c8

08007978 <__sfputc_r>:
 8007978:	6893      	ldr	r3, [r2, #8]
 800797a:	3b01      	subs	r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	b410      	push	{r4}
 8007980:	6093      	str	r3, [r2, #8]
 8007982:	da08      	bge.n	8007996 <__sfputc_r+0x1e>
 8007984:	6994      	ldr	r4, [r2, #24]
 8007986:	42a3      	cmp	r3, r4
 8007988:	db01      	blt.n	800798e <__sfputc_r+0x16>
 800798a:	290a      	cmp	r1, #10
 800798c:	d103      	bne.n	8007996 <__sfputc_r+0x1e>
 800798e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007992:	f7ff bde8 	b.w	8007566 <__swbuf_r>
 8007996:	6813      	ldr	r3, [r2, #0]
 8007998:	1c58      	adds	r0, r3, #1
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	7019      	strb	r1, [r3, #0]
 800799e:	4608      	mov	r0, r1
 80079a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <__sfputs_r>:
 80079a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a8:	4606      	mov	r6, r0
 80079aa:	460f      	mov	r7, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	18d5      	adds	r5, r2, r3
 80079b0:	42ac      	cmp	r4, r5
 80079b2:	d101      	bne.n	80079b8 <__sfputs_r+0x12>
 80079b4:	2000      	movs	r0, #0
 80079b6:	e007      	b.n	80079c8 <__sfputs_r+0x22>
 80079b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079bc:	463a      	mov	r2, r7
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ffda 	bl	8007978 <__sfputc_r>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d1f3      	bne.n	80079b0 <__sfputs_r+0xa>
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079cc <_vfiprintf_r>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	460d      	mov	r5, r1
 80079d2:	b09d      	sub	sp, #116	; 0x74
 80079d4:	4614      	mov	r4, r2
 80079d6:	4698      	mov	r8, r3
 80079d8:	4606      	mov	r6, r0
 80079da:	b118      	cbz	r0, 80079e4 <_vfiprintf_r+0x18>
 80079dc:	6a03      	ldr	r3, [r0, #32]
 80079de:	b90b      	cbnz	r3, 80079e4 <_vfiprintf_r+0x18>
 80079e0:	f7ff fcda 	bl	8007398 <__sinit>
 80079e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e6:	07d9      	lsls	r1, r3, #31
 80079e8:	d405      	bmi.n	80079f6 <_vfiprintf_r+0x2a>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	059a      	lsls	r2, r3, #22
 80079ee:	d402      	bmi.n	80079f6 <_vfiprintf_r+0x2a>
 80079f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079f2:	f7ff fec6 	bl	8007782 <__retarget_lock_acquire_recursive>
 80079f6:	89ab      	ldrh	r3, [r5, #12]
 80079f8:	071b      	lsls	r3, r3, #28
 80079fa:	d501      	bpl.n	8007a00 <_vfiprintf_r+0x34>
 80079fc:	692b      	ldr	r3, [r5, #16]
 80079fe:	b99b      	cbnz	r3, 8007a28 <_vfiprintf_r+0x5c>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff fdec 	bl	80075e0 <__swsetup_r>
 8007a08:	b170      	cbz	r0, 8007a28 <_vfiprintf_r+0x5c>
 8007a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0c:	07dc      	lsls	r4, r3, #31
 8007a0e:	d504      	bpl.n	8007a1a <_vfiprintf_r+0x4e>
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	b01d      	add	sp, #116	; 0x74
 8007a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	0598      	lsls	r0, r3, #22
 8007a1e:	d4f7      	bmi.n	8007a10 <_vfiprintf_r+0x44>
 8007a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a22:	f7ff feaf 	bl	8007784 <__retarget_lock_release_recursive>
 8007a26:	e7f3      	b.n	8007a10 <_vfiprintf_r+0x44>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	2320      	movs	r3, #32
 8007a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a36:	2330      	movs	r3, #48	; 0x30
 8007a38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007bec <_vfiprintf_r+0x220>
 8007a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a40:	f04f 0901 	mov.w	r9, #1
 8007a44:	4623      	mov	r3, r4
 8007a46:	469a      	mov	sl, r3
 8007a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a4c:	b10a      	cbz	r2, 8007a52 <_vfiprintf_r+0x86>
 8007a4e:	2a25      	cmp	r2, #37	; 0x25
 8007a50:	d1f9      	bne.n	8007a46 <_vfiprintf_r+0x7a>
 8007a52:	ebba 0b04 	subs.w	fp, sl, r4
 8007a56:	d00b      	beq.n	8007a70 <_vfiprintf_r+0xa4>
 8007a58:	465b      	mov	r3, fp
 8007a5a:	4622      	mov	r2, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff ffa1 	bl	80079a6 <__sfputs_r>
 8007a64:	3001      	adds	r0, #1
 8007a66:	f000 80a9 	beq.w	8007bbc <_vfiprintf_r+0x1f0>
 8007a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a6c:	445a      	add	r2, fp
 8007a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a70:	f89a 3000 	ldrb.w	r3, [sl]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80a1 	beq.w	8007bbc <_vfiprintf_r+0x1f0>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a84:	f10a 0a01 	add.w	sl, sl, #1
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	9307      	str	r3, [sp, #28]
 8007a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a90:	931a      	str	r3, [sp, #104]	; 0x68
 8007a92:	4654      	mov	r4, sl
 8007a94:	2205      	movs	r2, #5
 8007a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9a:	4854      	ldr	r0, [pc, #336]	; (8007bec <_vfiprintf_r+0x220>)
 8007a9c:	f7f8 fba0 	bl	80001e0 <memchr>
 8007aa0:	9a04      	ldr	r2, [sp, #16]
 8007aa2:	b9d8      	cbnz	r0, 8007adc <_vfiprintf_r+0x110>
 8007aa4:	06d1      	lsls	r1, r2, #27
 8007aa6:	bf44      	itt	mi
 8007aa8:	2320      	movmi	r3, #32
 8007aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aae:	0713      	lsls	r3, r2, #28
 8007ab0:	bf44      	itt	mi
 8007ab2:	232b      	movmi	r3, #43	; 0x2b
 8007ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8007abc:	2b2a      	cmp	r3, #42	; 0x2a
 8007abe:	d015      	beq.n	8007aec <_vfiprintf_r+0x120>
 8007ac0:	9a07      	ldr	r2, [sp, #28]
 8007ac2:	4654      	mov	r4, sl
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f04f 0c0a 	mov.w	ip, #10
 8007aca:	4621      	mov	r1, r4
 8007acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad0:	3b30      	subs	r3, #48	; 0x30
 8007ad2:	2b09      	cmp	r3, #9
 8007ad4:	d94d      	bls.n	8007b72 <_vfiprintf_r+0x1a6>
 8007ad6:	b1b0      	cbz	r0, 8007b06 <_vfiprintf_r+0x13a>
 8007ad8:	9207      	str	r2, [sp, #28]
 8007ada:	e014      	b.n	8007b06 <_vfiprintf_r+0x13a>
 8007adc:	eba0 0308 	sub.w	r3, r0, r8
 8007ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	9304      	str	r3, [sp, #16]
 8007ae8:	46a2      	mov	sl, r4
 8007aea:	e7d2      	b.n	8007a92 <_vfiprintf_r+0xc6>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	1d19      	adds	r1, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	9103      	str	r1, [sp, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbb      	ittet	lt
 8007af8:	425b      	neglt	r3, r3
 8007afa:	f042 0202 	orrlt.w	r2, r2, #2
 8007afe:	9307      	strge	r3, [sp, #28]
 8007b00:	9307      	strlt	r3, [sp, #28]
 8007b02:	bfb8      	it	lt
 8007b04:	9204      	strlt	r2, [sp, #16]
 8007b06:	7823      	ldrb	r3, [r4, #0]
 8007b08:	2b2e      	cmp	r3, #46	; 0x2e
 8007b0a:	d10c      	bne.n	8007b26 <_vfiprintf_r+0x15a>
 8007b0c:	7863      	ldrb	r3, [r4, #1]
 8007b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b10:	d134      	bne.n	8007b7c <_vfiprintf_r+0x1b0>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	1d1a      	adds	r2, r3, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	9203      	str	r2, [sp, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfb8      	it	lt
 8007b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b22:	3402      	adds	r4, #2
 8007b24:	9305      	str	r3, [sp, #20]
 8007b26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bfc <_vfiprintf_r+0x230>
 8007b2a:	7821      	ldrb	r1, [r4, #0]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f7f8 fb56 	bl	80001e0 <memchr>
 8007b34:	b138      	cbz	r0, 8007b46 <_vfiprintf_r+0x17a>
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	eba0 000a 	sub.w	r0, r0, sl
 8007b3c:	2240      	movs	r2, #64	; 0x40
 8007b3e:	4082      	lsls	r2, r0
 8007b40:	4313      	orrs	r3, r2
 8007b42:	3401      	adds	r4, #1
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4829      	ldr	r0, [pc, #164]	; (8007bf0 <_vfiprintf_r+0x224>)
 8007b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b50:	2206      	movs	r2, #6
 8007b52:	f7f8 fb45 	bl	80001e0 <memchr>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d03f      	beq.n	8007bda <_vfiprintf_r+0x20e>
 8007b5a:	4b26      	ldr	r3, [pc, #152]	; (8007bf4 <_vfiprintf_r+0x228>)
 8007b5c:	bb1b      	cbnz	r3, 8007ba6 <_vfiprintf_r+0x1da>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	3307      	adds	r3, #7
 8007b62:	f023 0307 	bic.w	r3, r3, #7
 8007b66:	3308      	adds	r3, #8
 8007b68:	9303      	str	r3, [sp, #12]
 8007b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6c:	443b      	add	r3, r7
 8007b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b70:	e768      	b.n	8007a44 <_vfiprintf_r+0x78>
 8007b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b76:	460c      	mov	r4, r1
 8007b78:	2001      	movs	r0, #1
 8007b7a:	e7a6      	b.n	8007aca <_vfiprintf_r+0xfe>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	3401      	adds	r4, #1
 8007b80:	9305      	str	r3, [sp, #20]
 8007b82:	4619      	mov	r1, r3
 8007b84:	f04f 0c0a 	mov.w	ip, #10
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b8e:	3a30      	subs	r2, #48	; 0x30
 8007b90:	2a09      	cmp	r2, #9
 8007b92:	d903      	bls.n	8007b9c <_vfiprintf_r+0x1d0>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0c6      	beq.n	8007b26 <_vfiprintf_r+0x15a>
 8007b98:	9105      	str	r1, [sp, #20]
 8007b9a:	e7c4      	b.n	8007b26 <_vfiprintf_r+0x15a>
 8007b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7f0      	b.n	8007b88 <_vfiprintf_r+0x1bc>
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <_vfiprintf_r+0x22c>)
 8007bae:	a904      	add	r1, sp, #16
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f3af 8000 	nop.w
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	1c78      	adds	r0, r7, #1
 8007bba:	d1d6      	bne.n	8007b6a <_vfiprintf_r+0x19e>
 8007bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bbe:	07d9      	lsls	r1, r3, #31
 8007bc0:	d405      	bmi.n	8007bce <_vfiprintf_r+0x202>
 8007bc2:	89ab      	ldrh	r3, [r5, #12]
 8007bc4:	059a      	lsls	r2, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_vfiprintf_r+0x202>
 8007bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bca:	f7ff fddb 	bl	8007784 <__retarget_lock_release_recursive>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	065b      	lsls	r3, r3, #25
 8007bd2:	f53f af1d 	bmi.w	8007a10 <_vfiprintf_r+0x44>
 8007bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd8:	e71c      	b.n	8007a14 <_vfiprintf_r+0x48>
 8007bda:	ab03      	add	r3, sp, #12
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	462a      	mov	r2, r5
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <_vfiprintf_r+0x22c>)
 8007be2:	a904      	add	r1, sp, #16
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f879 	bl	8007cdc <_printf_i>
 8007bea:	e7e4      	b.n	8007bb6 <_vfiprintf_r+0x1ea>
 8007bec:	08008794 	.word	0x08008794
 8007bf0:	0800879e 	.word	0x0800879e
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	080079a7 	.word	0x080079a7
 8007bfc:	0800879a 	.word	0x0800879a

08007c00 <_printf_common>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	4616      	mov	r6, r2
 8007c06:	4699      	mov	r9, r3
 8007c08:	688a      	ldr	r2, [r1, #8]
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	bfb8      	it	lt
 8007c14:	4613      	movlt	r3, r2
 8007c16:	6033      	str	r3, [r6, #0]
 8007c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b10a      	cbz	r2, 8007c26 <_printf_common+0x26>
 8007c22:	3301      	adds	r3, #1
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	0699      	lsls	r1, r3, #26
 8007c2a:	bf42      	ittt	mi
 8007c2c:	6833      	ldrmi	r3, [r6, #0]
 8007c2e:	3302      	addmi	r3, #2
 8007c30:	6033      	strmi	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	f015 0506 	ands.w	r5, r5, #6
 8007c38:	d106      	bne.n	8007c48 <_printf_common+0x48>
 8007c3a:	f104 0a19 	add.w	sl, r4, #25
 8007c3e:	68e3      	ldr	r3, [r4, #12]
 8007c40:	6832      	ldr	r2, [r6, #0]
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	dc26      	bgt.n	8007c96 <_printf_common+0x96>
 8007c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c4c:	1e13      	subs	r3, r2, #0
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	bf18      	it	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	0692      	lsls	r2, r2, #26
 8007c56:	d42b      	bmi.n	8007cb0 <_printf_common+0xb0>
 8007c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4638      	mov	r0, r7
 8007c60:	47c0      	blx	r8
 8007c62:	3001      	adds	r0, #1
 8007c64:	d01e      	beq.n	8007ca4 <_printf_common+0xa4>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	6922      	ldr	r2, [r4, #16]
 8007c6a:	f003 0306 	and.w	r3, r3, #6
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	bf02      	ittt	eq
 8007c72:	68e5      	ldreq	r5, [r4, #12]
 8007c74:	6833      	ldreq	r3, [r6, #0]
 8007c76:	1aed      	subeq	r5, r5, r3
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	bf0c      	ite	eq
 8007c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c80:	2500      	movne	r5, #0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	bfc4      	itt	gt
 8007c86:	1a9b      	subgt	r3, r3, r2
 8007c88:	18ed      	addgt	r5, r5, r3
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	341a      	adds	r4, #26
 8007c8e:	42b5      	cmp	r5, r6
 8007c90:	d11a      	bne.n	8007cc8 <_printf_common+0xc8>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e008      	b.n	8007ca8 <_printf_common+0xa8>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	47c0      	blx	r8
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d103      	bne.n	8007cac <_printf_common+0xac>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	3501      	adds	r5, #1
 8007cae:	e7c6      	b.n	8007c3e <_printf_common+0x3e>
 8007cb0:	18e1      	adds	r1, r4, r3
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	2030      	movs	r0, #48	; 0x30
 8007cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cba:	4422      	add	r2, r4
 8007cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	e7c7      	b.n	8007c58 <_printf_common+0x58>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4622      	mov	r2, r4
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d0e6      	beq.n	8007ca4 <_printf_common+0xa4>
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7d9      	b.n	8007c8e <_printf_common+0x8e>
	...

08007cdc <_printf_i>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	7e0f      	ldrb	r7, [r1, #24]
 8007ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce4:	2f78      	cmp	r7, #120	; 0x78
 8007ce6:	4691      	mov	r9, r2
 8007ce8:	4680      	mov	r8, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	469a      	mov	sl, r3
 8007cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cf2:	d807      	bhi.n	8007d04 <_printf_i+0x28>
 8007cf4:	2f62      	cmp	r7, #98	; 0x62
 8007cf6:	d80a      	bhi.n	8007d0e <_printf_i+0x32>
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	f000 80d4 	beq.w	8007ea6 <_printf_i+0x1ca>
 8007cfe:	2f58      	cmp	r7, #88	; 0x58
 8007d00:	f000 80c0 	beq.w	8007e84 <_printf_i+0x1a8>
 8007d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d0c:	e03a      	b.n	8007d84 <_printf_i+0xa8>
 8007d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d12:	2b15      	cmp	r3, #21
 8007d14:	d8f6      	bhi.n	8007d04 <_printf_i+0x28>
 8007d16:	a101      	add	r1, pc, #4	; (adr r1, 8007d1c <_printf_i+0x40>)
 8007d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d1c:	08007d75 	.word	0x08007d75
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007d05 	.word	0x08007d05
 8007d28:	08007d05 	.word	0x08007d05
 8007d2c:	08007d05 	.word	0x08007d05
 8007d30:	08007d05 	.word	0x08007d05
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d05 	.word	0x08007d05
 8007d3c:	08007d05 	.word	0x08007d05
 8007d40:	08007d05 	.word	0x08007d05
 8007d44:	08007d05 	.word	0x08007d05
 8007d48:	08007e8d 	.word	0x08007e8d
 8007d4c:	08007db5 	.word	0x08007db5
 8007d50:	08007e47 	.word	0x08007e47
 8007d54:	08007d05 	.word	0x08007d05
 8007d58:	08007d05 	.word	0x08007d05
 8007d5c:	08007eaf 	.word	0x08007eaf
 8007d60:	08007d05 	.word	0x08007d05
 8007d64:	08007db5 	.word	0x08007db5
 8007d68:	08007d05 	.word	0x08007d05
 8007d6c:	08007d05 	.word	0x08007d05
 8007d70:	08007e4f 	.word	0x08007e4f
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	602a      	str	r2, [r5, #0]
 8007d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d84:	2301      	movs	r3, #1
 8007d86:	e09f      	b.n	8007ec8 <_printf_i+0x1ec>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	682b      	ldr	r3, [r5, #0]
 8007d8c:	0607      	lsls	r7, r0, #24
 8007d8e:	f103 0104 	add.w	r1, r3, #4
 8007d92:	6029      	str	r1, [r5, #0]
 8007d94:	d501      	bpl.n	8007d9a <_printf_i+0xbe>
 8007d96:	681e      	ldr	r6, [r3, #0]
 8007d98:	e003      	b.n	8007da2 <_printf_i+0xc6>
 8007d9a:	0646      	lsls	r6, r0, #25
 8007d9c:	d5fb      	bpl.n	8007d96 <_printf_i+0xba>
 8007d9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007da2:	2e00      	cmp	r6, #0
 8007da4:	da03      	bge.n	8007dae <_printf_i+0xd2>
 8007da6:	232d      	movs	r3, #45	; 0x2d
 8007da8:	4276      	negs	r6, r6
 8007daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dae:	485a      	ldr	r0, [pc, #360]	; (8007f18 <_printf_i+0x23c>)
 8007db0:	230a      	movs	r3, #10
 8007db2:	e012      	b.n	8007dda <_printf_i+0xfe>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1d19      	adds	r1, r3, #4
 8007dba:	6029      	str	r1, [r5, #0]
 8007dbc:	0605      	lsls	r5, r0, #24
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_i+0xe8>
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <_printf_i+0xee>
 8007dc4:	0641      	lsls	r1, r0, #25
 8007dc6:	d5fb      	bpl.n	8007dc0 <_printf_i+0xe4>
 8007dc8:	881e      	ldrh	r6, [r3, #0]
 8007dca:	4853      	ldr	r0, [pc, #332]	; (8007f18 <_printf_i+0x23c>)
 8007dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dce:	bf0c      	ite	eq
 8007dd0:	2308      	moveq	r3, #8
 8007dd2:	230a      	movne	r3, #10
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dda:	6865      	ldr	r5, [r4, #4]
 8007ddc:	60a5      	str	r5, [r4, #8]
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	bfa2      	ittt	ge
 8007de2:	6821      	ldrge	r1, [r4, #0]
 8007de4:	f021 0104 	bicge.w	r1, r1, #4
 8007de8:	6021      	strge	r1, [r4, #0]
 8007dea:	b90e      	cbnz	r6, 8007df0 <_printf_i+0x114>
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d04b      	beq.n	8007e88 <_printf_i+0x1ac>
 8007df0:	4615      	mov	r5, r2
 8007df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007df6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dfa:	5dc7      	ldrb	r7, [r0, r7]
 8007dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e00:	4637      	mov	r7, r6
 8007e02:	42bb      	cmp	r3, r7
 8007e04:	460e      	mov	r6, r1
 8007e06:	d9f4      	bls.n	8007df2 <_printf_i+0x116>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d10b      	bne.n	8007e24 <_printf_i+0x148>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	07de      	lsls	r6, r3, #31
 8007e10:	d508      	bpl.n	8007e24 <_printf_i+0x148>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	6861      	ldr	r1, [r4, #4]
 8007e16:	4299      	cmp	r1, r3
 8007e18:	bfde      	ittt	le
 8007e1a:	2330      	movle	r3, #48	; 0x30
 8007e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e24:	1b52      	subs	r2, r2, r5
 8007e26:	6122      	str	r2, [r4, #16]
 8007e28:	f8cd a000 	str.w	sl, [sp]
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	aa03      	add	r2, sp, #12
 8007e30:	4621      	mov	r1, r4
 8007e32:	4640      	mov	r0, r8
 8007e34:	f7ff fee4 	bl	8007c00 <_printf_common>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d14a      	bne.n	8007ed2 <_printf_i+0x1f6>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	b004      	add	sp, #16
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f043 0320 	orr.w	r3, r3, #32
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	4833      	ldr	r0, [pc, #204]	; (8007f1c <_printf_i+0x240>)
 8007e50:	2778      	movs	r7, #120	; 0x78
 8007e52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	6829      	ldr	r1, [r5, #0]
 8007e5a:	061f      	lsls	r7, r3, #24
 8007e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e60:	d402      	bmi.n	8007e68 <_printf_i+0x18c>
 8007e62:	065f      	lsls	r7, r3, #25
 8007e64:	bf48      	it	mi
 8007e66:	b2b6      	uxthmi	r6, r6
 8007e68:	07df      	lsls	r7, r3, #31
 8007e6a:	bf48      	it	mi
 8007e6c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e70:	6029      	str	r1, [r5, #0]
 8007e72:	bf48      	it	mi
 8007e74:	6023      	strmi	r3, [r4, #0]
 8007e76:	b91e      	cbnz	r6, 8007e80 <_printf_i+0x1a4>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	f023 0320 	bic.w	r3, r3, #32
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	2310      	movs	r3, #16
 8007e82:	e7a7      	b.n	8007dd4 <_printf_i+0xf8>
 8007e84:	4824      	ldr	r0, [pc, #144]	; (8007f18 <_printf_i+0x23c>)
 8007e86:	e7e4      	b.n	8007e52 <_printf_i+0x176>
 8007e88:	4615      	mov	r5, r2
 8007e8a:	e7bd      	b.n	8007e08 <_printf_i+0x12c>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6826      	ldr	r6, [r4, #0]
 8007e90:	6961      	ldr	r1, [r4, #20]
 8007e92:	1d18      	adds	r0, r3, #4
 8007e94:	6028      	str	r0, [r5, #0]
 8007e96:	0635      	lsls	r5, r6, #24
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_i+0x1c4>
 8007e9c:	6019      	str	r1, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <_printf_i+0x1ca>
 8007ea0:	0670      	lsls	r0, r6, #25
 8007ea2:	d5fb      	bpl.n	8007e9c <_printf_i+0x1c0>
 8007ea4:	8019      	strh	r1, [r3, #0]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	4615      	mov	r5, r2
 8007eac:	e7bc      	b.n	8007e28 <_printf_i+0x14c>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	1d1a      	adds	r2, r3, #4
 8007eb2:	602a      	str	r2, [r5, #0]
 8007eb4:	681d      	ldr	r5, [r3, #0]
 8007eb6:	6862      	ldr	r2, [r4, #4]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7f8 f990 	bl	80001e0 <memchr>
 8007ec0:	b108      	cbz	r0, 8007ec6 <_printf_i+0x1ea>
 8007ec2:	1b40      	subs	r0, r0, r5
 8007ec4:	6060      	str	r0, [r4, #4]
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	6123      	str	r3, [r4, #16]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed0:	e7aa      	b.n	8007e28 <_printf_i+0x14c>
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4640      	mov	r0, r8
 8007eda:	47d0      	blx	sl
 8007edc:	3001      	adds	r0, #1
 8007ede:	d0ad      	beq.n	8007e3c <_printf_i+0x160>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	079b      	lsls	r3, r3, #30
 8007ee4:	d413      	bmi.n	8007f0e <_printf_i+0x232>
 8007ee6:	68e0      	ldr	r0, [r4, #12]
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	4298      	cmp	r0, r3
 8007eec:	bfb8      	it	lt
 8007eee:	4618      	movlt	r0, r3
 8007ef0:	e7a6      	b.n	8007e40 <_printf_i+0x164>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	4640      	mov	r0, r8
 8007efa:	47d0      	blx	sl
 8007efc:	3001      	adds	r0, #1
 8007efe:	d09d      	beq.n	8007e3c <_printf_i+0x160>
 8007f00:	3501      	adds	r5, #1
 8007f02:	68e3      	ldr	r3, [r4, #12]
 8007f04:	9903      	ldr	r1, [sp, #12]
 8007f06:	1a5b      	subs	r3, r3, r1
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	dcf2      	bgt.n	8007ef2 <_printf_i+0x216>
 8007f0c:	e7eb      	b.n	8007ee6 <_printf_i+0x20a>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	f104 0619 	add.w	r6, r4, #25
 8007f14:	e7f5      	b.n	8007f02 <_printf_i+0x226>
 8007f16:	bf00      	nop
 8007f18:	080087a5 	.word	0x080087a5
 8007f1c:	080087b6 	.word	0x080087b6

08007f20 <__sflush_r>:
 8007f20:	898a      	ldrh	r2, [r1, #12]
 8007f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f26:	4605      	mov	r5, r0
 8007f28:	0710      	lsls	r0, r2, #28
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	d458      	bmi.n	8007fe0 <__sflush_r+0xc0>
 8007f2e:	684b      	ldr	r3, [r1, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dc05      	bgt.n	8007f40 <__sflush_r+0x20>
 8007f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dc02      	bgt.n	8007f40 <__sflush_r+0x20>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	d0f9      	beq.n	8007f3a <__sflush_r+0x1a>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f4c:	682f      	ldr	r7, [r5, #0]
 8007f4e:	6a21      	ldr	r1, [r4, #32]
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	d032      	beq.n	8007fba <__sflush_r+0x9a>
 8007f54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	075a      	lsls	r2, r3, #29
 8007f5a:	d505      	bpl.n	8007f68 <__sflush_r+0x48>
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	1ac0      	subs	r0, r0, r3
 8007f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f62:	b10b      	cbz	r3, 8007f68 <__sflush_r+0x48>
 8007f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f66:	1ac0      	subs	r0, r0, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6e:	6a21      	ldr	r1, [r4, #32]
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b0      	blx	r6
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	d106      	bne.n	8007f88 <__sflush_r+0x68>
 8007f7a:	6829      	ldr	r1, [r5, #0]
 8007f7c:	291d      	cmp	r1, #29
 8007f7e:	d82b      	bhi.n	8007fd8 <__sflush_r+0xb8>
 8007f80:	4a29      	ldr	r2, [pc, #164]	; (8008028 <__sflush_r+0x108>)
 8007f82:	410a      	asrs	r2, r1
 8007f84:	07d6      	lsls	r6, r2, #31
 8007f86:	d427      	bmi.n	8007fd8 <__sflush_r+0xb8>
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6062      	str	r2, [r4, #4]
 8007f8c:	04d9      	lsls	r1, r3, #19
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	6022      	str	r2, [r4, #0]
 8007f92:	d504      	bpl.n	8007f9e <__sflush_r+0x7e>
 8007f94:	1c42      	adds	r2, r0, #1
 8007f96:	d101      	bne.n	8007f9c <__sflush_r+0x7c>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b903      	cbnz	r3, 8007f9e <__sflush_r+0x7e>
 8007f9c:	6560      	str	r0, [r4, #84]	; 0x54
 8007f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa0:	602f      	str	r7, [r5, #0]
 8007fa2:	2900      	cmp	r1, #0
 8007fa4:	d0c9      	beq.n	8007f3a <__sflush_r+0x1a>
 8007fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d002      	beq.n	8007fb4 <__sflush_r+0x94>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f7ff fbea 	bl	8007788 <_free_r>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	6360      	str	r0, [r4, #52]	; 0x34
 8007fb8:	e7c0      	b.n	8007f3c <__sflush_r+0x1c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b0      	blx	r6
 8007fc0:	1c41      	adds	r1, r0, #1
 8007fc2:	d1c8      	bne.n	8007f56 <__sflush_r+0x36>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0c5      	beq.n	8007f56 <__sflush_r+0x36>
 8007fca:	2b1d      	cmp	r3, #29
 8007fcc:	d001      	beq.n	8007fd2 <__sflush_r+0xb2>
 8007fce:	2b16      	cmp	r3, #22
 8007fd0:	d101      	bne.n	8007fd6 <__sflush_r+0xb6>
 8007fd2:	602f      	str	r7, [r5, #0]
 8007fd4:	e7b1      	b.n	8007f3a <__sflush_r+0x1a>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fdc:	81a3      	strh	r3, [r4, #12]
 8007fde:	e7ad      	b.n	8007f3c <__sflush_r+0x1c>
 8007fe0:	690f      	ldr	r7, [r1, #16]
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	d0a9      	beq.n	8007f3a <__sflush_r+0x1a>
 8007fe6:	0793      	lsls	r3, r2, #30
 8007fe8:	680e      	ldr	r6, [r1, #0]
 8007fea:	bf08      	it	eq
 8007fec:	694b      	ldreq	r3, [r1, #20]
 8007fee:	600f      	str	r7, [r1, #0]
 8007ff0:	bf18      	it	ne
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	eba6 0807 	sub.w	r8, r6, r7
 8007ff8:	608b      	str	r3, [r1, #8]
 8007ffa:	f1b8 0f00 	cmp.w	r8, #0
 8007ffe:	dd9c      	ble.n	8007f3a <__sflush_r+0x1a>
 8008000:	6a21      	ldr	r1, [r4, #32]
 8008002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008004:	4643      	mov	r3, r8
 8008006:	463a      	mov	r2, r7
 8008008:	4628      	mov	r0, r5
 800800a:	47b0      	blx	r6
 800800c:	2800      	cmp	r0, #0
 800800e:	dc06      	bgt.n	800801e <__sflush_r+0xfe>
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	e78e      	b.n	8007f3c <__sflush_r+0x1c>
 800801e:	4407      	add	r7, r0
 8008020:	eba8 0800 	sub.w	r8, r8, r0
 8008024:	e7e9      	b.n	8007ffa <__sflush_r+0xda>
 8008026:	bf00      	nop
 8008028:	dfbffffe 	.word	0xdfbffffe

0800802c <_fflush_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	690b      	ldr	r3, [r1, #16]
 8008030:	4605      	mov	r5, r0
 8008032:	460c      	mov	r4, r1
 8008034:	b913      	cbnz	r3, 800803c <_fflush_r+0x10>
 8008036:	2500      	movs	r5, #0
 8008038:	4628      	mov	r0, r5
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	b118      	cbz	r0, 8008046 <_fflush_r+0x1a>
 800803e:	6a03      	ldr	r3, [r0, #32]
 8008040:	b90b      	cbnz	r3, 8008046 <_fflush_r+0x1a>
 8008042:	f7ff f9a9 	bl	8007398 <__sinit>
 8008046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f3      	beq.n	8008036 <_fflush_r+0xa>
 800804e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008050:	07d0      	lsls	r0, r2, #31
 8008052:	d404      	bmi.n	800805e <_fflush_r+0x32>
 8008054:	0599      	lsls	r1, r3, #22
 8008056:	d402      	bmi.n	800805e <_fflush_r+0x32>
 8008058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800805a:	f7ff fb92 	bl	8007782 <__retarget_lock_acquire_recursive>
 800805e:	4628      	mov	r0, r5
 8008060:	4621      	mov	r1, r4
 8008062:	f7ff ff5d 	bl	8007f20 <__sflush_r>
 8008066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008068:	07da      	lsls	r2, r3, #31
 800806a:	4605      	mov	r5, r0
 800806c:	d4e4      	bmi.n	8008038 <_fflush_r+0xc>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	059b      	lsls	r3, r3, #22
 8008072:	d4e1      	bmi.n	8008038 <_fflush_r+0xc>
 8008074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008076:	f7ff fb85 	bl	8007784 <__retarget_lock_release_recursive>
 800807a:	e7dd      	b.n	8008038 <_fflush_r+0xc>

0800807c <__swhatbuf_r>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	460c      	mov	r4, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	2900      	cmp	r1, #0
 8008086:	b096      	sub	sp, #88	; 0x58
 8008088:	4615      	mov	r5, r2
 800808a:	461e      	mov	r6, r3
 800808c:	da0d      	bge.n	80080aa <__swhatbuf_r+0x2e>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008094:	f04f 0100 	mov.w	r1, #0
 8008098:	bf0c      	ite	eq
 800809a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800809e:	2340      	movne	r3, #64	; 0x40
 80080a0:	2000      	movs	r0, #0
 80080a2:	6031      	str	r1, [r6, #0]
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	b016      	add	sp, #88	; 0x58
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
 80080aa:	466a      	mov	r2, sp
 80080ac:	f000 f848 	bl	8008140 <_fstat_r>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dbec      	blt.n	800808e <__swhatbuf_r+0x12>
 80080b4:	9901      	ldr	r1, [sp, #4]
 80080b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080be:	4259      	negs	r1, r3
 80080c0:	4159      	adcs	r1, r3
 80080c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c6:	e7eb      	b.n	80080a0 <__swhatbuf_r+0x24>

080080c8 <__smakebuf_r>:
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080cc:	079d      	lsls	r5, r3, #30
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d507      	bpl.n	80080e4 <__smakebuf_r+0x1c>
 80080d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2301      	movs	r3, #1
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	b002      	add	sp, #8
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	ab01      	add	r3, sp, #4
 80080e6:	466a      	mov	r2, sp
 80080e8:	f7ff ffc8 	bl	800807c <__swhatbuf_r>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff fbb5 	bl	8007860 <_malloc_r>
 80080f6:	b948      	cbnz	r0, 800810c <__smakebuf_r+0x44>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d4ef      	bmi.n	80080e0 <__smakebuf_r+0x18>
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7e3      	b.n	80080d4 <__smakebuf_r+0xc>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	6020      	str	r0, [r4, #0]
 8008110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	6163      	str	r3, [r4, #20]
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	6120      	str	r0, [r4, #16]
 800811e:	b15b      	cbz	r3, 8008138 <__smakebuf_r+0x70>
 8008120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008124:	4630      	mov	r0, r6
 8008126:	f000 f81d 	bl	8008164 <_isatty_r>
 800812a:	b128      	cbz	r0, 8008138 <__smakebuf_r+0x70>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	431d      	orrs	r5, r3
 800813c:	81a5      	strh	r5, [r4, #12]
 800813e:	e7cf      	b.n	80080e0 <__smakebuf_r+0x18>

08008140 <_fstat_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	; (8008160 <_fstat_r+0x20>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	f7f9 fd80 	bl	8001c52 <_fstat>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d102      	bne.n	800815c <_fstat_r+0x1c>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	b103      	cbz	r3, 800815c <_fstat_r+0x1c>
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	200004c4 	.word	0x200004c4

08008164 <_isatty_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_isatty_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 fd7f 	bl	8001c72 <_isatty>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_isatty_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_isatty_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200004c4 	.word	0x200004c4

08008184 <_sbrk_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_sbrk_r+0x1c>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7f9 fd88 	bl	8001ca4 <_sbrk>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_sbrk_r+0x1a>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_sbrk_r+0x1a>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200004c4 	.word	0x200004c4

080081a4 <_init>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	bf00      	nop
 80081a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081aa:	bc08      	pop	{r3}
 80081ac:	469e      	mov	lr, r3
 80081ae:	4770      	bx	lr

080081b0 <_fini>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr
