
stm32f030f4_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080002f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000010  08000304  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000304  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a5f  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000046a  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00020f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000109  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f92  00000000  00000000  000211d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001982  00000000  00000000  00022163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00052d11  00000000  00000000  00023ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000003e4  00000000  00000000  000767f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00076bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002d4 	.word	0x080002d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080002d4 	.word	0x080002d4

08000108 <main>:
	volatile unsigned int *RCC_AHBENR;
	volatile unsigned int *GPIOA_MODER;
	volatile unsigned int *GPIOA_ODR;

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0




	RCC_AHBENR= (unsigned int *) RCC_AHBENR_adresi;
 800010c:	4b2a      	ldr	r3, [pc, #168]	; (80001b8 <main+0xb0>)
 800010e:	681b      	ldr	r3, [r3, #0]
 8000110:	001a      	movs	r2, r3
 8000112:	4b2a      	ldr	r3, [pc, #168]	; (80001bc <main+0xb4>)
 8000114:	601a      	str	r2, [r3, #0]
	*RCC_AHBENR=*RCC_AHBENR | (1u<<17);
 8000116:	4b29      	ldr	r3, [pc, #164]	; (80001bc <main+0xb4>)
 8000118:	681b      	ldr	r3, [r3, #0]
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	4b27      	ldr	r3, [pc, #156]	; (80001bc <main+0xb4>)
 800011e:	681b      	ldr	r3, [r3, #0]
 8000120:	2180      	movs	r1, #128	; 0x80
 8000122:	0289      	lsls	r1, r1, #10
 8000124:	430a      	orrs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]

	GPIOA_MODER= (unsigned int *) GPIOA_MODER_adresi;
 8000128:	4b25      	ldr	r3, [pc, #148]	; (80001c0 <main+0xb8>)
 800012a:	681b      	ldr	r3, [r3, #0]
 800012c:	001a      	movs	r2, r3
 800012e:	4b25      	ldr	r3, [pc, #148]	; (80001c4 <main+0xbc>)
 8000130:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER=*GPIOA_MODER & ~(0x0000F000);
 8000132:	4b24      	ldr	r3, [pc, #144]	; (80001c4 <main+0xbc>)
 8000134:	681b      	ldr	r3, [r3, #0]
 8000136:	681a      	ldr	r2, [r3, #0]
 8000138:	4b22      	ldr	r3, [pc, #136]	; (80001c4 <main+0xbc>)
 800013a:	681b      	ldr	r3, [r3, #0]
 800013c:	4922      	ldr	r1, [pc, #136]	; (80001c8 <main+0xc0>)
 800013e:	400a      	ands	r2, r1
 8000140:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER=*GPIOA_MODER | (0x00004000);
 8000142:	4b20      	ldr	r3, [pc, #128]	; (80001c4 <main+0xbc>)
 8000144:	681b      	ldr	r3, [r3, #0]
 8000146:	681a      	ldr	r2, [r3, #0]
 8000148:	4b1e      	ldr	r3, [pc, #120]	; (80001c4 <main+0xbc>)
 800014a:	681b      	ldr	r3, [r3, #0]
 800014c:	2180      	movs	r1, #128	; 0x80
 800014e:	01c9      	lsls	r1, r1, #7
 8000150:	430a      	orrs	r2, r1
 8000152:	601a      	str	r2, [r3, #0]

	GPIOA_ODR= (unsigned int *) GPIOA_ODR_adresi;
 8000154:	4b1d      	ldr	r3, [pc, #116]	; (80001cc <main+0xc4>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	001a      	movs	r2, r3
 800015a:	4b1d      	ldr	r3, [pc, #116]	; (80001d0 <main+0xc8>)
 800015c:	601a      	str	r2, [r3, #0]



  while (1)
  {
	  *GPIOA_ODR=*GPIOA_ODR | (1u<<7);
 800015e:	4b1c      	ldr	r3, [pc, #112]	; (80001d0 <main+0xc8>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	4b1a      	ldr	r3, [pc, #104]	; (80001d0 <main+0xc8>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2180      	movs	r1, #128	; 0x80
 800016a:	430a      	orrs	r2, r1
 800016c:	601a      	str	r2, [r3, #0]
	  for(i=0;i<100000;i++);
 800016e:	4b19      	ldr	r3, [pc, #100]	; (80001d4 <main+0xcc>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
 8000174:	e004      	b.n	8000180 <main+0x78>
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <main+0xcc>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	1c5a      	adds	r2, r3, #1
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <main+0xcc>)
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <main+0xcc>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <main+0xd0>)
 8000186:	4293      	cmp	r3, r2
 8000188:	ddf5      	ble.n	8000176 <main+0x6e>
	  *GPIOA_ODR=*GPIOA_ODR & ~(1u<<7);
 800018a:	4b11      	ldr	r3, [pc, #68]	; (80001d0 <main+0xc8>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	681a      	ldr	r2, [r3, #0]
 8000190:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <main+0xc8>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2180      	movs	r1, #128	; 0x80
 8000196:	438a      	bics	r2, r1
 8000198:	601a      	str	r2, [r3, #0]
	  for(i=0;i<100000;i++);
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <main+0xcc>)
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	e004      	b.n	80001ac <main+0xa4>
 80001a2:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <main+0xcc>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	1c5a      	adds	r2, r3, #1
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <main+0xcc>)
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <main+0xcc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <main+0xd0>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	ddf5      	ble.n	80001a2 <main+0x9a>
	  *GPIOA_ODR=*GPIOA_ODR | (1u<<7);
 80001b6:	e7d2      	b.n	800015e <main+0x56>
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000030 	.word	0x20000030
 80001c0:	20000004 	.word	0x20000004
 80001c4:	20000034 	.word	0x20000034
 80001c8:	ffff0fff 	.word	0xffff0fff
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000038 	.word	0x20000038
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	0001869f 	.word	0x0001869f

080001dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <NMI_Handler+0x4>

080001e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <HardFault_Handler+0x4>

080001e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001ec:	46c0      	nop			; (mov r8, r8)
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001f6:	46c0      	nop			; (mov r8, r8)
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000200:	f000 f832 	bl	8000268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}

0800020a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f7ff fff7 	bl	800020a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	; (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 f823 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f7ff ff5f 	bl	8000108 <main>

0800024a <LoopForever>:

LoopForever:
    b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000258:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 800025c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000260:	20000040 	.word	0x20000040

08000264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_IRQHandler>
	...

08000268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <HAL_IncTick+0x1c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	001a      	movs	r2, r3
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x20>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	18d2      	adds	r2, r2, r3
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <HAL_IncTick+0x20>)
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000000c 	.word	0x2000000c
 8000288:	2000003c 	.word	0x2000003c

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	2600      	movs	r6, #0
 8000290:	4c0c      	ldr	r4, [pc, #48]	; (80002c4 <__libc_init_array+0x38>)
 8000292:	4d0d      	ldr	r5, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	2600      	movs	r6, #0
 800029e:	f000 f819 	bl	80002d4 <_init>
 80002a2:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <__libc_init_array+0x40>)
 80002a4:	4d0a      	ldr	r5, [pc, #40]	; (80002d0 <__libc_init_array+0x44>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	00b3      	lsls	r3, r6, #2
 80002b2:	58eb      	ldr	r3, [r5, r3]
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	00b3      	lsls	r3, r6, #2
 80002bc:	58eb      	ldr	r3, [r5, r3]
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002f0 	.word	0x080002f0
 80002d0:	080002ec 	.word	0x080002ec

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
